<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ASV-Subtools Automatic Speaker Verification Toolkit Tutorials</title>
    <link href="/2022/08/05/ASV-Subtools-Automatic-Speaker-Verification-Toolkit-Tutorials/"/>
    <url>/2022/08/05/ASV-Subtools-Automatic-Speaker-Verification-Toolkit-Tutorials/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Voiceprint Recognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Audio and Speech Processing Development Environment</title>
    <link href="/2022/07/30/Audio-and-Speech-Processing-Development-Environment/"/>
    <url>/2022/07/30/Audio-and-Speech-Processing-Development-Environment/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose build<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo systemctl stop docker<br></code></pre></td></tr></table></figure><p>If there is warning like: Warning: Stopping docker.service, but it can still be activated by:**</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker.socket**<br></code></pre></td></tr></table></figure><p>So we can stop the socket</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo systemctl <span class="hljs-built_in">stop</span> docker.<span class="hljs-built_in">socket</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart docker<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker-compose up<br></code></pre></td></tr></table></figure><p>项目中架起docker环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker system prune<br></code></pre></td></tr></table></figure><h1 id="Cuda"><a href="#Cuda" class="headerlink" title="Cuda"></a>Cuda</h1><p><img src="/../images/image-20220730154010169.png" alt="image-20220730154010169"></p><h2 id="nvidia-smi"><a href="#nvidia-smi" class="headerlink" title="nvidia-smi"></a>nvidia-smi</h2><p><img src="/../images/image-20220801144443432.png" alt="image-20220801144443432"></p><p><strong>Issue 1:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">NVIDIA-SMI has failed because <span class="hljs-keyword">it</span> couldn&#x27;t communicate <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> NVIDIA driver. <br>Make sure <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> latest NVIDIA driver <span class="hljs-keyword">is</span> installed <span class="hljs-keyword">and</span> <span class="hljs-built_in">running</span>.<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install dkms<br>sudo dkms install -m nvidia -v 418.87.00  <span class="hljs-comment"># replace the result from ls /usr/src | grep nvidia</span><br></code></pre></td></tr></table></figure><p>Check  the NVIDIA number:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ls <span class="hljs-regexp">/usr/</span>src | <span class="hljs-keyword">grep</span> nvidia     <br></code></pre></td></tr></table></figure><p>This will solve this common issue.</p><h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><p><strong>Check the version of wsl</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wsl -l -v<br></code></pre></td></tr></table></figure><p><strong>Update from wsl 1 to wsl2</strong></p><p>change the default version into wsl2. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wsl --set-default-version 2<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wsl.exe --set-version Ubuntu 2<br></code></pre></td></tr></table></figure><h1 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h1><p>Create a heroku server.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">heroku create<br></code></pre></td></tr></table></figure><p>Push the original codes into the empty projects.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push heroku HEAD:master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Audio and Speech Processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Speech Technology Industry</title>
    <link href="/2022/07/30/Speech-Technology-Industry/"/>
    <url>/2022/07/30/Speech-Technology-Industry/</url>
    
    <content type="html"><![CDATA[<h1 id="Startup-Company-Lists"><a href="#Startup-Company-Lists" class="headerlink" title="Startup Company Lists"></a>Startup Company Lists</h1><p><a href="https://www.ai-startups.org/top/speech_recognition/">https://www.ai-startups.org/top/speech_recognition/</a></p><p>Iconic Translation Machines Ltd.: Language Weaver.Technology and innovation combined with a deeper collaboration from human interaction.：<a href="https://www.rws.com/language-weaver/">https://www.rws.com/language-weaver/</a></p><p>adaptcentre：<a href="https://www.adaptcentre.ie/#1">https://www.adaptcentre.ie/#1</a></p><p>oysis: <a href="https://www.topionetworks.com/companies/voysis-58adc0fc2033d420e1000009">https://www.topionetworks.com/companies/voysis-58adc0fc2033d420e1000009</a></p><p>North AI</p><p>Amazon:</p><p>Aylien:<a href="https://aylien.com/">https://aylien.com/</a></p><p>SoapBox Labs</p>]]></content>
    
    
    
    <tags>
      
      <tag>Speech Technology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP</title>
    <link href="/2022/07/12/CPP/"/>
    <url>/2022/07/12/CPP/</url>
    
    <content type="html"><![CDATA[<p>This is the notes for C++ learning.</p><h1 id="Hash-Map"><a href="#Hash-Map" class="headerlink" title="Hash Map"></a>Hash Map</h1><h2 id="Ordered-Map-Map"><a href="#Ordered-Map-Map" class="headerlink" title="Ordered Map (Map)"></a>Ordered Map (Map)</h2><p>The elements in the ordered map or we say the map, are sorted. In many cases we use the tree structure for this particular issue, such as binary trees.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br></code></pre></td></tr></table></figure><p>Here we defined a hash map, the key is the audio_ID, and the value is the trans:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map&lt;std::string, audioRecord&gt; audioMap;<br></code></pre></td></tr></table></figure><p>each time we need to add more one element, we use:</p><p>Here, the “audio_file_name” here are the keys. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">audioMap[audio_file_name_1] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_1&quot;</span>, sr, bit_depth, dur&#125;;<br>audioMap[audio_file_name_2] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_2&quot;</span>, sr, bit_depth, dur&#125;;<br>audioMap[audio_file_name_3] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_3&quot;</span>, sr, bit_depth, dur&#125;;<br>...<br>audioMap[audio_file_name_n] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_n&quot;</span>, sr, bit_depth, dur&#125;;<br></code></pre></td></tr></table></figure><p>Retreive the data for audio_file_name_3:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">audioRecord&amp; audio_file_name_3 = audioMap[<span class="hljs-string">&quot;audio_file_name_3&quot;</span>]<br>audio_file_name_3.sr;<br></code></pre></td></tr></table></figure><p>So we can easily grap the value results of the “audio_file_name_3” sr.</p><h2 id="Unordered-Map"><a href="#Unordered-Map" class="headerlink" title="Unordered Map"></a>Unordered Map</h2><p>An unordered map is a hash table, it used the hash function to hash the key, and we can easily retreive the bucket we want. This is usually unordered and faster than the map. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unordered_map&lt;std::string, audioRecord&gt; audioMap;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Code Quality</title>
    <link href="/2022/07/12/Code-Quality/"/>
    <url>/2022/07/12/Code-Quality/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-Basics-Operations"><a href="#Python-Basics-Operations" class="headerlink" title="Python Basics Operations"></a>Python Basics Operations</h1><h2 id="Float-number-and-bool"><a href="#Float-number-and-bool" class="headerlink" title="Float number and bool"></a>Float number and bool</h2><p>We cannot directly compare the float value, like using the logic “&#x3D;&#x3D;” symbol. But we can use: the way that using the division method to compare the result with a very small value. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># float_num == cannot be used into the float number comparision.</span><br><span class="hljs-built_in">abs</span>(float_num - <span class="hljs-number">12.2</span> &lt; <span class="hljs-number">1e-5</span>)<br><span class="hljs-comment"># here the 1e5 means the 0.1^(-5), just equals to 0.000001. </span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Convert <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">the</span> inverse <span class="hljs-built_in">number</span>:<br>Like <span class="hljs-built_in">num</span> = <span class="hljs-number">150</span><br>We got <span class="hljs-built_in">result</span> = <span class="hljs-number">51</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">150</span><br>digit1 = num % <span class="hljs-number">10</span><br>digit2 = num // <span class="hljs-number">10</span> % <span class="hljs-number">10</span><br>digit3 = num // <span class="hljs-number">100</span><br><br>result = digit1 * <span class="hljs-number">100</span> + digit2 * <span class="hljs-number">10</span> + digit3<br></code></pre></td></tr></table></figure><h2 id="Swap-the-two-value’s-values"><a href="#Swap-the-two-value’s-values" class="headerlink" title="Swap the two value’s values:"></a>Swap the two value’s values:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># here is the standard way</span><br>num1 = <span class="hljs-number">10</span><br>num2 = <span class="hljs-number">15</span><br><br>tmp = num2<br>num2 = num1<br>num1 = tmp<br><br><span class="hljs-comment"># this is to help you to exchange the variables, but if you are in python we can do:</span><br>num1, num2 = num2, num1<br></code></pre></td></tr></table></figure><p>Google Codestyle Pygide</p><h2 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate"></a>Enumerate</h2><p>In python we can use range() or just for loops to loop the elements from a list, but we still strongly suggest we use the enumerate, since it looks more python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> (index, num) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br><span class="hljs-keyword">return</span> (index, num)<br></code></pre></td></tr></table></figure><p>Reverse the list!!! Using range()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br><span class="hljs-comment"># range(n, m, -1) n = [n, n - 1, n - 2, ..., m + 1]</span><br><span class="hljs-built_in">print</span>(nums[i], end = <span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h2 id="While-and-for"><a href="#While-and-for" class="headerlink" title="While and for"></a>While and for</h2><p>While loop is just equal to the for loop in many ways:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(scores):<br><span class="hljs-built_in">print</span>(score[i])<br>i += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># thats the biggest difference, since if in for, we do not need to add the value manually.</span><br></code></pre></td></tr></table></figure><h3 id="Swap-a-function-to-exchange-the-values-into-an-array"><a href="#Swap-a-function-to-exchange-the-values-into-an-array" class="headerlink" title="Swap a function to exchange the values into an array"></a>Swap a function to exchange the values into an array</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Input</span> = <span class="hljs-string">&#x27;[1, 2, 3, 4]&#x27;</span><br><span class="hljs-attr">index1</span> = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attr">index2</span> = <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">Result</span> = <span class="hljs-string">&#x27;[1, 2, 4, 3]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">swapInteger</span>(<span class="hljs-params">swapList, swapIdx1, swapIdx2</span>):<br>    swapList[swapIdx1], swapList[swapIdx2] = swapList[swapIdx2], swapList[swapIdx1]<br>    <span class="hljs-keyword">return</span> swapList<br></code></pre></td></tr></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>In python the “self.” all can represent the inner nature of a function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(): <span class="hljs-comment"># Class name should follow the camel way</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, score</span>):<br><span class="hljs-comment"># we defined two natures of the student: name &amp; score</span><br>self.name = name<br>self.score = score<br><br><span class="hljs-comment"># here we defined the behaviour</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.name, self.score)<br></code></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a><strong>init</strong></h3><p>init is the default construnction function that will run when you create that class. This is the compulsory element of the class.</p><h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><p>Self it is the object itself, when we define the class we must declare it, but when we call it we will not see.</p><h2 id="From-class-to-object"><a href="#From-class-to-object" class="headerlink" title="From class to object"></a>From class to object</h2><p>Instance is just object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">student = Student(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">90</span>)<br><span class="hljs-comment"># we can visit the value of that object</span><br>student.name<br>student.score<br><span class="hljs-comment"># call the function from that class object</span><br>student.speak()<br><span class="hljs-comment"># reset the value</span><br>student.name = <span class="hljs-number">80</span><br><br></code></pre></td></tr></table></figure><h2 id="Existence"><a href="#Existence" class="headerlink" title="Existence"></a>Existence</h2><p>We need to have the existence judge before we really run the function:</p><p>It can combine two cases: 1) End Case 2) Base Case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># here is the base case</span><br><span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">return</span> <br></code></pre></td></tr></table></figure><h2 id="List-CRUD"><a href="#List-CRUD" class="headerlink" title="List CRUD"></a>List CRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ul><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = list_1 + list_2<br></code></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span> * <span class="hljs-number">3</span><br><span class="hljs-comment"># It will duplicate all the elements in the list three times</span><br></code></pre></td></tr></table></figure><p>append</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.append(<span class="hljs-string">&quot;will add an element from the end of the list&quot;</span>)<br></code></pre></td></tr></table></figure><p>insert</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">list.insert(index, <span class="hljs-string">&quot;the element you want to insert&quot;</span>)<br>list.insert(2, <span class="hljs-string">&quot;the element you want to insert&quot;</span>)<br></code></pre></td></tr></table></figure><p>extend</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>]<br>list_b = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list_a.extend(list_b)<br></code></pre></td></tr></table></figure><p>This will enable us to insert the values before the list we want to append. It looks like “+”, but for “+”, we need to generate a new list, but for this strategy, there is no need to do this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p><strong>iteration</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list_a:<br>    <span class="hljs-built_in">print</span>(x, end = <span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>index id</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a[n]<br></code></pre></td></tr></table></figure><p><strong>slice</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a[:]<br></code></pre></td></tr></table></figure><p><strong>in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span> <span class="hljs-keyword">in</span> list_a<br><span class="hljs-comment"># it will return a boolean value</span><br></code></pre></td></tr></table></figure><p><strong>index method</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.index(<span class="hljs-string">&quot;the value you want to search&quot;</span>)<br><br><span class="hljs-comment"># it will tell you the index of the value you search, if not in there will be invalid</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">2</span> <span class="hljs-keyword">in</span> list_a:<br>    <span class="hljs-keyword">return</span> list_a.index(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># in order to prevent that if we cannot find the index value and output the bug issues, we need to firstly have a if then if true, we then print the index of that value, else just do not.</span><br></code></pre></td></tr></table></figure><p><strong>count</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.count(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># count is to get how many frequencies that value occurred from the list</span><br></code></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><strong>update through the index</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a[<span class="hljs-number">2</span>] = ... <br></code></pre></td></tr></table></figure><p><strong>Update through slicing</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b[:n] = [,,,]<br></code></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p><strong>&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b [:<span class="hljs-number">2</span>] = []<br><span class="hljs-comment"># delete all the values before the list_b[2]</span><br></code></pre></td></tr></table></figure><p><strong>pop</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b.pop(index)<br>list_b.pop(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># this will delete the list_b[2]</span><br></code></pre></td></tr></table></figure><p>If there is no index, it will defaultly delete the final value.</p><p><strong>remove</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b.remove(index_value)<br>list_b.pop(<span class="hljs-string">&quot;A&quot;</span>)<br><span class="hljs-comment"># this will remove the value from the list</span><br></code></pre></td></tr></table></figure><p><strong>del</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> list_a[<span class="hljs-number">3</span>]<br><span class="hljs-comment"># we can use delete to delete the value by index or by slicing</span><br><span class="hljs-keyword">del</span> list_a[:n]<br></code></pre></td></tr></table></figure><h3 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty"></a>is_empty</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> self.items：<br><span class="hljs-comment"># if the list is empty it will return false, if not empty, it will be True.</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.items:<br>    <span class="hljs-comment"># if the list is empty it will return True, if not, it will be False.</span><br></code></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p><strong>len</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(list_a)<br></code></pre></td></tr></table></figure><p><strong>sort</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.sort()<br><span class="hljs-comment"># it will generate a sorted version of the list_a</span><br></code></pre></td></tr></table></figure><p><strong>reverse</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.reverse()<br><span class="hljs-comment"># it will reverse the list</span><br></code></pre></td></tr></table></figure><p><strong>reverse sort</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.sort(reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-comment"># it will reverse from the big elements downto the small ones</span><br></code></pre></td></tr></table></figure><h3 id="List-Generator"><a href="#List-Generator" class="headerlink" title="List Generator"></a>List Generator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_demo = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>]<br><span class="hljs-comment"># we can easily generate the list by this way.</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># generate a multiple value list</span><br>[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>we can generate the multiple values there:<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>We only can read tuple cannot do the <strong>CUD</strong> there. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>When we do the copy the value</p><h2 id="String-CRUD"><a href="#String-CRUD" class="headerlink" title="String CRUD"></a>String CRUD</h2><h3 id="Create-1"><a href="#Create-1" class="headerlink" title="Create"></a>Create</h3><p><strong>+</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a = string_a + string_b<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a = string_a * <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>for</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string_a:<br>    <span class="hljs-built_in">print</span>(c, end = <span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Read-1"><a href="#Read-1" class="headerlink" title="Read"></a>Read</h3><p><strong>find</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a.find(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-comment"># we can get the index of the string value</span><br></code></pre></td></tr></table></figure><h3 id="Update-1"><a href="#Update-1" class="headerlink" title="Update"></a>Update</h3><p><strong>replace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a.replace(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;www&quot;</span>)<br><span class="hljs-comment"># we can replace the value &quot;h&quot; into &quot;www&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Delete-1"><a href="#Delete-1" class="headerlink" title="Delete"></a>Delete</h3><p><strong>replace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a.replace(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-comment"># we can replace the value &quot;h&quot; into &quot; &quot;, by this way we can delete the &quot;h&quot; element.</span><br></code></pre></td></tr></table></figure><h3 id="Others-1"><a href="#Others-1" class="headerlink" title="Others"></a>Others</h3><p><strong>len</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(string_a)<br></code></pre></td></tr></table></figure><p><strong>format</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;I am &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Xiao&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>str()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>(<span class="hljs-number">100</span>)<br><span class="hljs-comment"># we can invert the numerical number into a string</span><br></code></pre></td></tr></table></figure><p><strong>format the elements of the list into the string value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">list_demo = [<span class="hljs-string">&quot;xiao&quot;</span>, <span class="hljs-string">&quot;zhang&quot;</span>]<br><br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list_demo:<br>    result += s + <span class="hljs-string">&quot; &quot;</span><br><span class="hljs-comment"># here is a more elegant way</span><br>result = <span class="hljs-string">&quot; &quot;</span>.join(list_demo)<br>    <br><span class="hljs-comment"># the result will be &quot;xiao zhang&quot;    </span><br></code></pre></td></tr></table></figure><p><strong>reverse the string</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># using for loop but it is not suggested!!!</span><br>s = <span class="hljs-string">&quot;xiaozhang&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>    result = s[i]<br><span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># we can just using the slicing</span><br><span class="hljs-built_in">print</span>(s[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="LinkedList-CRUD"><a href="#LinkedList-CRUD" class="headerlink" title="LinkedList CRUD"></a>LinkedList CRUD</h2><p>Linked list is not in the Python default data type, so we have to self define it.  The first node and its reference can represent the whole linked list, because you can find from one to infinity one by one. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        self.val = val<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        val in here is the node value, it can be integer or anything, &quot;next&quot; is to connect this node to next node.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        none in python is an global object, if we cannot define that value specifically, we just denote it as none. Since we do not want to pass no value to that variable. </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_linkedlist</span>():<br>    node_1 = ListNode(<span class="hljs-number">1</span>)<br>    node_2 = ListNode(<span class="hljs-number">3</span>)<br>    node_3 = ListNode(<span class="hljs-number">5</span>)    <br>    node_4 = ListNode(<span class="hljs-number">7</span>)   <br>    <br>    <br>    <br>    node_1.<span class="hljs-built_in">next</span> = node_2<br>    node_2.<span class="hljs-built_in">next</span> = node_3<br>    node_3.<span class="hljs-built_in">next</span> = node_4<br>    <br>    <span class="hljs-keyword">return</span> node_1<br><br><span class="hljs-string">&#x27;&#x27;&#x27;            </span><br><span class="hljs-string">                Val</span><br><span class="hljs-string"> * *           * *  next     * *            * *                                    </span><br><span class="hljs-string">* 1 * -&gt; None * 3 * -&gt; None * 5 *  -&gt; None * 7 * -&gt; None                          </span><br><span class="hljs-string"> * *           * *           * *            * *                     </span><br><span class="hljs-string">  ^             ^             ^              ^</span><br><span class="hljs-string">node_1        node_2         node_3        node_4</span><br><span class="hljs-string">  </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br></code></pre></td></tr></table></figure><p><strong>while loop to read through the linked list</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(cur.val, end=<span class="hljs-string">&quot; &quot;</span>)<br>    cur = cur.<span class="hljs-built_in">next</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>The core idea is that if we can know the head of the linkedlist, then we can know the all linkedlist. So in most cases, we will only store the head of the linkedlist. We will make use of the head of the linkedlist, to do the CRUD for all the linkedList. And these are the core idea for the Linkedlist. We believe if we can know the head of the LinkedList, then we can know all the LinkedList. </p><p>So here, we will do the all the operations based on the manipulation of the head of the linkedlist.</p><h3 id="Create-2"><a href="#Create-2" class="headerlink" title="Create"></a>Create</h3><p><strong>add(location, val)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># here we want to do the operation like: add(2, 2)</span><br><span class="hljs-comment"># which means we want to add a value into the location[2], and assign that value into 2</span><br><br>Like here: <span class="hljs-number">1</span> &gt; <span class="hljs-number">3</span> &gt; <span class="hljs-number">5</span> &gt; <span class="hljs-number">7</span><br>The result should be: <span class="hljs-number">1</span> &gt; <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span> &gt; <span class="hljs-number">5</span> &gt; <span class="hljs-number">7</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">The logic is we have to know the:</span><br><span class="hljs-string">1) the node we add (new_node) before that node, here is &quot;3&quot;, we call it &quot;prev&quot;, we then cut that node&#x27;s connection with the next one.</span><br><span class="hljs-string">2) link the new_node with the position after it (new_node.next).</span><br><span class="hljs-string">3)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># we cut the connection between the original node and the node after it.</span><br>new_node.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span><br><span class="hljs-comment"># we reconnect with the original node with current node we want to add.</span><br>pre.<span class="hljs-built_in">next</span> = new_node<br></code></pre></td></tr></table></figure><p>Here are the actual code:</p><p><img src="/../images/image-20220804004720164.png" alt="image-20220804004720164"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Case 1. Add the value in within the linkedlist, which means the location is &gt; 0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, location, val</span>):<br>        <span class="hljs-keyword">if</span> location &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># if we want to insert the location in 2, then the position before it should be &quot;1&quot;. If from head to the position of &quot;1&quot;, we need to let the head to go 1 step only, if 3 then 2 steps.</span><br>            <span class="hljs-comment"># initiate the head node</span><br>            pre = self.head<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location - <span class="hljs-number">1</span>):<br>                <span class="hljs-comment"># here it means to go forward 1 step</span><br>                pre = pre.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment"># find out the value of the new node</span><br>new_node = ListNode(val)<br>            <span class="hljs-comment"># disconnect and reconnect</span><br>            new_node.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span><br>            pre.<span class="hljs-built_in">next</span> = new_node <br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220804004555432.png" alt="image-20220804004555432"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Case 2. Add the value in the head, where the location is 0</span><br><span class="hljs-keyword">elif</span> location == <span class="hljs-number">0</span>:<br>        new_node = ListNode(val)<br>            new_node.<span class="hljs-built_in">next</span> = self.head<br>            self.head = new_node<br></code></pre></td></tr></table></figure><h3 id="Read-2"><a href="#Read-2" class="headerlink" title="Read"></a>Read</h3><p><strong>get(location)</strong></p><p>Here, we need to do <strong>get(2)</strong></p><p><img src="/../images/image-20220804004928059.png" alt="image-20220804004928059"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, location</span>):<br>    <span class="hljs-comment"># initiate the header value as cur</span><br>    cur = self.head<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location):<br>        cur = cur.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> cur.val<br></code></pre></td></tr></table></figure><p><strong>traverse()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self</span>):<br>    cur = self.head<br>    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(cur.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>       cur = cur.<span class="hljs-built_in">next</span><br>   <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p><strong>is_empty()</strong></p><p>Check whether it is an empty linkedlist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> self.head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h3 id="Update-2"><a href="#Update-2" class="headerlink" title="Update"></a>Update</h3><p><strong>set(location, val)</strong></p><p>The set() function is very similar to the get function, but the get() is only return the value instead of get change the value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">self, location, val</span>):<br>    cur = self.head<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location):<br>        cur = cur.<span class="hljs-built_in">next</span><br>    cur.val = val<br></code></pre></td></tr></table></figure><h3 id="Delete-2"><a href="#Delete-2" class="headerlink" title="Delete"></a>Delete</h3><p><strong>remove(location, val)</strong></p><p>Remove() is very similar to the add() operations.</p><p><img src="/../images/image-20220806002041405.png" alt="image-20220806002041405"></p><p>If we want to remove the node we want to remove, we should remove the node before that node. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Case 1. Remove the value in within the linkedlist, which means the location is &gt; 0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, location</span>):<br>    <span class="hljs-keyword">if</span> location &gt; <span class="hljs-number">0</span>:<br>        pre = self.head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location - <span class="hljs-number">1</span>):<br>            pre = pre.<span class="hljs-built_in">next</span><br>       <br>        pre.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>    <span class="hljs-comment"># Case 2. Remove the value in the head, where the location is 0</span><br><span class="hljs-keyword">elif</span> location == <span class="hljs-number">0</span>:<br>        self.head = self.head.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h2 id="Stack-CRUD"><a href="#Stack-CRUD" class="headerlink" title="Stack CRUD"></a>Stack CRUD</h2><p>Stack is LIFO(last in first out). </p><p>In python, we can use list as a stack. The last element of the list can be the top stack.</p><p>List can be a kind of stack but in a higher level, since we can do the CRUD in the place we want but stack cannot. We can use the stack to realize the stack functions.</p><h3 id="Create-3"><a href="#Create-3" class="headerlink" title="Create"></a>Create</h3><p>push(val)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.items = []<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, item</span>):<br>        self.items.append(item)<br><br><span class="hljs-comment"># we can just push a element there.</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    my_stack = MyStack()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        my_stack.push(i)<br></code></pre></td></tr></table></figure><h3 id="Read-3"><a href="#Read-3" class="headerlink" title="Read"></a>Read</h3><p>peek(): return the top stack value which is the last value in the list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.items = []<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># if empty, it will just return TRUE, if not empty then it is FALSE, this is from the python initial feature.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> self.items<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">peek</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.is_empty():<br>            <span class="hljs-keyword">return</span> self.items[-<span class="hljs-number">1</span>]<br>        <br><br><span class="hljs-comment"># we can just push a element there.</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    my_stack = MyStack()<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> my_stack.is_empty():<br>my_stack.peek<br></code></pre></td></tr></table></figure><h3 id="Delete-3"><a href="#Delete-3" class="headerlink" title="Delete"></a>Delete</h3><p>pop()</p><p>It will only delete the element at the top of the stack.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.items = []<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> self.items.pop()<br><br><span class="hljs-comment"># we can just delete the last element of the list and return it.</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    my_stack = MyStack()<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> my_stack.is_empty():<br>         my_stack.pop()<br></code></pre></td></tr></table></figure><h2 id="Queue-CURD"><a href="#Queue-CURD" class="headerlink" title="Queue CURD"></a>Queue CURD</h2><p>Queue is first in first out (FIFO).  We can use the LinkedList to make this work. The reason that we are using the linked list instead of list is that: if we are using the list, for the head of that list, if we want to delete that node, the time complexity is o(n). </p><h3 id="Create-4"><a href="#Create-4" class="headerlink" title="Create"></a>Create</h3><p><strong>enqueue(val)</strong></p><p>Get the value into the quene.</p><h3 id="Delete-4"><a href="#Delete-4" class="headerlink" title="Delete"></a>Delete</h3><p><strong>dequeue()</strong></p><p>remove from the queue.</p><p><strong>size()</strong></p><p>check the elements number within the quene.</p><p><strong>is_empty:</strong></p><p>Check whether the quene is empty.</p><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>The binary tree only accepts the two child node for each parent node. If there is no specification, we will think that the tree is the binary tree. Binary tree is just like linked list, it is very important data structures. And there is also some therorums, that each tree  can be converted into the many binary trees.</p><h3 id="Create-5"><a href="#Create-5" class="headerlink" title="Create"></a>Create</h3><p>We can create a binary tree in this way:</p><p>We need to define the class of the tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        self.val = val<br>        self.left = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># there are only two child nodes under each node. But for linked list, we only gonna have one child node.</span><br>        self.right = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>Now, its time to build a binary tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_tree</span>():<br>    node_1 = TreeNode(<span class="hljs-number">8</span>)<br>    node_2 = TreeNode(<span class="hljs-number">2</span>)<br>    node_3 = TreeNode(<span class="hljs-number">10</span>)<br>    node_4 = TreeNode(<span class="hljs-number">1</span>)<br>    node_5 = TreeNode(<span class="hljs-number">7</span>)<br>    <br>    node_1.left = node_2<br>    node_1.right = node_3<br>    <br>    node_2.left = node_4<br>    node_4.right = node_5<br>    node_6 = TreeNode(<span class="hljs-number">14</span>)<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220815234947765.png" alt="image-20220815234947765"></p><p>This pic shows we already defined those nodes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">node_1.left = node_2<br>node_1.right = node_3<br><br>node_2.left = node_4<br>node_2.right = node_5<br><br>node_3.right = node_6<br><span class="hljs-comment"># we finally return the root node.</span><br><span class="hljs-keyword">return</span> node_1<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220816000014300.png" alt="image-20220816000014300"></p><h3 id="Read-4"><a href="#Read-4" class="headerlink" title="Read"></a>Read</h3><p>We can read that data structure by traverse all the binary tree data. </p><h4 id="DFS-Deep"><a href="#DFS-Deep" class="headerlink" title="DFS (Deep)"></a>DFS (Deep)</h4><p><strong>Pre-order ( root - left - right)</strong></p><p>The logic in here is that: for each node, we firstly find the root node, then the left-sub tree, finally the right-sub tree. We call this pre-order traverse. </p><p>Now we only knew the root node, we can print the whole tree by the root node. We can print the left-sub tree, and then the right-sub tree. In this way, we can print all the trees at the same time. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse_tree</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <br><span class="hljs-comment"># if we do not specify the &quot; &quot;, then it can be just &quot;/n&quot;</span><br>    <span class="hljs-built_in">print</span>(root.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-comment"># traverse all the left-sub tree nodes</span><br>    traverse_tree(root.left)<br>    <span class="hljs-comment"># traverse all the right-sub tree nodes</span><br>    traverse_tree(root.right) <span class="hljs-comment"># traversal</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220816014232178.png" alt="image-20220816014232178"></p><p><img src="/../images/image-20220816000014300.png" alt="image-20220816000014300"></p><p>The inorder way is: <strong>left-root-right</strong>, the postorder is <strong>left-right-root</strong>. </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inorder_traverse</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment"># traverse all the left-sub tree nodes</span><br>    inorder_traverse(root.left)<br>    <span class="hljs-comment"># if we do not specify the &quot; &quot;, then it can be just &quot;/n&quot;</span><br>    <span class="hljs-built_in">print</span>(root.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-comment"># traverse all the right-sub tree nodes</span><br>    traverse_tree(root.right) <span class="hljs-comment"># traversal</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">postorder_traverse</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment"># traverse all the left-sub tree nodes</span><br>    inorder_traverse(root.left)<br>    <span class="hljs-comment"># traverse all the right-sub tree nodes</span><br>    traverse_tree(root.right) <span class="hljs-comment"># traversal</span><br>    <span class="hljs-comment"># if we do not specify the &quot; &quot;, then it can be just &quot;/n&quot;</span><br>    <span class="hljs-built_in">print</span>(root.val, end = <span class="hljs-string">&quot; &quot;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="BFS-Breadth-First-Search"><a href="#BFS-Breadth-First-Search" class="headerlink" title="BFS (Breadth First Search)"></a>BFS (Breadth First Search)</h4><p>It will traverse all the tree level by level. For BFS, we will use the queue as basic data structures.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">breadth_first_traverse</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-keyword">return</span> <br><br>    que = Queue(maxsize = <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># put the root node into the queue</span><br>    que.put(root)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> que.empty():<br>        cur = que.get()<br>        <span class="hljs-built_in">print</span>(cur.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">if</span> cur.left:<br>            que.put(cur.left)<br>        <span class="hljs-keyword">if</span> cur.right:<br>            que.put(cur.right)<br>        <span class="hljs-built_in">print</span>()<br>        <br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h1 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h1><p>Recursion is just a way that how we write the algorithm. Recursive is a very smart way to do the algorithm, but recursive is not compulsory. Recursive is just a way that we do the programming, any recursive problem can be divided into the non-recursive problem. </p><p>There are three important factors that we need the recursive:</p><ol><li><strong>the definition of the recursive</strong></li></ol><p>We need to know if this problem can be elegantly used the recursive way to solve.</p><ol start="2"><li><strong>the end case of the recursive</strong></li></ol><p>We should know when the recursion will be stopped.</p><ol start="3"><li><strong>the division of the recursive</strong></li></ol><p>If the recursion is not stopped, how we divide the problems?</p><p>Eg: Fibonacci， </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">34</span>, ...<br><br><span class="hljs-attribute">0</span>+<span class="hljs-number">1</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>+<span class="hljs-number">1</span> = <span class="hljs-number">2</span><br><span class="hljs-attribute">2</span>+<span class="hljs-number">3</span> = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>The question is that if I gave you a number that in the Fibonacci, you should return the order value of that nth value. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># The definition of the recursion: F(n) = F(n-1) + F(n-2)</span><br><span class="hljs-comment"># The exit of the recursion: when n=1, n=2 (1th, 2th...)</span><br><span class="hljs-comment"># The division of the recursion: self.fibonacci(n-1) + self.fibonacci(n-1)</span><br><br><br><span class="hljs-comment"># this is not a good solution but good to express the recursion!!!</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># because this is defined within the class, if we did not add the self, the class will not find it.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> self.fibonacci(n-<span class="hljs-number">1</span>) + self.fibonacci(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="Algorithms-and-Data-Structures"><a href="#Algorithms-and-Data-Structures" class="headerlink" title="Algorithms and Data Structures:"></a>Algorithms and Data Structures:</h1><p>Algorithm is the way how we do things, the data structure is is the structure of how we storage the data.</p><p><strong>二分法</strong></p><p><strong>二叉树&#x2F;链表</strong></p><p><strong>递归&#x2F;DFS</strong></p><p><strong>BFS&#x2F;拓扑排序</strong></p><p><strong>哈希表</strong></p><p><strong>双指针</strong></p><p><strong>动态规划</strong></p><p><strong>堆</strong></p><h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h2><h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><h2 id="Dynamic-Search"><a href="#Dynamic-Search" class="headerlink" title="Dynamic Search"></a>Dynamic Search</h2><h2 id="Topological-Sorting"><a href="#Topological-Sorting" class="headerlink" title="Topological Sorting"></a>Topological Sorting</h2><h2 id="Others-2"><a href="#Others-2" class="headerlink" title="Others"></a>Others</h2><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><h3 id="Divide-amp-Conquer"><a href="#Divide-amp-Conquer" class="headerlink" title="Divide &amp; Conquer"></a>Divide &amp; Conquer</h3><h3 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h3><h3 id="Minimum-Spanning-Tree"><a href="#Minimum-Spanning-Tree" class="headerlink" title="Minimum Spanning Tree"></a>Minimum Spanning Tree</h3><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><h3 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h3><p>Time complexity expresses the efficiency of that algorithm’s efficiency. </p><p><strong>Dynamic Programming</strong></p><p><strong>Linked List</strong></p><p><strong>Recursion</strong></p><p><strong>Binary Tree</strong></p><p><strong>Binary Search</strong></p><p><strong>Depth First Search (DFS)</strong></p><h1 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h1><p>There are three kinds of two pointers:</p><h2 id="Two-pointers-with-the-opposite-direction-judge-whether-a-string-list-is-a-palindrome"><a href="#Two-pointers-with-the-opposite-direction-judge-whether-a-string-list-is-a-palindrome" class="headerlink" title="Two pointers with the opposite direction (judge whether a string list is a palindrome)"></a>Two pointers with the opposite direction (judge whether a string list is a palindrome)</h2><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><h4 id="Reverse-the-string-list"><a href="#Reverse-the-string-list" class="headerlink" title="Reverse the string list"></a>Reverse the string list</h4><h4 id="Judge-whether-the-valid-palindrome"><a href="#Judge-whether-the-valid-palindrome" class="headerlink" title="Judge whether the valid palindrome"></a>Judge whether the valid palindrome</h4><p>From the two sides to compare.</p><h3 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h3><h4 id="Sum-of-two-numbers"><a href="#Sum-of-two-numbers" class="headerlink" title="Sum of two numbers"></a>Sum of two numbers</h4><h4 id="Sum-of-three-numbers"><a href="#Sum-of-three-numbers" class="headerlink" title="Sum of three numbers"></a>Sum of three numbers</h4><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><h4 id="Fast-sorting"><a href="#Fast-sorting" class="headerlink" title="Fast sorting"></a>Fast sorting</h4><h4 id="Color-sorting"><a href="#Color-sorting" class="headerlink" title="Color sorting"></a>Color sorting</h4><h2 id="Two-pointers-with-the-back-direction-the-longest-reverse-list"><a href="#Two-pointers-with-the-back-direction-the-longest-reverse-list" class="headerlink" title="Two pointers with the back direction (the longest reverse list)"></a>Two pointers with the back direction (the longest reverse list)</h2><h2 id="Two-pointers-with-the-same-direction"><a href="#Two-pointers-with-the-same-direction" class="headerlink" title="Two pointers with the same direction"></a>Two pointers with the same direction</h2><h1 id="No-56-Two-Sums"><a href="#No-56-Two-Sums" class="headerlink" title="No. 56 Two Sums"></a>No. 56 Two Sums</h1><h3 id="Return-the-value"><a href="#Return-the-value" class="headerlink" title="Return the value"></a>Return the value</h3><h4 id="1-Two-Pointers"><a href="#1-Two-Pointers" class="headerlink" title="1. Two Pointers"></a>1. Two Pointers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers, target</span>):<br>        [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>] target = <span class="hljs-number">10</span><br>        <br>        <br>        <span class="hljs-comment"># first step is to sort</span><br>        [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]<br>         ^      ^<br>        L  R<br>        <span class="hljs-comment"># next step is to find the relationship between:</span><br>        numbers[L] + nums[R] ? target<br>        <span class="hljs-number">2</span> + <span class="hljs-number">9</span> = <span class="hljs-number">11</span> &gt; <span class="hljs-number">10</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        So we can know the maximum sum is like 11, and it is useless, so remove it.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># we then move to the next step</span><br>        [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br>         ^   ^<br>        L   R<br>        <br>        <span class="hljs-number">2</span> + <span class="hljs-number">6</span> =<span class="hljs-number">8</span> &lt; <span class="hljs-number">10</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        So now we know that 2 is to small, even we add the largest number but still not meet the requirement, so we need to move it and let the L pointer into 4.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        [<span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br>         ^  ^<br>        L  R<br>        <span class="hljs-comment"># And [4, 6] is the exact answer</span><br>        <br>        <br>        <br>        <br>  <br>        <br></code></pre></td></tr></table></figure><p>Here is the general answer, add the max value and the min value, </p><p>if &gt; target, we just remove the max value, </p><p>if &lt; target, we just remove the min value,</p><p>if &#x3D;  target, we just return true.</p><p>if we cannot even find any answer, return [-1, -1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers, target</span>):<br>        <span class="hljs-comment"># nlog(n)</span><br>        numbers.sort()<br>        <span class="hljs-comment"># o(n)</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> numbers[left] + numbers[right] &gt; target:<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> numbers[left] + numbers[right] &lt; target:<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> numbers[left], numbers[right]<br>        <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><h3 id="Return-the-index"><a href="#Return-the-index" class="headerlink" title="Return the index"></a>Return the index</h3><h4 id="Way-1-Hashmap"><a href="#Way-1-Hashmap" class="headerlink" title="Way 1 Hashmap"></a>Way 1 Hashmap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers, target</span>):<br>        <span class="hljs-comment"># now we initiate a hashtable</span><br>        hashset = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-comment"># O(n)</span><br>        <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers:<br>            <span class="hljs-comment"># [2,4,5], target = 8</span><br>            <span class="hljs-keyword">if</span> target - number <span class="hljs-keyword">in</span> hashset:<br>                <span class="hljs-keyword">return</span> number, target-number<br>            hashset.add(number)<br>        <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="Way-2-Two-Pointers"><a href="#Way-2-Two-Pointers" class="headerlink" title="Way 2 Two Pointers"></a>Way 2 Two Pointers</h4><p>If we want to return the index of the values, so we have better to use the hash map.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        <span class="hljs-comment"># here is like if there is no numbers, then should return the default values.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>        <br>        nums = [(nums, index)<br>               <span class="hljs-keyword">for</span> index, nums <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums)]<br>        <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        the codes there equals to:</span><br><span class="hljs-string">        nums = [] </span><br><span class="hljs-string">        for index, numbers in enumerate(numbers):</span><br><span class="hljs-string">        nums.append((numbers, index))</span><br><span class="hljs-string">        numbers[0], 0</span><br><span class="hljs-string">        numbers[1], 1</span><br><span class="hljs-string">        numbers[2], 2</span><br><span class="hljs-string">        ...</span><br><span class="hljs-string">        numbers[n], n</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># now we still sort the values of the tuples</span><br>        nums.sort()<br>        <span class="hljs-comment"># we only need to add the index values there</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) -<span class="hljs-number">1</span> <br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> nums[left][<span class="hljs-number">0</span>] + nums[right][<span class="hljs-number">0</span>] &gt; target:<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[left][<span class="hljs-number">0</span>] + nums[right][<span class="hljs-number">0</span>] &lt; target:<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>([nums[left][<span class="hljs-number">1</span>], nums[right][<span class="hljs-number">1</span>]])<br>        <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><h1 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h1><h2 id="Quicksort"><a href="#Quicksort" class="headerlink" title="Quicksort"></a>Quicksort</h2><p>There has a sequence like</p><h3 id="Easy-Understand-Version"><a href="#Easy-Understand-Version" class="headerlink" title="Easy Understand Version"></a>Easy Understand Version</h3><p>Pivot:</p><p>L &gt; Pivot &amp;&amp; R &lt; Pivot  &#x3D;&gt; swap L and R</p><p>L &lt;&#x3D; Pivot                          &#x3D;&gt; L &#x3D; L + 1</p><p>R &gt;&#x3D; Pivot                          &#x3D;&gt; R &#x3D; R - 1</p><p>L &gt; R                         &#x3D;&gt; swap L and R</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">    R             Pivot             L<br>               <br><span class="hljs-keyword">swap </span>L <span class="hljs-keyword">and </span>R<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <span class="hljs-attribute">L</span>             Pivot <br>               <br><span class="hljs-attribute">L</span> = L + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">                 Pivot              <span class="hljs-built_in">R</span>     <br>               <br><span class="hljs-built_in">R</span> = <span class="hljs-built_in">R</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">    R                                L                  Pivot   <br>               <br><span class="hljs-keyword">swap </span>L <span class="hljs-keyword">and </span>Pivot<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">sequence</span>):<br>    length = <span class="hljs-built_in">len</span>(sequence)<br>    <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> sequence<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># here we choosed the finial element as the pivot</span><br>        pivot = sequence.pop()<br>    <br>    <br>    items_greater = []<br>    items_lower = []<br>    <br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> sequence:<br>        <span class="hljs-keyword">if</span> item &gt; pivot:<br>            items_greater.append(item)<br>        <span class="hljs-keyword">else</span>:<br>            items_lower.append(item)<br>    <span class="hljs-keyword">return</span> quick_sort(items_greater) + [pivot] + quick_sort(items_lower)<br>    <br>sequence = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(quick_sort(sequence))<br>[<span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">xs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Given indexable and slicable iterable, return a sorted list&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> xs: <span class="hljs-comment"># if given list (or tuple) with one ordered item or more: </span><br>        pivot = xs[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># below will be less than:</span><br>        below = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xs[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &lt; pivot] <br>        <span class="hljs-comment"># above will be greater than or equal to:</span><br>        above = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xs[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt;= pivot]<br>        <span class="hljs-keyword">return</span> quicksort(below) + [pivot] + quicksort(above)<br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">return</span> xs <span class="hljs-comment"># empty lists</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">array</span>):<br>    quickSortHelper(array, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(array) - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> array<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quickSortHelper</span>(<span class="hljs-params">array, startIdx, endIdx</span>):<br>    <span class="hljs-keyword">if</span> startIdx &gt;= endIdx:<br>        <span class="hljs-keyword">return</span><br>    pivotIdx = startIdx<br>    leftIdx = startIdx + <span class="hljs-number">1</span><br>    rightIdx = endIdx<br>    <br>    <br>    <span class="hljs-keyword">while</span> leftIdx &lt;= rightIdx:<br>        <span class="hljs-keyword">if</span> array[leftIdx] &gt; array[pivotIdx] <span class="hljs-keyword">and</span> array[rightIdx] &lt; array[pivotIdx]:<br>            (array[leftIdx], array[rightIdx]) = (array[rightIdx], array[leftIdx])<br>        <span class="hljs-keyword">if</span> array[leftIdx] &lt;= array[pivotIdx]:<br>            leftIdx += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> array[leftIdx] &gt;= array[pivotIdx]:<br>            rightIdx -= <span class="hljs-number">1</span><br>    (array[pivotIdx], array[rightIdx]) = (array[rightIdx], array[pivotIdx])<br></code></pre></td></tr></table></figure><h3 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">Given <span class="hljs-string">[3, 2, 1, 4, 5]</span>, return <span class="hljs-string">[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="Binary-Search-mostly-already-sorted"><a href="#Binary-Search-mostly-already-sorted" class="headerlink" title="Binary Search (mostly already sorted)"></a>Binary Search (mostly already sorted)</h3><p>Binary search is mostly used for search one target value from a sorted array. Binary search used some “decrease and conquer” algorithmic paradigm, which is not include “divide and conquer” algorithm.</p><p><strong>The difference between the “permutation” and “combination” is that, for the processed data the combination is</strong> <strong>without any order</strong>!!!</p><p>Eg. from 5 numbers we just choose 3, unordered, then we call it combination:</p><p>Like  (1, 2, 3) and (2, 1, 3) and (3, 1, 2) they are just the same.</p><p>The idea of the binary search is to keep the half of the “useful” data, and throw the “useless” part.</p><p><strong>Template:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">start</span> <span class="hljs-operator">+</span> (<span class="hljs-keyword">end</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">start</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span><br>A[mid] <span class="hljs-operator">=</span><span class="hljs-operator">=</span>, <span class="hljs-operator">&lt;</span>, <span class="hljs-operator">&gt;</span><br>A[<span class="hljs-keyword">start</span>] A[<span class="hljs-keyword">end</span>] ? target<br></code></pre></td></tr></table></figure><h4 id="Classic-Binary-Search-Problem-https-www-lintcode-com-problem-457"><a href="#Classic-Binary-Search-Problem-https-www-lintcode-com-problem-457" class="headerlink" title="Classic Binary Search Problem: https://www.lintcode.com/problem/457/"></a>Classic Binary Search Problem: <a href="https://www.lintcode.com/problem/457/">https://www.lintcode.com/problem/457/</a></h4><p>Find any position of a target number in a sorted array. Return <code>-1</code> if target does not exist.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>], target = <span class="hljs-number">2</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">binarySearch</span>(<span class="hljs-params">nums, target</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <br>    start, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>    <br><span class="hljs-comment"># this is the recommendation type, we can write start &lt; end, we strongly suggest this type, because it is suitable for all!!!</span><br>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:<br><span class="hljs-comment"># caculate the mid point, the single &quot;/&quot; means just divide which has the float part, but &quot;//&quot; means we can only keep the integer part.</span><br>        mid = (start + end)//<span class="hljs-number">2</span><br>        <span class="hljs-comment"># We need to choose these situation case by case.</span><br>        <span class="hljs-keyword">if</span> nums[mid] &lt; target:<br>            start = mid<br>        <span class="hljs-keyword">elif</span> nums[mid] == target:<br>            end = mid<br>        <span class="hljs-keyword">else</span>:<br>            end = mid<br>    <span class="hljs-keyword">if</span> nums[start] == target:<br>        <span class="hljs-keyword">return</span> start<br>    <span class="hljs-keyword">if</span> nums[end] == target:<br>        <span class="hljs-keyword">return</span> end<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h1><p>Find the sum of from the 1~100</p><p>BFS (Broad First Search) focuses on the width of the search.<br>DFS (Deep First Search) focuses on the depth of the search.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br><span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>After we use the recursion, f(1) &#x3D; 1, f(n) &#x3D; f(n-1) + n</p><p>1: f(1) &#x3D; 1<br>2: f(2) &#x3D; f(1) + 1</p><p>If we want to prove f(n), we need firstly prove f(1) is valid, and the next step is just to make a hypothesis that the f(n-1) is also valid. So from f(n-1) we can prove the f(n) is valid.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recursive_sum</span>(<span class="hljs-params">n</span>):<br><br><span class="hljs-comment"># S1. this is to prove that f(1) = 1</span><br><span class="hljs-keyword">if</span> n== <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># S2. this is to prove that the f(n-1) is also valid, write the code like f(n) = f(n-1) + n</span><br><span class="hljs-keyword">return</span> recursive_sum(n-<span class="hljs-number">1</span>) + n<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span> n = <span class="hljs-number">5</span>:<br><span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">4</span>) + <span class="hljs-number">5</span><br> <span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">3</span>) + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br> <span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">2</span>) + <span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br> <span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> + <span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br> <span class="hljs-attribute">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Letter Combinations of a Phone Number:<a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">https://leetcode.com/problems/letter-combinations-of-a-phone-number/</a></p><h4 id="Easy-way-to-understand"><a href="#Easy-way-to-understand" class="headerlink" title="Easy way to understand:"></a>Easy way to understand:</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">Example <span class="hljs-number">1</span>:<br><br><span class="hljs-symbol">Input:</span> digits = <span class="hljs-string">&quot;23&quot;</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;ad&quot;</span>,<span class="hljs-string">&quot;ae&quot;</span>,<span class="hljs-string">&quot;af&quot;</span>,<span class="hljs-string">&quot;bd&quot;</span>,<span class="hljs-string">&quot;be&quot;</span>,<span class="hljs-string">&quot;bf&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;ce&quot;</span>,<span class="hljs-string">&quot;cf&quot;</span>]<br>Example <span class="hljs-number">2</span>:<br><br><span class="hljs-symbol">Input:</span> digits = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">Output:</span> []<br>Example <span class="hljs-number">3</span>:<br><br><span class="hljs-symbol">Input:</span> digits = <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">KEYBOARD = &#123;<br>        <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>        <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;def&quot;</span>,<br>        <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-string">&quot;ghi&quot;</span>,<br>        <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-string">&quot;jkl&quot;</span>,<br>        <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-string">&quot;mno&quot;</span>,<br>        <span class="hljs-string">&quot;7&quot;</span>: <span class="hljs-string">&quot;pqrs&quot;</span>,<br>        <span class="hljs-string">&quot;8&quot;</span>: <span class="hljs-string">&quot;tuv&quot;</span>,<br>        <span class="hljs-string">&quot;9&quot;</span>: <span class="hljs-string">&quot;wxyz&quot;</span>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(digits) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> []<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(digits) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(KEYBOARD[digits[<span class="hljs-number">0</span>]])<br>        <span class="hljs-keyword">else</span>:<br>            previous_list = self.letterCombinations(digits[:-<span class="hljs-number">1</span>])<br>            last_list = <span class="hljs-built_in">list</span>(KEYBOARD[digits[-<span class="hljs-number">1</span>]])<br>            res = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> last_list:<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> previous_list:<br>                    res.append(j+i)<br>            <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># when we do the recursion, the first step is to build a variable, here we defined a dict, which shows the mapping structure. We do not use the &quot;0&quot; and &quot;1&quot;. Actually in python, the dict can be thought as the hashmap.</span><br>KEYBOARD = &#123; <br>        <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>        <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;def&quot;</span>,<br>        <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-string">&quot;ghi&quot;</span>,<br>        <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-string">&quot;jkl&quot;</span>,<br>        <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-string">&quot;mno&quot;</span>,<br>        <span class="hljs-string">&quot;7&quot;</span>: <span class="hljs-string">&quot;pqrs&quot;</span>,<br>        <span class="hljs-string">&quot;8&quot;</span>: <span class="hljs-string">&quot;tuv&quot;</span>,<br>        <span class="hljs-string">&quot;9&quot;</span>: <span class="hljs-string">&quot;wxyz&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(digits) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> []<br>    combinations = []<br>    <span class="hljs-comment"># digits just the input string</span><br>    <span class="hljs-comment"># 0 is the the index which is the starting point:0, </span><br>    <span class="hljs-comment"># [] is the path that if nothing in there so it is an empty list. Since here we did not read through, so it is empty.</span><br>    <span class="hljs-comment"># combinations are the answer, if there is an anwer, we just put it in there.</span><br>    self.dfs(digits, <span class="hljs-number">0</span>, [], combinations)<br>    <span class="hljs-keyword">return</span> combinations<br><br><br><span class="hljs-comment"># dfs is the core of this program.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self, digits, index, combination, combinations</span>):<br>    <span class="hljs-comment"># the index here means which element we will do the process</span><br>    <span class="hljs-comment"># combination means the characters it contains in the current path</span><br>    <span class="hljs-comment"># combinations is the final result</span><br>    <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(digits):<br>        combination.append(<span class="hljs-string">&#x27;&#x27;</span>.join(combination))<br>        <span class="hljs-keyword">return</span> <br>    <br>    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> KEYBOARD[digits[index]]:<br>        combination.append(letter)<br>        self.dfs(digits, index + <span class="hljs-number">1</span>, combination, combinations)<br>        combination.pop()<br>               <br>        <br>            <br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">combinationsHere are just <span class="hljs-selector-tag">a</span> example of how the dfs works:<br><br>def <span class="hljs-built_in">dfs</span>(self, <span class="hljs-string">&quot;23&quot;</span>, <span class="hljs-number">0</span>, combination, combinations):<br>for letter in <span class="hljs-built_in">KEYBOARD</span>([<span class="hljs-string">&quot;23&quot;</span>][<span class="hljs-number">0</span>]):<br>=: <br>for letter in <span class="hljs-built_in">KEYBOARD</span>([<span class="hljs-string">&quot;2&quot;</span>]):<br>=:<br>for letter in <span class="hljs-string">&quot;abc&quot;</span>:<br>combination.<span class="hljs-built_in">append</span>(letter)<br>NOW we got: combination = [a, b, c]<br>self.<span class="hljs-built_in">dfs</span>(<span class="hljs-string">&quot;23&quot;</span>, <span class="hljs-number">1</span>, [a, b, c], combinations)<br><br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/1212983/python-dfs-easy-to-understand-solution">https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/1212983/python-dfs-easy-to-understand-solution</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type digits: str</span><br><span class="hljs-string">        :rtype: List[str]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>       <br>        combinations = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> digits:<br>            <span class="hljs-keyword">return</span> combinations <br>        <br>        self.dfs(digits, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>,combinations)<br>        <span class="hljs-keyword">return</span> combinations <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self, digits, index, combination, combinations</span>):<br>        keyboard = [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;ghi&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>,<span class="hljs-string">&quot;mno&quot;</span>,<span class="hljs-string">&quot;pqrs&quot;</span>,<span class="hljs-string">&quot;tuv&quot;</span>,<span class="hljs-string">&quot;wxyz&quot;</span>]<br>        <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(digits):<br>            combinations.append(combination)<br>            <span class="hljs-keyword">return</span>;<br>            <br>        digit = <span class="hljs-built_in">int</span>(digits[index])<br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(keyboard[digit])):<br>            self.dfs(digits, index+<span class="hljs-number">1</span>, combination+ keyboard[digit][i],combinations)<br></code></pre></td></tr></table></figure><h1 id="strStr"><a href="#strStr" class="headerlink" title="strStr:"></a>strStr:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">source = <span class="hljs-string">&quot;abcdefg&quot;</span><br>target = <span class="hljs-string">&quot;abc&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">source, target</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(source)):<br><span class="hljs-keyword">if</span> source[i: i + <span class="hljs-built_in">len</span>(target)] == target:<br><span class="hljs-keyword">return</span> i<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(strStr(source, target))<br></code></pre></td></tr></table></figure><p>Much better solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">source = <span class="hljs-string">&quot;abcdefg&quot;</span><br>target = <span class="hljs-string">&quot;abc&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">source, target</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(source)):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(target)):<br><span class="hljs-keyword">if</span> source[i+j] != target[j]:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> i<br></code></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h1><ol><li><p>No many loops, no more than 3 levels:</p></li><li><p>Always ask if there is the code review part</p></li><li><p>Improvements:</p></li></ol><p>**A good readable code is the most important part of the coding part, since nobody want to maintain an unreadable code there! **</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">if (grid[i][j]) == <span class="hljs-number">1</span>) &#123;<br>...<br>&#125; else if (grid[i][j] == <span class="hljs-number">2</span>)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>Needs to explain what is Magic number: 1 &amp; 2! There is a good way to write it shows the industrial experience:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs prolog">class <span class="hljs-symbol">GridType</span>:<br><span class="hljs-symbol">WALL</span> = <span class="hljs-number">1</span><br><span class="hljs-symbol">PEOPLE</span> = <span class="hljs-number">2</span><br><br><br>if (grid[i][j]) == <span class="hljs-symbol">GridType</span>.<span class="hljs-symbol">WALL</span>) &#123;<br>...<br>&#125; else if (grid[i][j] == <span class="hljs-symbol">GridType</span>.<span class="hljs-symbol">PEOPLE</span>)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>The problem of the Index</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">list</span>[i]<br>Since there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> limitation of the i:<br>We alreadys need <span class="hljs-keyword">to</span> care about the <span class="hljs-built_in">range</span> of i<br></code></pre></td></tr></table></figure><ol start="5"><li><p>Always decouple the codes and decrease the readability difficulty, system is much important than details. So if we use smaller modules rather than big chunks of code, that is very important. If there is an error, so it will only affect that single module instead of others.</p></li><li><p>Good naming functions:</p></li></ol><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">find_name_by_</span></span>...<br></code></pre></td></tr></table></figure><ol start="7"><li><p>Good codes do not need comments, but you can read easily from the name of the function, logic of the functions… Trash codes need comments…</p></li><li><p>Judge ways:</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">Logicality<br><br><span class="hljs-selector-tag">Code</span> Quality<br></code></pre></td></tr></table></figure><ol start="9"><li><p>Always code before ask the requirements, when totally understood, just stop chatting and write codes. Do not need to ask a lot when do the codings there. In order to save time.</p></li><li><p>If the question you already met, then you should tell the people, so he can change the question.</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kaldi for Dummies</title>
    <link href="/2022/07/11/Kaldi-for-Dummies/"/>
    <url>/2022/07/11/Kaldi-for-Dummies/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>Any ASR system can be just divided into three parts: </p><ol><li>Acoustic Model</li><li>Language Model</li><li>Decoder</li></ol><p>Kaldi has a lot of examples in its projects.There are two necessary raw materials for us to train the model:</p><ol><li><strong>.wav file</strong></li><li><strong>labelled .txt</strong></li></ol><p>We need four necessary elements in Kaldi! We call it <strong>“HCLG.fst”</strong>, we can make speech recognition from these core file. Acutally, just like we are building a map, and we just decode all the paths from there in order to get the prediction results. The underneath idea just like from the typology from the mathematics.<br>We are using <code>Viterbi</code> algorithm to decoding our <code>HCLG.fst</code>. The exact name should be token passing method, which is a kind of variant algorithm of <code>Viterbi</code>.</p><p><img src="/../images/directorystructure2.png" alt="This Pic is from: https://www.eleanorchodroff.com/tutorial/kaldi/training-acoustic-models.html#prepare-directories"></p><p>​</p><h2 id="1-1-Audio-Corpus"><a href="#1-1-Audio-Corpus" class="headerlink" title="1.1 Audio Corpus"></a>1.1 Audio Corpus</h2><p>In kaldi, 1 frame is 10ms. For some front work, it always like 24ms for one frame. For a workable dataset, we at least need 2000 hrs data. </p><h3 id="1-2-1-About-UTF-8"><a href="#1-2-1-About-UTF-8" class="headerlink" title="1.2.1 About UTF-8"></a>1.2.1 About UTF-8</h3><p>Before we really get into the world of Kaldi, we need to know the character decoding and encoding standard. So we need to know the basics of the UTF-8 &amp; Ascii. </p><p>As we knew there can be various languages in this world other than English, we need to make it more accesible to encode and then transmit. Different countries can have different kinds of encoding and decoding standards, this can be a big burden of the communication.Thus, people created the UTF-8 to unify the standards in all of the world, so different countries do need to worry about the discontinuity of the language communication.</p><p>We can just run this before head into the shell, so we can manipulate the Chinese or any other languages’ characters in Python in linux system.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> PYTHONIOENCODING=utf-8<br></code></pre></td></tr></table></figure><p>In UNIX, we can firstly check the file’s encoding format by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">file ../..txt<br></code></pre></td></tr></table></figure><p>If it is UTF-16 Little Endian or other formats, we can just convert it into UTF-8 by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">iconv -l UTF-16LE -t UTF-8 ../.../...<br></code></pre></td></tr></table></figure><p>Eg. there has a <strong>dir</strong> with many .txt files in UTF16 which in <em>local&#x2F;data</em>:</p><p>Here are the standard manipulation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># firstly, we make a new dir and make sure put in all the manipulated data in this dir</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">local</span>/audio_data_utf8<br><br><span class="hljs-comment"># then we do a loop to put all the data in local/data to local/audio_data_utf8</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span>/data/*;<br><span class="hljs-keyword">do</span> <br>&gt; y=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$x</span> | sed <span class="hljs-string">&#x27;s|data|audio_data_utf8|&#x27;</span>`;<br><span class="hljs-comment"># &gt; echo $y      just preview the output</span><br><span class="hljs-comment"># &gt; done </span><br><span class="hljs-comment"># transform all &quot;x&quot; utf16 files into utf8</span><br>iconv -f UTF-16LE -t UTF-8 <span class="hljs-variable">$x</span> &gt; <span class="hljs-variable">$y</span>;<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>other notes</strong></p><p>The liux and windows files are not totally exchangeable, especially when we operate the .txt files on those two different kinds of machines.</p><p>especially we can see some codes shows the dissimilarities like: <feff>.</p><p>we can use dos2unix tool to do the convertion:<br>After we did wget install dos2unix, then we can just do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">dos2unix the_file_I_want_do_conversion.txt<br></code></pre></td></tr></table></figure><h3 id="1-2-2-Text-washing-prepare-the-data"><a href="#1-2-2-Text-washing-prepare-the-data" class="headerlink" title="1.2.2 Text washing(prepare the data)"></a>1.2.2 Text washing(prepare the data)</h3><p>But before we launch the test, we need to firstly do the text washing.</p><p>We need to prpare the data and do the data cleaning from the data_path directory<br>def pre_data(data_path):</p><h4 id="1-2-2-1-Regular-Expression-this-is-always-the-first-step"><a href="#1-2-2-1-Regular-Expression-this-is-always-the-first-step" class="headerlink" title="1.2.2.1 Regular Expression, this is always the first step"></a>1.2.2.1 Regular Expression, this is always the first step</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">This is core processing function, we mostly use Regular Expression here.</span><br><span class="hljs-string">Here is just a sample code, that we need to deal with: abrabic numbers, if its number, then there is no need to do segment, just replace it with space one by one. </span><br><span class="hljs-string"></span><br><span class="hljs-string">input：&quot;一二三五六&quot;</span><br><span class="hljs-string">output：&quot;一 二 三 五 六&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_data</span>():<br><span class="hljs-comment"># Delete &quot;()&quot;</span><br><span class="hljs-comment"># detect Chinese characters(\u4e00-\u9fa5) from a-z, A-Z, 0-9, &quot;.&quot;. It will catch the sentences with those elements.</span><br>a = re.findall(<span class="hljs-string">&#x27;[\u4e00-\u9fa5a-zA-Z0-9 .]+&#x27;</span>, data, re.S)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(a)<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># save the results into a new &quot;solve_data&quot; path</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_data</span>(<span class="hljs-params">data_path+<span class="hljs-string">&quot;solve_data&quot;</span></span>):<br>data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=utf-<span class="hljs-number">8</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:<br>file.writelines(<span class="hljs-built_in">str</span>(line)+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>After we get our target, we need to set the processing functions.</p><h4 id="1-1-1-2-Replace-numbers-into-words"><a href="#1-1-1-2-Replace-numbers-into-words" class="headerlink" title="1.1.1.2 Replace numbers into words"></a>1.1.1.2 Replace numbers into words</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_num</span>(<span class="hljs-params">data</span>)<br>data.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;zero&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>)<br><span class="hljs-comment"># .......</span><br></code></pre></td></tr></table></figure><h4 id="1-1-1-3-Segment"><a href="#1-1-1-3-Segment" class="headerlink" title="1.1.1.3 Segment"></a>1.1.1.3 Segment</h4><p>We need to enterpret the text file to phones, the tools we need is lexicon, which is just like the dictionary. So in this way, we need to segement the words, and according to our prior knowledge from our dictionary, so we can invert the segmented words into the phones. This step is typically used for the language like Chinese, since for Chinese, the word’s stop is not just like we put a space there, but we need to segment it manually. For Chinese, we mostly use Jieba to segement the sentences into words. </p><p>Here are the preview of the results should be:<br>input：”今天是一个好日子”<br>output：”今天 是 一个 好 日子”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> jieba<br><br><span class="hljs-comment"># Claim the function for segmenting</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">segment_item</span>(<span class="hljs-params">data</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># After we set this function we can combine into the previous saving files.</span><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br><span class="hljs-comment"># we firstly do the segment and then save it one by one</span><br>segmet_list = segement_item(item[<span class="hljs-number">1</span>])<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + segmet_list + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br></code></pre></td></tr></table></figure><h4 id="1-1-1-4-Combine-into-a-whole-processing-structure"><a href="#1-1-1-4-Combine-into-a-whole-processing-structure" class="headerlink" title="1.1.1.4 Combine into a whole processing structure"></a>1.1.1.4 Combine into a whole processing structure</h4><p>Now after we did the regular expression and jieba. We just combine them together. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jieba_cut_data</span>(<span class="hljs-params">data</span>):<br><br>data = replace_num(data)<br><span class="hljs-comment"># this is just for the normal case, we just need to cut the sentences</span><br><span class="hljs-comment"># cut the words with &quot; &quot; one space, and replace the &quot;  &quot;(two spaces) into only one space.</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>)<br><br><br><span class="hljs-comment"># these are the needs for unusual cases, which we dealt before in the RE section, we already found out the words with those elements we want to handle with. Now, it is time for us to deal with them. If there is all numbers, so we just do not split the words, like &quot;一二三四五&quot;.</span><br>is_cut =  <span class="hljs-literal">True</span><br><br><br><br><span class="hljs-comment"># here if the scenario is TRUE, which means there is a element in there, if all are numbers it will become [True, True, True, True, True, ... True, True], in that case, it will be &quot;is_cut&quot; ture. Not in, is not return anymore.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  这是 学习 笔记</span><br><span class="hljs-string">output: [], which is an empty list</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  这是一本学习笔记本卖两块</span><br><span class="hljs-string">output: [  Ture,         True], sum this list we got 2, but not equals to the previous list length, so we do not process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [Ture, Ture, Ture, Ture, True], sum this list we got 5, equals to the previous list length, so we process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>（[<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data <span class="hljs-keyword">if</span> item <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;零&quot;</span>], [<span class="hljs-string">&quot;壹&quot;</span>], [<span class="hljs-string">&quot;二&quot;</span>], [<span class="hljs-string">&quot;三&quot;</span>], [<span class="hljs-string">&quot;四&quot;</span>]， [<span class="hljs-string">&quot;五&quot;</span>]]）== !<span class="hljs-built_in">len</span>(data):<br>is_cut = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># here if the scenario is TRUE, not all the context are numbers. we just follow the normal way, cut it with jieba, and replace the two spaces into one space.</span><br><span class="hljs-keyword">if</span> is_cut:<br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br><span class="hljs-keyword">else</span>：<br><span class="hljs-comment"># we process those context with full numbers.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [一 二 三 四 五]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(data)<br><span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;).strip()), preview the results to delete the &#x27;\n&#x27; together with the space.</span><br><span class="hljs-comment"># just append the data that once processed.</span><br><span class="hljs-comment"># bef_data here is the before data</span><br>bef_data = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># cut the sentences into words</span><br>bef_data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(bef_data))<br><span class="hljs-comment"># here we input the bef_data, after processed in solve_data() function to get the processed data</span><br>data.append(solve_data(bef_data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># this is a magic function</span><br><span class="hljs-keyword">if</span> _name_== <span class="hljs-string">&#x27;_main_&#x27;</span>:<br>data_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>pre_data(data_path)<br><br></code></pre></td></tr></table></figure><h2 id="1-2-Basic-preparation"><a href="#1-2-Basic-preparation" class="headerlink" title="1.2 Basic preparation"></a>1.2 Basic preparation</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">├── data<br>│   ├── train<br>│   │   ├── wav<span class="hljs-number">.</span>scp<br>│   │   ├── text<br>│   │   ├── utt2spk<br>│   │   ├── spk2utt<br>│   ├── <span class="hljs-keyword">test</span><br>|── dict<br>│   ├── lexicon<span class="hljs-number">.</span>txt<br>│   ├── extra_questions<span class="hljs-number">.</span>txt<br>│   ├── nosilence_phones<span class="hljs-number">.</span>txt<br>│   ├── silence_phones<span class="hljs-number">.</span>txt<br>|── lang<br>│   ├── L<span class="hljs-number">.</span><span class="hljs-keyword">fst</span>/L_disambig<span class="hljs-number">.</span><span class="hljs-keyword">fst</span><br>│   ├── oov<span class="hljs-number">.</span><span class="hljs-keyword">int</span>/oov<span class="hljs-number">.</span>txt<br>│   ├── phones<span class="hljs-number">.</span>txt<br>│   ├── topo<br>│   ├── words<span class="hljs-number">.</span>txt<br>│   ├── phone<br><br></code></pre></td></tr></table></figure><p>This can be how we prepare those files.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 1 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">local</span>/thchs-30_data_prep.sh <span class="hljs-variable">$thchs</span>/data_thchs30<br>  <span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$thchs</span>/data_thchs30 data_thchs30<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: language preparation ######&#x27;</span><br>  <span class="hljs-comment"># prepare lexicon.txt, extra_questions.txt, nonsilence_phones.txt, optional_silence.txt, silence_phones.txt</span><br>  <span class="hljs-comment"># build a large lexicon that invovles words in both the training and decoding, all in data/dict</span><br>  <span class="hljs-built_in">mkdir</span> -p data/dict;<br>  <span class="hljs-built_in">cp</span> <span class="hljs-variable">$thchs</span>/resource/dict/&#123;extra_questions.txt,nonsilence_phones.txt,optional_silence.txt,silence_phones.txt&#125; data/dict &amp;&amp; \<br>  <span class="hljs-built_in">cat</span> <span class="hljs-variable">$thchs</span>/resource/dict/lexicon.txt <span class="hljs-variable">$thchs</span>/data_thchs30/lm_word/lexicon.txt | \<br>  grep -v <span class="hljs-string">&#x27;&lt;s&gt;&#x27;</span> | grep -v <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span> | <span class="hljs-built_in">sort</span> -u &gt; data/dict/lexicon.txt<br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: language processing ######&#x27;</span><br>  <span class="hljs-comment"># generate language stuff used for training</span><br>  <span class="hljs-comment"># also lexicon to L_disambig.fst for graph making in local/thchs-30_decode.sh</span><br>  <span class="hljs-built_in">mkdir</span> -p data/lang;<br>  utils/prepare_lang.sh --position_dependent_phones <span class="hljs-literal">false</span> data/dict <span class="hljs-string">&quot;&lt;SPOKEN_NOISE&gt;&quot;</span> data/local/lang data/lang<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="1-2-1-Step-1-Prepare-Train-Files"><a href="#1-2-1-Step-1-Prepare-Train-Files" class="headerlink" title="1.2.1 Step 1. Prepare $Train Files"></a>1.2.1 Step 1. Prepare $Train Files</h3><p>For building those four elements, we need 4 files: <strong>1. wav.scp, 2. text, 3. utt2spk, 4. spk2utt.</strong></p><p><img src="/../images/image-20220817041457234.png" alt="image-20220817041457234"></p><h4 id="wav-scp"><a href="#wav-scp" class="headerlink" title="wav.scp"></a>wav.scp</h4><p>Here is the format of those 4 files:</p><ol><li><strong>wav.scp: [audio id] –&gt; [file directory path name]</strong></li></ol><p>Here are the <code>python</code> way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#The location of the audio directory</span><br>target_dir = <span class="hljs-string">&#x27;./../../&#x27;</span><br>save_path = <span class="hljs-string">&#x27;./../../&#x27;</span><br><br><span class="hljs-comment"># Loop all the audio resources</span><br>wav_scp = []<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># Append all the .wav file into the list</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><span class="hljs-comment"># Here we use &quot;.&quot; to split the file_name and use join to combine our directory address. We also can use &quot;os.path.join(target_dir + filename)&quot;. </span><br>wav_scp.append([file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], os.path.join(target_dir, filename)])<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># we can check the output by print(wav_scp)</span><br><span class="hljs-comment"># Save wav_scp</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(save_path, wav.scp), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># Loop all the items in wav.scp and save them one by one</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> wav.scp: <br>file.writelines(item[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot; &quot;</span>+item[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\n&quot;</span>)   <br><span class="hljs-comment">#Our output format should be:  filename target_dir filename</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>The last step can be sorting the file name by vim:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Unix">:sort<br></code></pre></td></tr></table></figure><p>The <em>UNIX</em> way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># find all the wav_files name and their dir</span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> <br><span class="hljs-comment"># use find we can list all the .wav files&#x27; name, the &quot;i&quot; in &quot;-iname&quot; means not caring the upper or lower case of the characters.</span><br><br><span class="hljs-comment">#we can check it by printing the first line </span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> | <span class="hljs-built_in">head</span> -n 1<br><br><span class="hljs-comment"># then we can save the .wav file list into a temp place</span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> &gt; wav.scp.temp<br><br><span class="hljs-comment"># now we already got all the uttpath, but we still need the uttid</span><br><br><span class="hljs-built_in">cat</span> wav.scp.temp | awk - F <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;printf(&quot;%s_%s\n&quot;, $(NF-1), $NF)&#125; &#x27;</span>|sed <span class="hljs-string">&#x27;s|.wav||&#x27;</span> &gt; wav_id<br><span class="hljs-comment"># here we are using sed to remove all the &quot;.wav&quot; strings into &quot; &quot; || means &quot;&quot;, which is empty space</span><br><br><span class="hljs-comment"># we only need to combine the wav.scp.temp and wav_id, since there are all in great orders, so we can just do:</span><br><span class="hljs-comment"># preview the data: paste -d&#x27; &#x27; wav_id wav.scp.temp | head -n 1</span><br><span class="hljs-built_in">paste</span> -d<span class="hljs-string">&#x27; &#x27;</span> wav_id wav.scp.temp &gt; wav.scp<br><span class="hljs-comment"># now we can get all the wav.scp</span><br><br><br><br><br></code></pre></td></tr></table></figure><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a><strong>Text</strong></h4><ol start="2"><li><strong>text:    audio id –&gt; labelled file</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">From AUDIOSPK1001.txt get ID and &quot;I Love Kaldi&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 I Love Kaldi</span><br><span class="hljs-string">AUDIOSPK1002 Me too</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>target_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><span class="hljs-comment"># This is the stored text file</span><br><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>text = []<br><br><br><span class="hljs-comment"># loop all the text file name in directory</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># only operate the file that ends with &quot;.txt&quot;</span><br><span class="hljs-keyword">if</span> filename[-<span class="hljs-number">4</span>:] != <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><br><span class="hljs-comment"># read the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_dir, filename), <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># read line by line </span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># Delete all &quot;\n&quot; and the the space</span><br>line = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;)), we can print the text files all in one screen without the \n symbols.</span><br><br><span class="hljs-comment"># Get the filename with its contents</span><br>text.append([filename.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], line])<br><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + item[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p>At the same time, here are the <em><strong>UNIX</strong></em> way:</p><p>we need to get the format like <code>SPK_ID WAV_PATH</code></p><p><strong>#AUDIOSPK1001 I Love Kaldi</strong><br><strong>#AUDIOSPK1002 Me too</strong></p><p>Here we just create a .sh file called <em>generate_text_id.sh</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-meta">#! /bin/bash</span><br>spk_id = <span class="hljs-variable">$1</span>  <span class="hljs-comment">#$1 is your first variable</span><br><br><span class="hljs-built_in">exit</span> 0;<br><br></code></pre></td></tr></table></figure><p>Then we need to make it into a runable file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">chmod</span> +x generate_text_id.sh <br></code></pre></td></tr></table></figure><p>And then we can run it again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">./generate_text_id.sh SPK.txt<br><span class="hljs-comment"># it will just print itself</span><br>SPK.txt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br>spk_id = <span class="hljs-variable">$1</span>  <span class="hljs-comment">#$1 is your first variable</span><br><br><span class="hljs-comment"># echo spk_id, this will just print the first column</span><br>awk &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>, <span class="hljs-variable">$spk_id</span>, <span class="hljs-variable">$1</span>)&#125;<span class="hljs-string">&#x27; $spk_id</span><br><span class="hljs-string"></span><br><span class="hljs-string">exit 0;</span><br></code></pre></td></tr></table></figure><h4 id="utt2spk-audio-id-–-gt-SPK-id"><a href="#utt2spk-audio-id-–-gt-SPK-id" class="headerlink" title="utt2spk: audio id –&gt; SPK id"></a><strong>utt2spk: audio id –&gt; SPK id</strong></h4><h4 id="spk2utt-SPK-–-gt-audio-id"><a href="#spk2utt-SPK-–-gt-audio-id" class="headerlink" title="spk2utt: SPK      –&gt; audio id"></a><strong>spk2utt: SPK      –&gt; audio id</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># The path of the audio resources</span><br>path_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><span class="hljs-comment"># The final output path</span><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><br><span class="hljs-comment"># Save the final results</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data, file_name</span>):<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_file, file_name), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br><span class="hljs-comment"># save the item line in line</span><br>file.writelines(item)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 SPK1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_utt2spk</span>():<br><span class="hljs-comment"># For saving the final results</span><br>utt2spk = [] <br><span class="hljs-comment"># loop all the directories</span><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># if the file itself is .wav file, we operate, others dismiss</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><br><br><span class="hljs-comment"># Audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><span class="hljs-comment"># Print(utt+ &quot; &quot; + spk + &quot;\n&quot;)</span><br><span class="hljs-comment"># Add into utt2spk</span><br>utt2spk.append(utt + <span class="hljs-string">&quot; &quot;</span> + spk + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the data</span><br>save_data(utt2spk, <span class="hljs-string">&quot;utt2spk&quot;</span>)<br><br><br><br><span class="hljs-comment"># set the function to get spk2utt</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">SPK1 AUDIOSPK1001 AUDIOSPK1002</span><br><span class="hljs-string">SPK2 AUDIOSPK2001 AUDIOSPK2001</span><br><span class="hljs-string">......</span><br><span class="hljs-string">dict&#123;</span><br><span class="hljs-string">&quot;SPK1&quot; : [AUDIOSPK1001, AUDIOSPK1002],</span><br><span class="hljs-string">&quot;SPK2&quot; : [AUDIOSPK2001, AUDIOSPK2002],</span><br><span class="hljs-string">......</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_spk2utt</span>():<br>spk2utt = &#123;&#125;<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># Delete a file</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-comment"># audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><br><span class="hljs-comment"># If there has a SPK here, we just append</span><br><span class="hljs-keyword">if</span> spk <span class="hljs-keyword">in</span> spk2utt:<br>spk2utt[spk].append(utt)<br><span class="hljs-comment"># If there not have a SPK here, we just preset it as a list. </span><br><span class="hljs-keyword">else</span>:<br>spk2utt[spk] = []<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># using print(spk2utt) to check</span><br><br><span class="hljs-comment"># final output list from the dict</span><br>write_spk2utt = []<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> spk2utt.keys():<br>write_spk2utt.append(<span class="hljs-built_in">str</span>(key)+<span class="hljs-string">&quot; &quot;</span>.join(spk2utt(key))+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">list = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br><span class="hljs-string">print(&quot; &quot;.join(list))</span><br><span class="hljs-string">------------------------------------------------------</span><br><span class="hljs-string">A B C D</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the output</span><br>save_data(write_spk2utt, <span class="hljs-string">&quot;spk2utt&quot;</span>)<br><span class="hljs-keyword">pass</span><br><br><br><br>get_spk2utt()<br>get_utt2spk()<br></code></pre></td></tr></table></figure><p>The difference between the utt2spk and the spk2utt is that, for utt2spk, there is only one-to-one relations instead of like spk2utt, there are one-to-multiple relation. So, in most cases, we only need either 3 or 4, because if we already got one, another one is also can be derived.</p><h3 id="1-2-2-Step-2-Prepare-Dict-x2F-Dictionary"><a href="#1-2-2-Step-2-Prepare-Dict-x2F-Dictionary" class="headerlink" title="1.2.2 Step 2. Prepare $Dict&#x2F;Dictionary"></a>1.2.2 Step 2. Prepare $Dict&#x2F;Dictionary</h3><p>Dictionary this is the<code> dict</code> file we need to manipulate, in <code>dict</code> directory. The <code> dict</code>  folder can contain these files that we needed:</p><p><img src="/../images/image-20220817042227053.png" alt="image-20220817042227053"></p><figure class="highlight plaintext"><figcaption><span>includes:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs dict```"><br>#### lexicon.txt : word --&gt; phones<br><br>We need to get the ```lexicon.txt``` by running  ```get_lexicon.py```. <br><br>We need two kinds of dictionaries.<br>1st. the ```lexicon.txt``` from the corpus to better train a ```n-gram``` model, in some words, the language model.<br>2st. the word-to-phones, we also need a reference lists from there, we need acoustic model. In this case, so we need a &quot;BIG&quot; dictionary.<br><br><br>In this step, we need to transform the words into phones, so we can align the words and train them.<br><br>```python<br>&#x27;&#x27;&#x27;<br>This is the dictionary mostly for the acoustic training needs.<br>去年  q v4 n ian2<br>上去  sh ang4 q v4<br>上去  sh ang4 q v5<br><br>&#x27;&#x27;&#x27;<br>def get_lexicon(data_path):<br><br># set can reduce the duplications. The dictionary must be just a set. <br>lexicon = set()<br>with open(&quot;data_path&quot;, &quot;w&quot;, encoding = &quot;utf-8&quot;) as file:<br>for line in file.readlines():<br>#print(line.strip(&quot;\n&quot;).strip().split(&quot; &quot;)), remove the \n and cut with the identifier from the SPACE &quot; &quot;<br>[lexicon.add(item) for item in line.strip(&quot;\n&quot;).strip().split(&quot; &quot;)]<br>&#x27;&#x27;&#x27;<br>input:  这是一本学习笔记本卖两块<br>output: [这是，一本， 学习， 笔记本， 卖， 两块],<br>&#x27;&#x27;&#x27;<br><br><br>pass<br>pass<br>#print(lexicon)<br># save the lexicon<br>with open(&quot;../.../lexicon.txt&quot;, &quot;w&quot;, encoding = &quot;utf-8&quot;) as file:<br>for item in lexicon:<br>file.writelines(item + &quot;\n&quot;)<br># here are the estimated results.<br>&#x27;&#x27;&#x27;<br>去年 <br>上去  <br>上去  <br>一<br>笔记本<br>卖<br>&#x27;&#x27;&#x27;<br>pass<br>pass<br>pass<br><br>get_lexicon(&quot;./.../temp&quot;)<br><br></code></pre></td></tr></table></figure><h4 id="phone-txt-x2F-nonsilence-phones-txt-all-the-phones"><a href="#phone-txt-x2F-nonsilence-phones-txt-all-the-phones" class="headerlink" title="phone.txt&#x2F;nonsilence_phones.txt : all the phones"></a><strong>phone.txt&#x2F;nonsilence_phones.txt : all the phones</strong></h4><h4 id="silence-phones-txt-SIL"><a href="#silence-phones-txt-SIL" class="headerlink" title="silence_phones.txt : SIL"></a>silence_phones.txt : SIL</h4><h4 id="extra-questions-txt"><a href="#extra-questions-txt" class="headerlink" title="extra_questions.txt"></a>extra_questions.txt</h4><p><img src="/../images/image-20220817042905667.png" alt="image-20220817042905667"></p><p>The meaning of the <code>extra_questions.txt</code> is to distinguistise the same pronunication with difference tones. This is very important for some tonal languages like Mandarin or Thai…</p><p>Finally we can get the ID to words.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">ID    [word1, word2, word3, ..., wordn]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN01&#x27;, &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN02&#x27;, &#x27;Me, too&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">id2words</span>(<span class="hljs-params">data_path</span>):<br><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(data_path):<br><span class="hljs-keyword">if</span> fiel_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">...........</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-2-3-Step-3-Prepare-lang"><a href="#1-2-3-Step-3-Prepare-lang" class="headerlink" title="1.2.3 Step 3. Prepare $lang"></a>1.2.3 Step 3. Prepare $lang</h3><p>The <code>lang</code> file is generated from the <code>dict</code>. </p><h4 id="L-fst-x2F-L-disambig-fst"><a href="#L-fst-x2F-L-disambig-fst" class="headerlink" title="L.fst&#x2F;L_disambig.fst"></a>L.fst&#x2F;L_disambig.fst</h4><p>Here is the preview of the <code>L.fst</code>. </p><p><img src="/../images/image-20220817233820245.png" alt="image-20220817233820245"></p><p><img src="/../images/image-20220817233930142.png" alt="image-20220817233930142"></p><h4 id="oov-int-x2F-oov-txt"><a href="#oov-int-x2F-oov-txt" class="headerlink" title="oov.int&#x2F;oov.txt"></a>oov.int&#x2F;oov.txt</h4><p>OOv means out of vocabulary, it deals with the words that not in the recognition dictionary. </p><h4 id="phones-txt"><a href="#phones-txt" class="headerlink" title="phones.txt"></a>phones.txt</h4><p>Phone.txt gives every phone a number.</p><p><img src="/../images/image-20220817233550549.png" alt="image-20220817233550549"></p><h4 id="topo"><a href="#topo" class="headerlink" title="topo"></a>topo</h4><p>topo means a hidden markov network.</p><p><img src="/../images/image-20220817235807016.png" alt="image-20220817235807016"></p><p><img src="/../images/image-20220817235906320.png" alt="image-20220817235906320"></p><h4 id="words-txt"><a href="#words-txt" class="headerlink" title="words.txt"></a>words.txt</h4><figure class="highlight plaintext"><figcaption><span>will give each word a number.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs words.txt```"><br>![image-20220817233522660](../images/image-20220817233522660.png)<br><br><br><br>#### phone<br><br>```phone``` is a directory, it will help the decision tree to get the clusters. <br><br><br><br>## 1.4 Acoustic Feature Extractions<br><br>We can have the MFCC feature as well as the ```Fbank``` feature. MFCC is in ```13D```, and ```Fbank``` is ```40D```. <br><br>```sh<br>if [ $stage -le 2 ];then<br>  echo &#x27;###### Bookmark: feature extraction ######&#x27;<br>  # produce MFCC and Fbank features in data/&#123;mfcc,fbank&#125;/&#123;train,test&#125;<br>  rm -rf data/mfcc &amp;&amp; mkdir -p data/mfcc &amp;&amp; cp -r data/&#123;train,test&#125; data/mfcc<br>  rm -rf data/fbank &amp;&amp; mkdir -p data/fbank &amp;&amp; cp -r data/&#123;train,test&#125; data/fbank<br>  for x in train test; do<br>    # make mfcc and fbank<br>    steps/make_mfcc.sh --nj $n --cmd &quot;$train_cmd&quot; data/mfcc/$x<br>    steps/make_fbank.sh --nj $n --cmd &quot;$train_cmd&quot; data/fbank/$x<br>    # compute cmvn<br>    steps/compute_cmvn_stats.sh data/mfcc/$x<br>    steps/compute_cmvn_stats.sh data/fbank/$x<br>  done<br>fi<br></code></pre></td></tr></table></figure><img src="../images/image-20220818000139263.png" alt="image-20220818000139263" style="zoom:80%;" /><img src="../images/image-20220818000210497.png" alt="image-20220818000210497" style="zoom:80%;" /><h2 id="1-5-GMM-Trainning"><a href="#1-5-GMM-Trainning" class="headerlink" title="1.5 GMM Trainning"></a>1.5 GMM Trainning</h2><p>Here we will do the GMM-HMM traninings.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 3 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: GMM-HMM training ######&#x27;</span><br>  <span class="hljs-comment"># monophone</span><br>  <span class="hljs-comment"># we will train the monophone here.</span><br>  steps/train_mono.sh --boost-silence 1.25 --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/mono<br>  <span class="hljs-comment"># monophone ali</span><br>  <span class="hljs-comment"># we will align the monophone to train a GMM-HMM model once again</span><br>  steps/align_si.sh --boost-silence 1.25 --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/mono exp/mono_ali<br>  <br>  <span class="hljs-comment"># the 1.25 here is the default param for setting the silent phone.</span><br><br>  <span class="hljs-comment"># triphone</span><br>  <span class="hljs-comment"># we will train the monophone here</span><br>  steps/train_deltas.sh --boost-silence 1.25 --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 2000 10000 data/mfcc/train data/lang exp/mono_ali exp/tri1<br>  <span class="hljs-comment"># triphone_ali</span><br>  <span class="hljs-comment"># we will align the triphone to train a GMM-HMM model once again</span><br>  steps/align_si.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri1 exp/tri1_ali<br><br>  <span class="hljs-comment"># lda_mllt</span><br>  <span class="hljs-comment"># we will use the lda_mllt model to do the trainning</span><br>  steps/train_lda_mllt.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> --splice-opts <span class="hljs-string">&quot;--left-context=3 --right-context=3&quot;</span> 2500 15000 data/mfcc/train data/lang exp/tri1_ali exp/tri2b<br>  <span class="hljs-comment"># lda_mllt_ali</span><br>  <span class="hljs-comment"># realign and retrain</span><br>  steps/align_si.sh  --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> --use-graphs <span class="hljs-literal">true</span> data/mfcc/train data/lang exp/tri2b exp/tri2b_ali<br><br>  <span class="hljs-comment"># sat</span><br>  steps/train_sat.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 2500 15000 data/mfcc/train data/lang exp/tri2b_ali exp/tri3b<br>  <span class="hljs-comment"># sat_ali</span><br>  steps/align_fmllr.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri3b exp/tri3b_ali<br><br>  <span class="hljs-comment"># quick</span><br>  steps/train_quick.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 4200 40000 data/mfcc/train data/lang exp/tri3b_ali exp/tri4b<br>  <span class="hljs-comment"># quick_ali</span><br>  steps/align_fmllr.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri4b exp/tri4b_ali<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="1-6-Install-Kaldi"><a href="#1-6-Install-Kaldi" class="headerlink" title="1.6 Install Kaldi"></a>1.6 Install Kaldi</h2><p><a href="https://www.eleanorchodroff.com/tutorial/kaldi/installation.html">https://www.eleanorchodroff.com/tutorial/kaldi/installation.html</a></p><p><a href="https://www.assemblyai.com/blog/kaldi-speech-recognition-for-beginners-a-simple-tutorial/">https://www.assemblyai.com/blog/kaldi-speech-recognition-for-beginners-a-simple-tutorial/</a></p><h1 id="2-“The-Big-Four”"><a href="#2-“The-Big-Four”" class="headerlink" title="2. “The Big Four”"></a>2. “The Big Four”</h1><p><img src="/../images/image-20220817214614445.png" alt="image-20220817214614445"></p><p>From the last chapter we already knew <code>HCLG.fst</code> includes <code>H.fst</code>, <code>C.fst</code>, <code>L.fst</code>, <code>G.fs</code>. </p><p>Here are the flowchart: from <code>acoustic characteristics ---&gt; phones ---&gt; words ---&gt; sentences</code>.</p><figure class="highlight plaintext"><figcaption><span>enables us to input the acoustics characteritics and return the phone.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs H.fst```"><br><br><br><br><br>**L.fst enables us to input phones to word.**<br><br>How to get those four files can be the core idea of the kaldi ASR system. The ASR detection logic can be: ```acoustic features --&gt; H.fst --&gt; phones C.fst --&gt; L.fst + G.fst (linguistics) --&gt; words```.<br><br><br><br>​<br><br>## 2.1 H.fst <br><br>For H.fst, what we want is input the acoustic characteristics, output phones.<br><br>### 2.1.1 Make MFCC<br><br>After we run this script below, the Kaldi will automatically generate 7 files:<br><br>```Bash<br>steps/make_mfcc.sh --nj 1 --mfcc-config=/root/data/kaldi_file/<br></code></pre></td></tr></table></figure><ol><li>conf: default param</li><li>data: the MFCC output, just like feats.scp</li><li>feats.scp  </li><li>frame_shift</li><li>log：some log files generated</li><li>utt2dur</li><li>utt2num_frames</li></ol><h4 id="2-1-1-1-feats-scp"><a href="#2-1-1-1-feats-scp" class="headerlink" title="2.1.1.1 feats.scp"></a>2.1.1.1 feats.scp</h4><p>The format of it can be like:</p><p><em>AUDIO_FILE_ID    Location_Directory_of_the_MFCC_Generated_in_AWK</em></p><p>The significance of this file is to tell us where the MFCC will be stored. All the MFCC features will be stored at AWK formats. AWK is binary forms, because it will save the space. </p><p>This is the preview of 13th MFCC: </p><p>AUDIO_ID</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">54.32323</span> -<span class="hljs-number">12</span>.<span class="hljs-number">8887</span> -<span class="hljs-number">2.12212</span>  <span class="hljs-number">3</span>.<span class="hljs-number">2322</span> ... -<span class="hljs-number">2.323232</span>  #<span class="hljs-number">13</span>th features for each frame<br><br><span class="hljs-number">4.323323</span> -<span class="hljs-number">11</span>.<span class="hljs-number">5887</span> -<span class="hljs-number">3.12312</span>   <span class="hljs-number">8</span>.<span class="hljs-number">2422</span> ... -<span class="hljs-number">4.323239</span><br><br><span class="hljs-number">5.332324</span> -<span class="hljs-number">10</span>.<span class="hljs-number">8877</span> -<span class="hljs-number">6.442212</span>  <span class="hljs-number">3</span>.<span class="hljs-number">2322</span> ... -<span class="hljs-number">7.223132</span> ]<br></code></pre></td></tr></table></figure><h4 id="2-1-1-2-frame-shift"><a href="#2-1-1-2-frame-shift" class="headerlink" title="2.1.1.2 frame_shift"></a>2.1.1.2 frame_shift</h4><p>The frame shift is just a param told us the frame shift time, if it is 10ms, then it will print 0.01, since 10ms &#x3D; 0.01s.</p><h4 id="2-1-1-3-utt2dur"><a href="#2-1-1-3-utt2dur" class="headerlink" title="2.1.1.3 utt2dur"></a>2.1.1.3 utt2dur</h4><p>This will show us every audio files’ durations.</p><p><em>AUDIO_FILE_ID      #Durations (s)</em></p><h4 id="2-1-1-4-utt2num-frames"><a href="#2-1-1-4-utt2num-frames" class="headerlink" title="2.1.1.4 utt2num_frames"></a>2.1.1.4 utt2num_frames</h4><p>This will told us every audio files’ frame numbers. Since we already know frame_shift time is 0.01s. Which means for every frame it needs 0.01s.</p><p><em>AUDIO_FILE_ID      #Number of frames</em></p><h4 id="2-1-5-visualize-ark-file"><a href="#2-1-5-visualize-ark-file" class="headerlink" title="2.1.5 visualize ark file"></a>2.1.5 visualize ark file</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">copy-feats ark:cmvn_kaldi_file.ark ark, t:cmvn_feat.ark.txt<br></code></pre></td></tr></table></figure><p>Here is how we visualize the ark file into the txt. After that we can preview the cmvn_ark.txt file.</p><p><img src="/../images/image-20220818000941498.png" alt="image-20220818000941498"></p><h3 id="2-1-2-CMVN"><a href="#2-1-2-CMVN" class="headerlink" title="2.1.2 CMVN"></a>2.1.2 CMVN</h3><p>This operation is for solving one problem which is that we need to take into the different people’s diversities. Since we knew that for different people have different timbre. <code>CMVN</code> is for solving this problem.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egs/wsj/steps/compute_cmvn_stats.sh &lt;data_dir&gt;<br></code></pre></td></tr></table></figure><p>The following is where the <code>CMVN</code> tool belongs to. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steps/compute_cmvn_stats.sh ./kaldi_file<br></code></pre></td></tr></table></figure><p>Here we generated the <code>CMVN</code> in the kaldi_file directory. </p><p>After we visualized the <code>.ark</code> file from the kaidi_file directory to preview the <code>.txt</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy-feats ark:cmvn_kaldi_file.ark ark, t:cmvn_feat.ark.txt<br></code></pre></td></tr></table></figure><p>We can know that for each frame, there have 13D MFCC params, so if we need to do CMVN, we need to caculate 2 params for each frame. So there will be every column has two params: average and variation. So there had 13 columns, so for each column we need 13*2 &#x3D; 26 CMVN params, which consists 13 averg and 13 var.</p><p>If we do not caring about the SPK, just focus on the audio content itslelf will be a big issue. Since as we know, we do need know the spk’s voice characteristics and this will affect our trainings,we need to take that bias into it. We will do “CMVN” here, this will be applied for prior distribution for male and female. The value between the “CMVN” is [0-1]. </p><h3 id="2-1-3-Generate-H-fst"><a href="#2-1-3-Generate-H-fst" class="headerlink" title="2.1.3 Generate H.fst"></a>2.1.3 Generate H.fst</h3><p> After we got <code>CMVN</code>, we already can generate the <code>H.fst</code> file. </p><h3 id="2-1-4-Check-Log"><a href="#2-1-4-Check-Log" class="headerlink" title="2.1.4 Check Log"></a>2.1.4 Check Log</h3><p><img src="/../images/image-20220818001112500.png" alt="image-20220818001112500"></p><h2 id="2-2-L-fst-Dictionary"><a href="#2-2-L-fst-Dictionary" class="headerlink" title="2.2 L.fst (Dictionary)"></a>2.2 L.fst (Dictionary)</h2><p>We input phones and output words. </p><p>Generate <code>run.sh &amp; get L.fst</code></p><p>The final step should be write a <code>run.sh</code> file to generate the <code>L.fst</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 1. generate the L.fst</span><br><br><span class="hljs-comment"># here we used prepare_lang.sh </span><br><span class="hljs-comment"># there are four params we input: </span><br><br><span class="hljs-comment">#1. the four files we prepared, fix_data_dir.sh ./local/dict</span><br><span class="hljs-comment">#   2. If there has the phones not in the dictionary, what it will be recognized as &#x27;SIL&#x27;</span><br><span class="hljs-comment">#   3. the temp files</span><br><span class="hljs-comment">#   4. F.fst</span><br><br><br>utils/prepare_lang.sh ./local/dict <span class="hljs-string">&#x27;SIL&#x27;</span> ./temp/01/ L/lang<br></code></pre></td></tr></table></figure><h3 id="Visualize-the-L-fst-file"><a href="#Visualize-the-L-fst-file" class="headerlink" title="Visualize the L.fst file"></a>Visualize the L.fst file</h3><p>we can print the .fst here to see the whole results.</p><img src="../images/image-20220817233710490.png" alt="image-20220817233710490" style="zoom:80%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst<br></code></pre></td></tr></table></figure><p>Or we can just check the first 20th results:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fstprint ../lang/L.fst | <span class="hljs-built_in">head</span> -n 20<br></code></pre></td></tr></table></figure><p>Save the log of the L.fst into L.txt.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst &gt; L.txt<br></code></pre></td></tr></table></figure><p>After we generated the L.fst, we can get the estimation from there. All the phones and words will get an ID. </p><p>  phone_ID   word_ID     input: phone    output: word    probabilities<br>    0           1        <eps>    <eps>     0.6878887788<br>    1           2        EY1_S        A           0.7987897897<br>  …..<br>Here are the .fst format: </p><p>We can use fstdraw to draw the decoding graph.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstdraw --isymbols=../lang/phones.txt --osymbols=../lang/words.txt ../lang/L.fst  &gt; L.dot<br></code></pre></td></tr></table></figure><p>We can firstly output a L.dot file then we can just draw it. So we can use .dot file to generate it into a jpg file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt wget install ghostscript<br>apt wget install graphviz<br>dot -Tjpg L.dot &gt; L.jpg<br></code></pre></td></tr></table></figure><h2 id="2-3-C-fst-（Context）"><a href="#2-3-C-fst-（Context）" class="headerlink" title="2.3. C.fst （Context）"></a>2.3. C.fst （Context）</h2><p>In here, means the phones can be affected by the phones next to it</p><p>Input phones and output phones.  Its optional in Kaldi when we make the <code>HCLG.fst</code>. </p><h2 id="2-4-G-fst-just-n-gram-get-lm-sh-Language-Model"><a href="#2-4-G-fst-just-n-gram-get-lm-sh-Language-Model" class="headerlink" title="2.4 G.fst : just n-gram  get_lm.sh (Language Model)"></a>2.4 G.fst : just n-gram  get_lm.sh (Language Model)</h2><p>we can download <code>srilm</code>. </p><p>Language model is very easy, we just need to prepare the corpus line by line and make sure cutted the sentences.</p><figure class="highlight plaintext"><figcaption><span>actually is ```G.fsa```, ```fsa``` is a very typical kind of fst, it is a kind of reciever, which inputs equals to output.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs G.fst```"><br><br>```Python<br># the name can be set as: text.lm<br><br>&#x27;&#x27;&#x27;<br><br>[word1, word2, word3, ..., wordn]<br>[&#x27;I, Love, Kaldi&#x27;]<br>[&#x27;Me, too&#x27;]<br>&#x27;&#x27;&#x27;<br><br></code></pre></td></tr></table></figure><p>Here we just introduce <code>UNIX</code> way to do it. We will use <code>awk</code>. </p><figure class="highlight plaintext"><figcaption><span>is very fast then python, if there is efficiency needs.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Awk```"><br>```Python<br># get the corpus input we need to process <br>file_name = &#x27;/root/data/.../...&#x27; <br><br># read the file<br>with open(file_name, &#x27;r&#x27;, encoding = &#x27;utf-8&#x27;) as file:<br>for item in file.readlines():<br>print(&quot; &quot;.join(item.strip(&quot;\n&quot;)strip().split(&quot; &quot;)[1:]))<br>pass<br>pass<br><br><br><br># we can just get [word1, word2, word3, ..., wordn]<br></code></pre></td></tr></table></figure><p>We will use the <code>AWK</code> to do the same thing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># here are the original idea</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;Me, too&#x27;]</span><br><span class="hljs-comment"># we can just firstly test it with print in awk</span><br>awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> text <span class="hljs-comment"># here &quot;text&quot; means the txt file you want to manipulate, her is $1 means we print the first colum. It will look like:</span><br><span class="hljs-comment"># AUDIOSPK1001</span><br><span class="hljs-comment"># AUDIOSPK1002</span><br><br><span class="hljs-comment"># If is $0, which means the whole. $2 means the second column. $4 is the fourth column.</span><br></code></pre></td></tr></table></figure><p>Here we need to get the column that except the first column.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash">awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text <span class="hljs-comment"># here the \t is just like \n,  we can delete it as well. the default diving symbol is &#x27; &#x27;, in here actually awk -F &#x27; &#x27;&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;\n&#x27;&#125;&#x27; text. NF is the last column, awk is based on column manipulations. </span><br><br>awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text<br><span class="hljs-comment"># we will get exactly the same output just like python, but much faster:</span><br><span class="hljs-comment"># word1, word2, word3, ..., wordn</span><br><span class="hljs-comment"># I, Love, Kaldi</span><br><span class="hljs-comment"># Me, too</span><br></code></pre></td></tr></table></figure><h3 id="2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model"><a href="#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model" class="headerlink" title="2.4.1 write get_lm.sh (we need to write aw shell script to run and get th lm(language model))"></a>2.4.1 write get_lm.sh (we need to write aw shell script to run and get th lm(language model))</h3><figure class="highlight plaintext"><figcaption><span>language model is statistical language model, more tranning data can be more "better" in some ways.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs n-gram```"><br>```Bash<br># You need firstly specify your corpus sources.<br>text = &quot;./text.lm&quot;<br># 1. get all the corpus<br># awk &#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;\n&#x27;&#125;&#x27; text &gt; xxx.lm<br># loop all the columns:<br>#NF here means the last column<br>#   printf just like C language, they are the same in some ways<br># 2. Deploy Trigram n-gram model<br>ngram-count -text text.lm -order 3 write train.part.txt.count  <br># OR we can use<br>ngram-count -text $text -order 3 write train.part.txt.count  <br># $text means the file itself, we already defined it at first.<br># -text: the corpus<br># wirte: write the file<br># here 3 means tri, which indicates triphone, and write into train.part.txt.count file.<br># here are the preview<br><br>#   word  pairs         times<br>#      I                  10<br>#    I  Love              5<br>#  I  Love Kaldi          1<br>#  Hello World &lt;/s&gt;       2<br>#  &lt;/s&gt; is great          1<br># &lt;/s&gt; means the starting or ending point, usually means something will begin or end from there.  <br><br># 3. From the 2nd step,  generateing the lm<br>ngram-count -read train.part.txt.count -order 3 -lm LM -interpole -kndiscount<br>#  -lm which means the generated Language Model, right now we call it LM<br># -interpole is the smoothing function, and kndiscount is the callback function.There are two possibilities, one is the original and other which is callback function.<br>#  \data\<br># ngram 1 = 2821      , here means there are 2821 1grams&#x27; pairs<br># ngram 2 = 6344<br># ngram 3 = 444<br># \1-grams:<br># -3.4234324     1       -0.034523532 this is also probabities but with log(), we call backoff method<br># -3.4234224     2       -0.032323532<br># -2.3234224     A       -0.023233532<br># \2-grams:<br># -3.2424432     I  Love          -0.232312332<br># \3-grams:<br># -4.3244343     I  Love Kaldi    -0.454554545<br><br></code></pre></td></tr></table></figure><h3 id="2-4-2-Generate-G-fst"><a href="#2-4-2-Generate-G-fst" class="headerlink" title="2.4.2 Generate G.fst"></a>2.4.2 Generate G.fst</h3><p>There has two ways to generate <code>G.fst</code>.</p><p>Way1: Just Call from the Kaldi shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">utils/format_lm_sri.sh data/lang /lm/LM /data/local/dict/lexicon.txt/data/lang_test<br></code></pre></td></tr></table></figure><p>Way2: using <code>arpa2fst</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=/data/lang/words.txt /lm/LM/G.fst</span><br></code></pre></td></tr></table></figure><h1 id="3-Decode"><a href="#3-Decode" class="headerlink" title="3. Decode"></a>3. Decode</h1><p>In Kaldi, we decode the <code>HCLG.fst</code>, <code>HCLG</code> is just a kind of fst graph, it will use the <code>Viterbi</code> to decode. That is the easiest way to decode the fst model. </p><h2 id="3-1-GMM-latgen-faster-Decoder"><a href="#3-1-GMM-latgen-faster-Decoder" class="headerlink" title="3.1 GMM-latgen-faster Decoder"></a>3.1 GMM-latgen-faster Decoder</h2><p>We can use the default decoder to decode the files. <code>GMM-latgen-faster</code> decoder can be thought as one type of <code>LatticeSimpleDecoder</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">decode decode.sh --nj 1 ./exp/mono/graph ./data/ ./exp/mono/decode<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># this is the basic params it need</span><br>steps/decode.sh [option] &lt;graph-dir&gt; &lt;data-dir&gt; &lt;decode-dir&gt;<br><span class="hljs-comment"># &lt;graph-dir&gt; is the HCLG.fst</span><br><span class="hljs-comment"># &lt;data-dir&gt; is the data files needed to be decode</span><br><span class="hljs-comment"># &lt;decode-dir&gt; is the results Kaldi ASR should output</span><br></code></pre></td></tr></table></figure><p>After the Kaldi did the decoding, it will calculate <code>WER</code> (1-ER) for us. </p><h2 id="3-2-Simple-Decoder"><a href="#3-2-Simple-Decoder" class="headerlink" title="3.2 Simple Decoder"></a>3.2 Simple Decoder</h2><figure class="highlight plaintext"><figcaption><span>Decoder```: If we would like to use the ```gmm-decode-simple```, we need to follow the following scripts:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs GMM-decode-simple"><br><br><br>```sh<br>model=&quot;.../final.mdl&quot;   # we need to specify the <br>hclg= &quot;.../HCLG.fst&quot;<br>feats= &quot;cmvn.scp&quot; # the acoustics fatures<br>out= &quot;.&quot; # the output file<br><br># we need to apply the cmvn into the acoustic features: feats.scp<br>apply-cmvn --utt2spk=ark:$&#123;feats&#125;/utt2spk scp:$&#123;feats&#125;/cmvn.scp scp:$&#123;feats&#125;/feats.scp ark, t:- |add-deltas ark:- ark:feats_cmvn_delta.ark<br><br>gmm-decode-simple $&#123;model&#125; $&#123;hclg&#125; ark:feats_cmvn_delta.ark ark,t:$&#123;out&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-Faster-Decoder"><a href="#3-3-Faster-Decoder" class="headerlink" title="3.3 Faster Decoder"></a>3.3 Faster Decoder</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">model=<span class="hljs-string">&quot;.../final.mdl&quot;</span>   <span class="hljs-comment"># we need to specify the </span><br>hclg= <span class="hljs-string">&quot;.../HCLG.fst&quot;</span><br>feats= <span class="hljs-string">&quot;cmvn.scp&quot;</span> <span class="hljs-comment"># the acoustics fatures</span><br>out= <span class="hljs-string">&quot;./result_faster&quot;</span> <span class="hljs-comment"># the output file</span><br><br><br><br>gmm-decode-faster <span class="hljs-variable">$&#123;model&#125;</span> <span class="hljs-variable">$&#123;hclg&#125;</span> ark:feats_cmvn_delta.ark ark,t:<span class="hljs-variable">$&#123;out&#125;</span><br></code></pre></td></tr></table></figure><p>We can make the fast decoder just this way.</p><h1 id="4-A-Very-Short-Demo"><a href="#4-A-Very-Short-Demo" class="headerlink" title="4. A Very Short Demo"></a>4. A Very Short Demo</h1><p>In this part we will download and train a complete kaldi ASR demo from installation to decoding. Since the installation of kaldi is too big and also there has a lot of submodules we do not really need. So in this case, we just do some file modifications, we just make a mini-version in order to better understand the kaldi workflow and study.</p><p>Firstly, we need to download the kaldi demo from the git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/xiao11lam/kaldi_tutorials.git<br>cd kaldi_tutorials<br># change the write and read privilege<br>chmod -R 755  ./*<br></code></pre></td></tr></table></figure><p>Here is a <code>repo</code> only for the tutorial purposes, since we have manipulated some files from the original Kaldi in order to make the installation and training process more friendly.</p><p><strong>And remember before you start to make this demo, please make sure you already have the cuda installed!!!.</strong></p><p>We highly suggesting you use the kaldi installation shell scripts written from the <code>AssemblyAI</code> <a href="https://www.assemblyai.com/blog/kaldi-install-for-dummies/">https://www.assemblyai.com/blog/kaldi-install-for-dummies/</a></p><p>Please follow the instructions step by steps.</p><p><img src="/../images/image-20220817231038503.png" alt="image-20220817231038503"></p><h2 id="1-Set-the-Tools-Environment"><a href="#1-Set-the-Tools-Environment" class="headerlink" title="1. Set the Tools Environment"></a>1. Set the Tools Environment</h2><p>Check the CPU info, to find out how many processors your PC have.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grep <span class="hljs-string">&#x27;processor&#x27;</span> /proc/cpuinfo | <span class="hljs-built_in">sort</span> -u | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220731104820116.png" alt="image-20220731104820116"></p><p>Now I got <code>8</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /mnt/c/Users/ABC/Desktop/kaldi-cslt/tools<br>vim run.sh  <span class="hljs-comment"># check the env installation scripts</span><br>sh run.sh <span class="hljs-comment"># we can just run the scripts and let it automatically install</span><br></code></pre></td></tr></table></figure><p>Here are the preview of the <code>run.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># here you can spefify your CPU info</span><br>make -j 8<br><span class="hljs-comment"># install the IRSTLM</span><br>./extras/install_irstlm.sh<br><span class="hljs-comment"># install the openblas</span><br>./extras/install_openblas.sh<br></code></pre></td></tr></table></figure><h2 id="2-Set-the-Src-Environment"><a href="#2-Set-the-Src-Environment" class="headerlink" title="2. Set the Src Environment"></a>2. Set the Src Environment</h2><p>Here, we follow the same way to install these <code>src</code> environments.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /mnt/c/Users/ABC/Desktop/kaldi-cslt/src<br>vim run.sh  <span class="hljs-comment"># modify the run.sh file if you want (optional)</span><br>sh run.sh<br></code></pre></td></tr></table></figure><p>Here are the preview of the <code>run.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --static \<br>      --use-cuda=<span class="hljs-built_in">yes</span> --cudatk-dir=/usr/local/cuda \<br>      --mathlib=OPENBLAS --openblas-root=../tools/OpenBLAS/install \<br>      --static-math=<span class="hljs-built_in">yes</span> \<br>      --static-fst=<span class="hljs-built_in">yes</span> --fst-root=../tools/openfst<br><br>make depend -j 40<br><br>make -j 40<br></code></pre></td></tr></table></figure><h2 id="3-Prepare-for-the-Acoustic-Model-AM"><a href="#3-Prepare-for-the-Acoustic-Model-AM" class="headerlink" title="3. Prepare for the Acoustic Model (AM)"></a>3. Prepare for the Acoustic Model (AM)</h2><p>Finally, we will get into the <code>egs</code> dir to firstly train an acoustic model.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /kaldi_tutorials/egs/thchs30<br>vim run_am.sh<br>sh run_am.sh  <span class="hljs-comment"># start to train the AM</span><br></code></pre></td></tr></table></figure><p>Here we need to change the path into the our local database directory:</p><p><img src="/../images/image-20220731194754537.png" alt="image-20220731194754537"></p><p><img src="/../images/image-20220731211958212.png" alt="image-20220731211958212"></p><h2 id="4-Prepare-for-the-Language-Model-LM"><a href="#4-Prepare-for-the-Language-Model-LM" class="headerlink" title="4. Prepare for the Language Model (LM)"></a>4. Prepare for the Language Model (LM)</h2><p>This is the <code>run_lm.sh</code> file. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">dir</span>=exp/lm<br>lm_dir=<br>gmm_mdl_dir=exp/tri4b<br>nn_mdl_dir=exp/chain-skip/tdnn-f-cn<br><br><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$dir</span><br>tar czvf <span class="hljs-variable">$dir</span>/corpus.lm_e-7.tar.gz  data_thchs30/lm_word/word.3gram.lm<br><br>./utils/format_lm.sh  data/lang <span class="hljs-variable">$dir</span>/corpus.lm_e-7.tar.gz  data/lang <span class="hljs-variable">$dir</span>/lang_test<br><br>./utils/mkgraph.sh   <span class="hljs-variable">$dir</span>/lang_test <span class="hljs-variable">$gmm_mdl_dir</span>  <span class="hljs-variable">$gmm_mdl_dir</span>/graph<br><br>./utils/mkgraph.sh  --self-loop-scale 1.0 <span class="hljs-variable">$dir</span>/lang_test <span class="hljs-variable">$nn_mdl_dir</span>  <span class="hljs-variable">$nn_mdl_dir</span>/graph<br></code></pre></td></tr></table></figure><h2 id="5-Decode"><a href="#5-Decode" class="headerlink" title="5. Decode"></a>5. Decode</h2><p>We will use the <code>./decode_chain.sh</code>, it will print the <code>WER</code>. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>. ./path.sh<br>. ./cmd.sh<br>exp_dir=exp/chain-skip/tdnn-f-cn<br>beam=13<br>stage=-3<br><span class="hljs-keyword">for</span> data_set <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>  ;<span class="hljs-keyword">do</span><br>      steps/nnet3/decode.sh \<br>      --nj 8 --acwt 1.0 --post-decode-acwt 10.0 \<br>      --cmd <span class="hljs-string">&quot;run.pl&quot;</span> --iter final \<br>      --stage <span class="hljs-variable">$stage</span> \<br>      <span class="hljs-variable">$exp_dir</span>/graph  data/fbank/<span class="hljs-variable">$data_set</span> <span class="hljs-variable">$exp_dir</span>/decode_graph_final<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">cat</span> <span class="hljs-variable">$exp_dir</span>/decode_graph_final/scoring_kaldi/best_wer<br><br><span class="hljs-comment">#result: %WER 21.75 [ 17647 / 81139, 149 ins, 664 del, 16834 sub ] exp/chain-skip/tdnn-f-cn/decode_graph_final/wer_10_0.0</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh">data_thchs30/lm_word/word.3gram.lm<br>Converting <span class="hljs-string">&#x27;exp/lm/corpus.lm_e-7.tar.gz&#x27;</span> to FST<br>arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=exp/lm/lang_test/words.txt - exp/lm/lang_test/G.fst</span><br>LOG (arpa2fst[5.5.10~40-6d54]:Read():arpa-file-parser.cc:94) Reading \data\ section.<br>LOG (arpa2fst[5.5.10~40-6d54]:Read():arpa-file-parser.cc:149) Reading \1-grams: section.<br>LOG (arpa2fst[5.5.10~40-6d54]:Read():arpa-file-parser.cc:149) Reading \2-grams: section.<br>LOG (arpa2fst[5.5.10~40-6d54]:Read():arpa-file-parser.cc:149) Reading \3-grams: section.<br>LOG (arpa2fst[5.5.10~40-6d54]:RemoveRedundantStates():arpa-lm-compiler.cc:359) Reduced num-states from 3076353 to 454251<br>fstisstochastic exp/lm/lang_test/G.fst<br>-7.27093e-08 -0.832396<br>awk: warning: <span class="hljs-built_in">command</span> line argument `-<span class="hljs-string">&#x27; is a directory: skipped</span><br><span class="hljs-string">Succeeded in formatting LM: &#x27;</span>exp/lm/corpus.lm_e-7.tar.gz<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tree-info exp/tri4b/tree</span><br><span class="hljs-string">tree-info exp/tri4b/tree</span><br><span class="hljs-string">fstminimizeencoded</span><br><span class="hljs-string">fstpushspecial</span><br><span class="hljs-string">fsttablecompose exp/lm/lang_test/L_disambig.fst exp/lm/lang_test/G.fst</span><br><span class="hljs-string">fstdeterminizestar --use-log=true</span><br><span class="hljs-string">fstisstochastic exp/lm/lang_test/tmp/LG.fst</span><br><span class="hljs-string">-0.0480882 -0.0488869</span><br><span class="hljs-string">[info]: LG not stochastic.</span><br><span class="hljs-string">fstcomposecontext --context-size=3 --central-position=1 --read-disambig-syms=exp/lm/lang_test/phones/disambig.int --write-disambig-syms=exp/lm/lang_test/tmp/disambig_ilabels_3_1.int exp/lm/lang_test/tmp/ilabels_3_1.31779 exp/lm/lang_test/tmp/LG.fst</span><br><span class="hljs-string">fstisstochastic exp/lm/lang_test/tmp/CLG_3_1.fst</span><br><span class="hljs-string">0 -0.0488869</span><br><span class="hljs-string">[info]: CLG not stochastic.</span><br><span class="hljs-string">make-h-transducer --disambig-syms-out=exp/tri4b/graph/disambig_tid.int --transition-scale=1.0 exp/lm/lang_test/tmp/ilabels_3_1 exp/tri4b/tree exp/tri4b/final.mdl</span><br><span class="hljs-string">fstdeterminizestar --use-log=true</span><br><span class="hljs-string">fsttablecompose exp/tri4b/graph/Ha.fst exp/lm/lang_test/tmp/CLG_3_1.fst</span><br><span class="hljs-string">fstminimizeencoded</span><br><span class="hljs-string">fstrmsymbols exp/tri4b/graph/disambig_tid.int</span><br><span class="hljs-string">fstrmepslocal</span><br><span class="hljs-string">fstisstochastic exp/tri4b/graph/HCLGa.fst</span><br><span class="hljs-string">0.644531 -0.128947</span><br><span class="hljs-string">HCLGa is not stochastic</span><br><span class="hljs-string">add-self-loops --self-loop-scale=0.1 --reorder=true exp/tri4b/final.mdl exp/tri4b/graph/HCLGa.fst</span><br><span class="hljs-string">mkgraph.sh: expected exp/chain-skip/tdnn-f-cn/final.mdl to exist</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###### Bookmark: basic preparation ######</span><br>creating data/&#123;train,<span class="hljs-built_in">test</span>&#125;, ignore dev <span class="hljs-built_in">set</span><br>cleaning data/train<br>preparing scps and text <span class="hljs-keyword">in</span> data/train<br>cleaning data/test<br>preparing scps and text <span class="hljs-keyword">in</span> data/test<br><span class="hljs-comment">###### Bookmark: language preparation ######</span><br><span class="hljs-comment">###### Bookmark: language processing ######</span><br>utils/prepare_lang.sh --position_dependent_phones <span class="hljs-literal">false</span> data/dict &lt;SPOKEN_NOISE&gt; data/local/lang data/lang<br>Checking data/dict/silence_phones.txt ...<br>--&gt; reading data/dict/silence_phones.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/silence_phones.txt is OK<br><br>Checking data/dict/optional_silence.txt ...<br>--&gt; reading data/dict/optional_silence.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/optional_silence.txt is OK<br><br>Checking data/dict/nonsilence_phones.txt ...<br>--&gt; reading data/dict/nonsilence_phones.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/nonsilence_phones.txt is OK<br><br>Checking disjoint: silence_phones.txt, nonsilence_phones.txt<br>--&gt; disjoint property is OK.<br><br>Checking data/dict/lexicon.txt<br>--&gt; reading data/dict/lexicon.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/lexicon.txt is OK<br><br>Checking data/dict/extra_questions.txt ...<br>--&gt; reading data/dict/extra_questions.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/extra_questions.txt is OK<br>--&gt; SUCCESS [validating dictionary directory data/dict]<br><br>**Creating data/dict/lexiconp.txt from data/dict/lexicon.txt<br>fstaddselfloops data/lang/phones/wdisambig_phones.int data/lang/phones/wdisambig_words.int<br>prepare_lang.sh: validating output directory<br>utils/validate_lang.pl data/lang<br>Checking existence of separator file<br>separator file data/lang/subword_separator.txt is empty or does not exist, deal <span class="hljs-keyword">in</span> word <span class="hljs-keyword">case</span>.<br>Checking data/lang/phones.txt ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/lang/phones.txt is OK<br><br>Checking words.txt: <span class="hljs-comment">#0 ...</span><br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/lang/words.txt is OK<br><br>Checking disjoint: silence.txt, nonsilence.txt, disambig.txt ...<br>--&gt; silence.txt and nonsilence.txt are disjoint<br>--&gt; silence.txt and disambig.txt are disjoint<br>--&gt; disambig.txt and nonsilence.txt are disjoint<br>--&gt; disjoint property is OK<br><br>Checking sumation: silence.txt, nonsilence.txt, disambig.txt ...<br>--&gt; found no unexplainable phones <span class="hljs-keyword">in</span> phones.txt<br><br>Checking data/lang/phones/context_indep.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/context_indep.txt<br>--&gt; data/lang/phones/context_indep.int corresponds to data/lang/phones/context_indep.txt<br>--&gt; data/lang/phones/context_indep.csl corresponds to data/lang/phones/context_indep.txt<br>--&gt; data/lang/phones/context_indep.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/nonsilence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 217 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/nonsilence.txt<br>--&gt; data/lang/phones/nonsilence.int corresponds to data/lang/phones/nonsilence.txt<br>--&gt; data/lang/phones/nonsilence.csl corresponds to data/lang/phones/nonsilence.txt<br>--&gt; data/lang/phones/nonsilence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/silence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/silence.txt<br>--&gt; data/lang/phones/silence.int corresponds to data/lang/phones/silence.txt<br>--&gt; data/lang/phones/silence.csl corresponds to data/lang/phones/silence.txt<br>--&gt; data/lang/phones/silence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/optional_silence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.int corresponds to data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.csl corresponds to data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/disambig.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 57 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/disambig.txt<br>--&gt; data/lang/phones/disambig.int corresponds to data/lang/phones/disambig.txt<br>--&gt; data/lang/phones/disambig.csl corresponds to data/lang/phones/disambig.txt<br>--&gt; data/lang/phones/disambig.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/roots.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 218 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/roots.txt<br>--&gt; data/lang/phones/roots.int corresponds to data/lang/phones/roots.txt<br>--&gt; data/lang/phones/roots.&#123;txt, int&#125; are OK<br><br>Checking data/lang/phones/sets.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 218 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/sets.txt<br>--&gt; data/lang/phones/sets.int corresponds to data/lang/phones/sets.txt<br>--&gt; data/lang/phones/sets.&#123;txt, int&#125; are OK<br><br>Checking data/lang/phones/extra_questions.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 7 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/extra_questions.txt<br>--&gt; data/lang/phones/extra_questions.int corresponds to data/lang/phones/extra_questions.txt<br>--&gt; data/lang/phones/extra_questions.&#123;txt, int&#125; are OK<br><br>Checking optional_silence.txt ...<br>--&gt; reading data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.txt is OK<br><br>Checking disambiguation symbols: <span class="hljs-comment">#0 and #1</span><br>--&gt; data/lang/phones/disambig.txt has <span class="hljs-string">&quot;#0&quot;</span> and <span class="hljs-string">&quot;#1&quot;</span><br>--&gt; data/lang/phones/disambig.txt is OK<br><br>Checking topo ...<br><br>Checking word-level disambiguation symbols...<br>--&gt; data/lang/phones/wdisambig.txt exists (newer prepare_lang.sh)<br>Checking data/lang/oov.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/oov.txt<br>--&gt; data/lang/oov.int corresponds to data/lang/oov.txt<br>--&gt; data/lang/oov.&#123;txt, int&#125; are OK<br><br>--&gt; data/lang/L.fst is olabel sorted<br>--&gt; data/lang/L_disambig.fst is olabel sorted<br>--&gt; SUCCESS [validating lang directory data/lang]<br><span class="hljs-comment">###### Bookmark: feature extraction ######</span><br>steps/make_mfcc.sh --nj 10 --cmd run.pl data/mfcc/train<br>utils/validate_data_dir.sh: Successfully validated data-directory data/mfcc/train<br>steps/make_mfcc.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_mfcc.sh: Succeeded creating MFCC features <span class="hljs-keyword">for</span> train<br>steps/make_fbank.sh --nj 10 --cmd run.pl data/fbank/train<br>utils/validate_data_dir.sh: Successfully validated data-directory data/fbank/train<br>steps/make_fbank.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_fbank.sh: Succeeded creating filterbank features <span class="hljs-keyword">for</span> train<br>steps/compute_cmvn_stats.sh data/mfcc/train<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> train<br>steps/compute_cmvn_stats.sh data/fbank/train<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> train<br>steps/make_mfcc.sh --nj 10 --cmd run.pl data/mfcc/test<br>utils/validate_data_dir.sh: Successfully validated data-directory data/mfcc/test<br>steps/make_mfcc.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_mfcc.sh: Succeeded creating MFCC features <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span><br>steps/make_fbank.sh --nj 10 --cmd run.pl data/fbank/test<br>utils/validate_data_dir.sh: Successfully validated data-directory data/fbank/test<br>steps/make_fbank.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_fbank.sh: Succeeded creating filterbank features <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span><br>steps/compute_cmvn_stats.sh data/mfcc/test<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span><br>steps/compute_cmvn_stats.sh data/fbank/test<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span><br><span class="hljs-comment">###### Bookmark: GMM-HMM training ######</span><br>steps/train_mono.sh --boost-silence 1.25 --nj 10 --cmd run.pl data/mfcc/train data/lang exp/mono<br>steps/train_mono.sh: Initializing monophone system.<br>steps/train_mono.sh: Compiling training graphs<br>steps/train_mono.sh: Aligning data equally (pass 0)<br>steps/train_mono.sh: Pass 1<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 2<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 3<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 4<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 5<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 6<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 7<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 8<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 9<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 10<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 11<br>steps/train_mono.sh: Pass 12<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 13<br>steps/train_mono.sh: Pass 14<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 15<br>steps/train_mono.sh: Pass 16<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 17<br>steps/train_mono.sh: Pass 18<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 19<br>steps/train_mono.sh: Pass 20<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 21<br>steps/train_mono.sh: Pass 22<br>steps/train_mono.sh: Pass 23<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 24<br>steps/train_mono.sh: Pass 25<br>steps/train_mono.sh: Pass 26<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 27<br>steps/train_mono.sh: Pass 28<br>steps/train_mono.sh: Pass 29<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 30<br>steps/train_mono.sh: Pass 31<br>steps/train_mono.sh: Pass 32<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 33<br>steps/train_mono.sh: Pass 34<br>steps/train_mono.sh: Pass 35<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 36<br>steps/train_mono.sh: Pass 37<br>steps/train_mono.sh: Pass 38<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 39<br>steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/mono<br>steps/diagnostic/analyze_alignments.sh: see stats <span class="hljs-keyword">in</span> exp/mono/log/analyze_alignments.log<br>56 warnings <span class="hljs-keyword">in</span> exp/mono/log/acc.*.*.<span class="hljs-built_in">log</span><br>1051 warnings <span class="hljs-keyword">in</span> exp/mono/log/update.*.<span class="hljs-built_in">log</span><br>3966 warnings <span class="hljs-keyword">in</span> exp/mono/log/align.*.*.<span class="hljs-built_in">log</span><br>exp/mono: nj=10 align prob=-100.11 over 25.49h [retry=0.2%, fail=0.0%] states=656 gauss=990<br>steps/train_mono.sh: Done training monophone system <span class="hljs-keyword">in</span> exp/mono<br>steps/align_si.sh --boost-silence 1.25 --nj 10 --cmd run.pl data/mfcc/train data/lang exp/mono exp/mono_ali<br>steps/align_si.sh: feature <span class="hljs-built_in">type</span> is delta<br>steps/align_si.sh: aligning data <span class="hljs-keyword">in</span> data/mfcc/train using model from exp/mono, putting alignments <span class="hljs-keyword">in</span> exp/mono_ali<br>steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/mono_ali<br>steps/diagnostic/analyze_alignments.sh: see stats <span class="hljs-keyword">in</span> exp/mono_ali/log/analyze_alignments.log<br>steps/align_si.sh: <span class="hljs-keyword">done</span> aligning data.<br>steps/train_deltas.sh --boost-silence 1.25 --cmd run.pl 2000 10000 data/mfcc/train data/lang exp/mono_ali exp/tri1<br>steps/train_deltas.sh: accumulating tree stats<br>steps/train_deltas.sh: getting questions <span class="hljs-keyword">for</span> tree-building, via clustering<br>steps/train_deltas.sh: building the tree<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 177 with no stats; corresponding phone list: 178<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 182 with no stats; corresponding phone list: 183<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204<br>WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209<br>** The warnings above about <span class="hljs-string">&#x27;no stats&#x27;</span> generally mean you have phones **<br>** (or <span class="hljs-built_in">groups</span> of phones) <span class="hljs-keyword">in</span> your phone <span class="hljs-built_in">set</span> that had no corresponding data. **<br>** You should probably figure out whether something went wrong, **<br>** or whether your data just doesn<span class="hljs-string">&#x27;t happen to have examples of those **</span><br><span class="hljs-string">** phones. **</span><br><span class="hljs-string">steps/train_deltas.sh: converting alignments from exp/mono_ali to use current tree</span><br><span class="hljs-string">steps/train_deltas.sh: compiling graphs of transcripts</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 1</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 2</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 3</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 4</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 5</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 6</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 7</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 8</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 9</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 10</span><br><span class="hljs-string">steps/train_deltas.sh: aligning data</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 11</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 12</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 13</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 14</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 15</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 16</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 17</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 18</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 19</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 20</span><br><span class="hljs-string">steps/train_deltas.sh: aligning data</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 21</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 22</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 23</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 24</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 25</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 26</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 27</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 28</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 29</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 30</span><br><span class="hljs-string">steps/train_deltas.sh: aligning data</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 31</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 32</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 33</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 34</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri1</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri1/log/analyze_alignments.log</span><br><span class="hljs-string">84 warnings in exp/tri1/log/acc.*.*.log</span><br><span class="hljs-string">76 warnings in exp/tri1/log/align.*.*.log</span><br><span class="hljs-string">1 warnings in exp/tri1/log/build_tree.log</span><br><span class="hljs-string">9 warnings in exp/tri1/log/questions.log</span><br><span class="hljs-string">306 warnings in exp/tri1/log/update.*.log</span><br><span class="hljs-string">9 warnings in exp/tri1/log/init_model.log</span><br><span class="hljs-string">1 warnings in exp/tri1/log/compile_questions.log</span><br><span class="hljs-string">exp/tri1: nj=10 align prob=-96.74 over 25.48h [retry=0.3%, fail=0.0%] states=1656 gauss=10026 tree-impr=4.76</span><br><span class="hljs-string">steps/train_deltas.sh: Done training system with delta+delta-delta features in exp/tri1</span><br><span class="hljs-string">steps/align_si.sh --nj 10 --cmd run.pl data/mfcc/train data/lang exp/tri1 exp/tri1_ali</span><br><span class="hljs-string">steps/align_si.sh: feature type is delta</span><br><span class="hljs-string">steps/align_si.sh: aligning data in data/mfcc/train using model from exp/tri1, putting alignments in exp/tri1_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri1_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri1_ali/log/analyze_alignments.log</span><br><span class="hljs-string">steps/align_si.sh: done aligning data.</span><br><span class="hljs-string">steps/train_lda_mllt.sh --cmd run.pl --splice-opts --left-context=3 --right-context=3 2500 15000 data/mfcc/train data/lang exp/tri1_ali exp/tri2b</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Accumulating LDA statistics.</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Accumulating tree stats</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Building the tree</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209</span><br><span class="hljs-string">This is a bad warning.</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Converting alignments from exp/tri1_ali to use current tree</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Compiling graphs of transcripts</span><br><span class="hljs-string">Training pass 1</span><br><span class="hljs-string">Training pass 2</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 3</span><br><span class="hljs-string">Training pass 4</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 5</span><br><span class="hljs-string">Training pass 6</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 7</span><br><span class="hljs-string">Training pass 8</span><br><span class="hljs-string">Training pass 9</span><br><span class="hljs-string">Training pass 10</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Training pass 11</span><br><span class="hljs-string">Training pass 12</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 13</span><br><span class="hljs-string">Training pass 14</span><br><span class="hljs-string">Training pass 15</span><br><span class="hljs-string">Training pass 16</span><br><span class="hljs-string">Training pass 17</span><br><span class="hljs-string">Training pass 18</span><br><span class="hljs-string">Training pass 19</span><br><span class="hljs-string">Training pass 20</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Training pass 21</span><br><span class="hljs-string">Training pass 22</span><br><span class="hljs-string">Training pass 23</span><br><span class="hljs-string">Training pass 24</span><br><span class="hljs-string">Training pass 25</span><br><span class="hljs-string">Training pass 26</span><br><span class="hljs-string">Training pass 27</span><br><span class="hljs-string">Training pass 28</span><br><span class="hljs-string">Training pass 29</span><br><span class="hljs-string">Training pass 30</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Training pass 31</span><br><span class="hljs-string">Training pass 32</span><br><span class="hljs-string">Training pass 33</span><br><span class="hljs-string">Training pass 34</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri2b</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri2b/log/analyze_alignments.log</span><br><span class="hljs-string">3 warnings in exp/tri2b/log/lda_acc.*.log</span><br><span class="hljs-string">1 warnings in exp/tri2b/log/compile_questions.log</span><br><span class="hljs-string">1 warnings in exp/tri2b/log/build_tree.log</span><br><span class="hljs-string">306 warnings in exp/tri2b/log/update.*.log</span><br><span class="hljs-string">102 warnings in exp/tri2b/log/acc.*.*.log</span><br><span class="hljs-string">165 warnings in exp/tri2b/log/align.*.*.log</span><br><span class="hljs-string">7 warnings in exp/tri2b/log/questions.log</span><br><span class="hljs-string">9 warnings in exp/tri2b/log/init_model.log</span><br><span class="hljs-string">exp/tri2b: nj=10 align prob=-48.25 over 25.48h [retry=0.5%, fail=0.0%] states=2072 gauss=15036 tree-impr=4.30 lda-sum=23.93 mllt:impr,logdet=1.20,1.72</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Done training system with LDA+MLLT features in exp/tri2b</span><br><span class="hljs-string">steps/align_si.sh --nj 10 --cmd run.pl --use-graphs true data/mfcc/train data/lang exp/tri2b exp/tri2b_ali</span><br><span class="hljs-string">steps/align_si.sh: feature type is lda</span><br><span class="hljs-string">steps/align_si.sh: aligning data in data/mfcc/train using model from exp/tri2b, putting alignments in exp/tri2b_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri2b_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri2b_ali/log/analyze_alignments.log</span><br><span class="hljs-string">steps/align_si.sh: done aligning data.</span><br><span class="hljs-string">steps/train_sat.sh --cmd run.pl 2500 15000 data/mfcc/train data/lang exp/tri2b_ali exp/tri3b</span><br><span class="hljs-string">steps/train_sat.sh: feature type is lda</span><br><span class="hljs-string">steps/train_sat.sh: obtaining initial fMLLR transforms since not present in exp/tri2b_ali</span><br><span class="hljs-string">steps/train_sat.sh: Accumulating tree stats</span><br><span class="hljs-string">steps/train_sat.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">steps/train_sat.sh: Building the tree</span><br><span class="hljs-string">steps/train_sat.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 177 with no stats; corresponding phone list: 178</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 182 with no stats; corresponding phone list: 183</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209</span><br><span class="hljs-string">This is a bad warning.</span><br><span class="hljs-string">steps/train_sat.sh: Converting alignments from exp/tri2b_ali to use current tree</span><br><span class="hljs-string">steps/train_sat.sh: Compiling graphs of transcripts</span><br><span class="hljs-string">Pass 1</span><br><span class="hljs-string">Pass 2</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 3</span><br><span class="hljs-string">Pass 4</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 5</span><br><span class="hljs-string">Pass 6</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 7</span><br><span class="hljs-string">Pass 8</span><br><span class="hljs-string">Pass 9</span><br><span class="hljs-string">Pass 10</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Pass 11</span><br><span class="hljs-string">Pass 12</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 13</span><br><span class="hljs-string">Pass 14</span><br><span class="hljs-string">Pass 15</span><br><span class="hljs-string">Pass 16</span><br><span class="hljs-string">Pass 17</span><br><span class="hljs-string">Pass 18</span><br><span class="hljs-string">Pass 19</span><br><span class="hljs-string">Pass 20</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Pass 21</span><br><span class="hljs-string">Pass 22</span><br><span class="hljs-string">Pass 23</span><br><span class="hljs-string">Pass 24</span><br><span class="hljs-string">Pass 25</span><br><span class="hljs-string">Pass 26</span><br><span class="hljs-string">Pass 27</span><br><span class="hljs-string">Pass 28</span><br><span class="hljs-string">Pass 29</span><br><span class="hljs-string">Pass 30</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Pass 31</span><br><span class="hljs-string">Pass 32</span><br><span class="hljs-string">Pass 33</span><br><span class="hljs-string">Pass 34</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri3b</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri3b/log/analyze_alignments.log</span><br><span class="hljs-string">9 warnings in exp/tri3b/log/questions.log</span><br><span class="hljs-string">1 warnings in exp/tri3b/log/build_tree.log</span><br><span class="hljs-string">1 warnings in exp/tri3b/log/compile_questions.log</span><br><span class="hljs-string">223 warnings in exp/tri3b/log/align.*.*.log</span><br><span class="hljs-string">9 warnings in exp/tri3b/log/init_model.log</span><br><span class="hljs-string">18 warnings in exp/tri3b/log/fmllr.*.*.log</span><br><span class="hljs-string">9 warnings in exp/tri3b/log/est_alimdl.log</span><br><span class="hljs-string">306 warnings in exp/tri3b/log/update.*.log</span><br><span class="hljs-string">162 warnings in exp/tri3b/log/acc.*.*.log</span><br><span class="hljs-string">steps/train_sat.sh: Likelihood evolution:</span><br><span class="hljs-string">-49.8685 -49.6583 -49.5625 -49.3953 -48.7531 -48.2004 -47.8653 -47.6311 -47.4458 -46.9795 -46.7981 -46.6155 -46.501 -46.4056 -46.3145 -46.2267 -46.1436 -46.0697 -46.0008 -45.8483 -45.7595 -45.7067 -45.6578 -45.6099 -45.564 -45.5198 -45.4771 -45.4373 -45.3981 -45.3085 -45.2532 -45.2308 -45.2173 -45.2077</span><br><span class="hljs-string">exp/tri3b: nj=10 align prob=-48.00 over 25.48h [retry=0.6%, fail=0.1%] states=2056 gauss=15027 fmllr-impr=2.41 over 18.98h tree-impr=6.30</span><br><span class="hljs-string">steps/train_sat.sh: done training SAT system in exp/tri3b</span><br><span class="hljs-string">steps/align_fmllr.sh --nj 10 --cmd run.pl data/mfcc/train data/lang exp/tri3b exp/tri3b_ali</span><br><span class="hljs-string">steps/align_fmllr.sh: feature type is lda</span><br><span class="hljs-string">steps/align_fmllr.sh: compiling training graphs</span><br><span class="hljs-string">steps/align_fmllr.sh: aligning data in data/mfcc/train using exp/tri3b/final.alimdl and speaker-independent features.</span><br><span class="hljs-string">steps/align_fmllr.sh: computing fMLLR transforms</span><br><span class="hljs-string">steps/align_fmllr.sh: doing final alignment.</span><br><span class="hljs-string">steps/align_fmllr.sh: done aligning data.</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri3b_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri3b_ali/log/analyze_alignments.log</span><br><span class="hljs-string">62 warnings in exp/tri3b_ali/log/align_pass2.*.log</span><br><span class="hljs-string">43 warnings in exp/tri3b_ali/log/align_pass1.*.log</span><br><span class="hljs-string">3 warnings in exp/tri3b_ali/log/fmllr.*.log</span><br><span class="hljs-string">steps/train_quick.sh --cmd run.pl 4200 40000 data/mfcc/train data/lang exp/tri3b_ali exp/tri4b</span><br><span class="hljs-string">steps/train_quick.sh: feature type is lda</span><br><span class="hljs-string">steps/train_quick.sh: using transforms from exp/tri3b_ali</span><br><span class="hljs-string">steps/train_quick.sh: accumulating tree stats</span><br><span class="hljs-string">steps/train_quick.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">steps/train_quick.sh: Building the tree</span><br><span class="hljs-string">steps/train_quick.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 109 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 121 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 163 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 175 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 176 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 177 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 203 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 208 of new tree has no stats.</span><br><span class="hljs-string">steps/train_quick.sh: This is a bad warning.</span><br><span class="hljs-string">steps/train_quick.sh: mixing up old model.</span><br><span class="hljs-string">steps/train_quick.sh: converting old alignments</span><br><span class="hljs-string">steps/train_quick.sh: compiling training graphs</span><br><span class="hljs-string">steps/train_quick.sh: pass 1</span><br><span class="hljs-string">steps/train_quick.sh: pass 2</span><br><span class="hljs-string">steps/train_quick.sh: pass 3</span><br><span class="hljs-string">steps/train_quick.sh: pass 4</span><br><span class="hljs-string">steps/train_quick.sh: pass 5</span><br><span class="hljs-string">steps/train_quick.sh: pass 6</span><br><span class="hljs-string">steps/train_quick.sh: pass 7</span><br><span class="hljs-string">steps/train_quick.sh: pass 8</span><br><span class="hljs-string">steps/train_quick.sh: pass 9</span><br><span class="hljs-string">steps/train_quick.sh: pass 10</span><br><span class="hljs-string">steps/train_quick.sh: aligning data</span><br><span class="hljs-string">steps/train_quick.sh: pass 11</span><br><span class="hljs-string">steps/train_quick.sh: pass 12</span><br><span class="hljs-string">steps/train_quick.sh: pass 13</span><br><span class="hljs-string">steps/train_quick.sh: pass 14</span><br><span class="hljs-string">steps/train_quick.sh: pass 15</span><br><span class="hljs-string">steps/train_quick.sh: aligning data</span><br><span class="hljs-string">steps/train_quick.sh: pass 16</span><br><span class="hljs-string">steps/train_quick.sh: pass 17</span><br><span class="hljs-string">steps/train_quick.sh: pass 18</span><br><span class="hljs-string">steps/train_quick.sh: pass 19</span><br><span class="hljs-string">steps/train_quick.sh: estimating alignment model</span><br><span class="hljs-string">Done</span><br><span class="hljs-string">steps/align_fmllr.sh --nj 10 --cmd run.pl data/mfcc/train data/lang exp/tri4b exp/tri4b_ali</span><br><span class="hljs-string">steps/align_fmllr.sh: feature type is lda</span><br><span class="hljs-string">steps/align_fmllr.sh: compiling training graphs</span><br><span class="hljs-string">steps/align_fmllr.sh: aligning data in data/mfcc/train using exp/tri4b/final.alimdl and speaker-independent features.</span><br><span class="hljs-string">steps/align_fmllr.sh: computing fMLLR transforms</span><br><span class="hljs-string">steps/align_fmllr.sh: doing final alignment.</span><br><span class="hljs-string">steps/align_fmllr.sh: done aligning data.</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri4b_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri4b_ali/log/analyze_alignments.log</span><br><span class="hljs-string">3 warnings in exp/tri4b_ali/log/fmllr.*.log</span><br><span class="hljs-string">32 warnings in exp/tri4b_ali/log/align_pass1.*.log</span><br><span class="hljs-string">53 warnings in exp/tri4b_ali/log/align_pass2.*.log</span><br><span class="hljs-string">###### Bookmark: TDNN-F Chain Training ######</span><br><span class="hljs-string">local/chain/run_tdnn-f_common_skip.sh --mfcc-dir data/mfcc/train --fbank-dir data/fbank/train --gmm-dir exp/tri4b --ali-dir exp/tri4b_ali</span><br><span class="hljs-string">local/chain/run_chain_common.sh --stage -10 --gmm-dir exp/tri4b --ali-dir exp/tri4b_ali --lores-train-data-dir data/mfcc/train --lang data/lang_chain --lat-dir exp/chain-skip/gmm_lats --num-leaves 5000 --tree-dir exp/chain-skip/tree</span><br><span class="hljs-string">local/chain/run_chain_common.sh: creating lang directory with one state per phone.</span><br><span class="hljs-string">steps/align_fmllr_lats.sh --nj 10 --cmd run.pl data/mfcc/train data/lang_chain exp/tri4b exp/chain-skip/gmm_lats</span><br><span class="hljs-string">steps/align_fmllr_lats.sh: feature type is lda</span><br><span class="hljs-string">steps/align_fmllr_lats.sh: compiling training graphs</span><br><span class="hljs-string">steps/align_fmllr_lats.sh: aligning data in data/mfcc/train using exp/tri4b/final.alimdl and speaker-independent features.</span><br><span class="hljs-string">steps/align_fmllr_lats.sh: computing fMLLR transforms</span><br><span class="hljs-string">steps/align_fmllr_lats.sh: generating lattices containing alternate pronunciations.</span><br><span class="hljs-string">steps/align_fmllr_lats.sh: done generating lattices from training transcripts.</span><br><span class="hljs-string">32 warnings in exp/chain-skip/gmm_lats/log/align_pass1.*.log</span><br><span class="hljs-string">3 warnings in exp/chain-skip/gmm_lats/log/fmllr.*.log</span><br><span class="hljs-string">2 warnings in exp/chain-skip/gmm_lats/log/generate_lattices.*.log</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh --frame-subsampling-factor 3 --context-opts --context-width=2 --central-position=1 --cmd run.pl 5000 data/mfcc/train data/lang_chain exp/tri4b_ali exp/chain-skip/tree</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: feature type is lda</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Using transforms from exp/tri4b_ali</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Initializing monophone model (for alignment conversion, in case topology changed)</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Accumulating tree stats</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Building the tree</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 177 with no stats; corresponding phone list: 178</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.10~1589-6d54]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209</span><br><span class="hljs-string">This is a bad warning.</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Converting alignments from exp/tri4b_ali to use current tree</span><br><span class="hljs-string">steps/nnet3/chain/build_tree.sh: Done building tree</span><br><span class="hljs-string">local/chain/run_tdnn-f_common_skip.sh: creating neural net configs using the xconfig parser</span><br><span class="hljs-string">tree-info exp/chain-skip/tree/tree</span><br><span class="hljs-string">steps/nnet3/xconfig_to_configs.py --xconfig-file exp/chain-skip/tdnn-f-cn/configs/network.xconfig --config-dir exp/chain-skip/tdnn-f-cn/configs/</span><br><span class="hljs-string">nnet3-init exp/chain-skip/tdnn-f-cn/configs//init.config exp/chain-skip/tdnn-f-cn/configs//init.raw</span><br><span class="hljs-string">LOG (nnet3-init[5.5.10~1589-6d54]:main():nnet3-init.cc:80) Initialized raw neural net and wrote it to exp/chain-skip/tdnn-f-cn/configs//init.raw</span><br><span class="hljs-string">nnet3-info exp/chain-skip/tdnn-f-cn/configs//init.raw</span><br><span class="hljs-string">nnet3-init exp/chain-skip/tdnn-f-cn/configs//ref.config exp/chain-skip/tdnn-f-cn/configs//ref.raw</span><br><span class="hljs-string">LOG (nnet3-init[5.5.10~1589-6d54]:main():nnet3-init.cc:80) Initialized raw neural net and wrote it to exp/chain-skip/tdnn-f-cn/configs//ref.raw</span><br><span class="hljs-string">nnet3-info exp/chain-skip/tdnn-f-cn/configs//ref.raw</span><br><span class="hljs-string">nnet3-init exp/chain-skip/tdnn-f-cn/configs//ref.config exp/chain-skip/tdnn-f-cn/configs//ref.raw</span><br><span class="hljs-string">LOG (nnet3-init[5.5.10~1589-6d54]:main():nnet3-init.cc:80) Initialized raw neural net and wrote it to exp/chain-skip/tdnn-f-cn/configs//ref.raw</span><br><span class="hljs-string">nnet3-info exp/chain-skip/tdnn-f-cn/configs//ref.raw</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi-cslt/egs/thchs30/steps/libs/common.py:127: SyntaxWarning: &quot;is not&quot; with a literal. Did you mean &quot;!=&quot;?</span><br><span class="hljs-string">  if p.returncode is not 0:</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi-cslt/egs/thchs30/steps/libs/common.py:147: SyntaxWarning: &quot;is not&quot; with a literal. Did you mean &quot;!=&quot;?</span><br><span class="hljs-string">  if p.returncode is not 0:</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi-cslt/egs/thchs30/steps/libs/common.py:203: SyntaxWarning: &quot;is not&quot; with a literal. Did you mean &quot;!=&quot;?</span><br><span class="hljs-string">  if popen_object.returncode is not 0:</span><br><span class="hljs-string">2022-08-01 23:28:19,036 [steps/nnet3/chain/train.py:35 - &lt;module&gt; - INFO ] Starting chain model trainer (train.py)</span><br><span class="hljs-string">steps/nnet3/chain/train.py --stage -10 --cmd run.pl --feat.cmvn-opts --norm-means=false --norm-vars=false --chain.xent-regularize 0.1 --chain.leaky-hmm-coefficient 0.1 --chain.l2-regularize 0.0 --chain.apply-deriv-weights false --chain.lm-opts=--num-extra-lm-states=2000 --egs.dir  --egs.stage -10 --egs.opts --frames-overlap-per-eg 0 --egs.chunk-width 150,120,90 --trainer.num-chunk-per-minibatch 128 --trainer.frames-per-iter 1500000 --trainer.num-epochs 6 --use-gpu=wait --trainer.optimization.num-jobs-initial 2 --trainer.optimization.num-jobs-final 2 --trainer.optimization.initial-effective-lrate 0.05 --trainer.optimization.final-effective-lrate 0.001 --trainer.max-param-change 2.0 --cleanup.remove-egs false --cleanup.preserve-model-interval 10 --feat-dir data/fbank/train --tree-dir exp/chain-skip/tree --lat-dir exp/chain-skip/gmm_lats --dir exp/chain-skip/tdnn-f-cn</span><br><span class="hljs-string">[&#x27;</span>steps/nnet3/chain/train.py<span class="hljs-string">&#x27;, &#x27;</span>--stage<span class="hljs-string">&#x27;, &#x27;</span>-10<span class="hljs-string">&#x27;, &#x27;</span>--cmd<span class="hljs-string">&#x27;, &#x27;</span>run.pl<span class="hljs-string">&#x27;, &#x27;</span>--feat.cmvn-opts<span class="hljs-string">&#x27;, &#x27;</span>--norm-means=<span class="hljs-literal">false</span> --norm-vars=<span class="hljs-literal">false</span><span class="hljs-string">&#x27;, &#x27;</span>--chain.xent-regularize<span class="hljs-string">&#x27;, &#x27;</span>0.1<span class="hljs-string">&#x27;, &#x27;</span>--chain.leaky-hmm-coefficient<span class="hljs-string">&#x27;, &#x27;</span>0.1<span class="hljs-string">&#x27;, &#x27;</span>--chain.l2-regularize<span class="hljs-string">&#x27;, &#x27;</span>0.0<span class="hljs-string">&#x27;, &#x27;</span>--chain.apply-deriv-weights<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;, &#x27;</span>--chain.lm-opts=--num-extra-lm-states=2000<span class="hljs-string">&#x27;, &#x27;</span>--egs.dir<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&#x27;, &#x27;</span>--egs.stage<span class="hljs-string">&#x27;, &#x27;</span>-10<span class="hljs-string">&#x27;, &#x27;</span>--egs.opts<span class="hljs-string">&#x27;, &#x27;</span>--frames-overlap-per-eg 0<span class="hljs-string">&#x27;, &#x27;</span>--egs.chunk-width<span class="hljs-string">&#x27;, &#x27;</span>150,120,90<span class="hljs-string">&#x27;, &#x27;</span>--trainer.num-chunk-per-minibatch<span class="hljs-string">&#x27;, &#x27;</span>128<span class="hljs-string">&#x27;, &#x27;</span>--trainer.frames-per-iter<span class="hljs-string">&#x27;, &#x27;</span>1500000<span class="hljs-string">&#x27;, &#x27;</span>--trainer.num-epochs<span class="hljs-string">&#x27;, &#x27;</span>6<span class="hljs-string">&#x27;, &#x27;</span>--use-gpu=<span class="hljs-built_in">wait</span><span class="hljs-string">&#x27;, &#x27;</span>--trainer.optimization.num-jobs-initial<span class="hljs-string">&#x27;, &#x27;</span>2<span class="hljs-string">&#x27;, &#x27;</span>--trainer.optimization.num-jobs-final<span class="hljs-string">&#x27;, &#x27;</span>2<span class="hljs-string">&#x27;, &#x27;</span>--trainer.optimization.initial-effective-lrate<span class="hljs-string">&#x27;, &#x27;</span>0.05<span class="hljs-string">&#x27;, &#x27;</span>--trainer.optimization.final-effective-lrate<span class="hljs-string">&#x27;, &#x27;</span>0.001<span class="hljs-string">&#x27;, &#x27;</span>--trainer.max-param-change<span class="hljs-string">&#x27;, &#x27;</span>2.0<span class="hljs-string">&#x27;, &#x27;</span>--cleanup.remove-egs<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;, &#x27;</span>--cleanup.preserve-model-interval<span class="hljs-string">&#x27;, &#x27;</span>10<span class="hljs-string">&#x27;, &#x27;</span>--feat-dir<span class="hljs-string">&#x27;, &#x27;</span>data/fbank/train<span class="hljs-string">&#x27;, &#x27;</span>--tree-dir<span class="hljs-string">&#x27;, &#x27;</span>exp/chain-skip/tree<span class="hljs-string">&#x27;, &#x27;</span>--lat-dir<span class="hljs-string">&#x27;, &#x27;</span>exp/chain-skip/gmm_lats<span class="hljs-string">&#x27;, &#x27;</span>--<span class="hljs-built_in">dir</span><span class="hljs-string">&#x27;, &#x27;</span>exp/chain-skip/tdnn-f-cn<span class="hljs-string">&#x27;]</span><br><span class="hljs-string">2022-08-01 23:28:19,196 [steps/nnet3/chain/train.py:284 - train - INFO ] Arguments for the experiment</span><br><span class="hljs-string">&#123;&#x27;</span>alignment_subsampling_factor<span class="hljs-string">&#x27;: 3,</span><br><span class="hljs-string"> &#x27;</span>apply_deriv_weights<span class="hljs-string">&#x27;: False,</span><br><span class="hljs-string"> &#x27;</span>backstitch_training_interval<span class="hljs-string">&#x27;: 1,</span><br><span class="hljs-string"> &#x27;</span>backstitch_training_scale<span class="hljs-string">&#x27;: 0.0,</span><br><span class="hljs-string"> &#x27;</span>chain_opts<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>chunk_left_context<span class="hljs-string">&#x27;: 0,</span><br><span class="hljs-string"> &#x27;</span>chunk_left_context_initial<span class="hljs-string">&#x27;: -1,</span><br><span class="hljs-string"> &#x27;</span>chunk_right_context<span class="hljs-string">&#x27;: 0,</span><br><span class="hljs-string"> &#x27;</span>chunk_right_context_final<span class="hljs-string">&#x27;: -1,</span><br><span class="hljs-string"> &#x27;</span>chunk_width<span class="hljs-string">&#x27;: &#x27;</span>150,120,90<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>cleanup<span class="hljs-string">&#x27;: True,</span><br><span class="hljs-string"> &#x27;</span>cmvn_opts<span class="hljs-string">&#x27;: &#x27;</span>--norm-means=<span class="hljs-literal">false</span> --norm-vars=<span class="hljs-literal">false</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>combine_sum_to_one_penalty<span class="hljs-string">&#x27;: 0.0,</span><br><span class="hljs-string"> &#x27;</span><span class="hljs-built_in">command</span><span class="hljs-string">&#x27;: &#x27;</span>run.pl<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>compute_per_dim_accuracy<span class="hljs-string">&#x27;: False,</span><br><span class="hljs-string"> &#x27;</span>deriv_truncate_margin<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span><span class="hljs-built_in">dir</span><span class="hljs-string">&#x27;: &#x27;</span>exp/chain-skip/tdnn-f-cn<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>do_final_combination<span class="hljs-string">&#x27;: True,</span><br><span class="hljs-string"> &#x27;</span>dropout_schedule<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>egs_command<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>egs_dir<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>egs_nj<span class="hljs-string">&#x27;: 0,</span><br><span class="hljs-string"> &#x27;</span>egs_opts<span class="hljs-string">&#x27;: &#x27;</span>--frames-overlap-per-eg 0<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>egs_stage<span class="hljs-string">&#x27;: -10,</span><br><span class="hljs-string"> &#x27;</span>email<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>exit_stage<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>feat_dir<span class="hljs-string">&#x27;: &#x27;</span>data/fbank/train<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>final_effective_lrate<span class="hljs-string">&#x27;: 0.001,</span><br><span class="hljs-string"> &#x27;</span>frame_subsampling_factor<span class="hljs-string">&#x27;: 3,</span><br><span class="hljs-string"> &#x27;</span>frames_per_iter<span class="hljs-string">&#x27;: 1500000,</span><br><span class="hljs-string"> &#x27;</span>initial_effective_lrate<span class="hljs-string">&#x27;: 0.05,</span><br><span class="hljs-string"> &#x27;</span>input_model<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>l2_regularize<span class="hljs-string">&#x27;: 0.0,</span><br><span class="hljs-string"> &#x27;</span>lat_dir<span class="hljs-string">&#x27;: &#x27;</span>exp/chain-skip/gmm_lats<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>leaky_hmm_coefficient<span class="hljs-string">&#x27;: 0.1,</span><br><span class="hljs-string"> &#x27;</span>left_deriv_truncate<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>left_tolerance<span class="hljs-string">&#x27;: 5,</span><br><span class="hljs-string"> &#x27;</span>lm_opts<span class="hljs-string">&#x27;: &#x27;</span>--num-extra-lm-states=2000<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>max_lda_jobs<span class="hljs-string">&#x27;: 10,</span><br><span class="hljs-string"> &#x27;</span>max_models_combine<span class="hljs-string">&#x27;: 20,</span><br><span class="hljs-string"> &#x27;</span>max_objective_evaluations<span class="hljs-string">&#x27;: 30,</span><br><span class="hljs-string"> &#x27;</span>max_param_change<span class="hljs-string">&#x27;: 2.0,</span><br><span class="hljs-string"> &#x27;</span>momentum<span class="hljs-string">&#x27;: 0.0,</span><br><span class="hljs-string"> &#x27;</span>num_chunk_per_minibatch<span class="hljs-string">&#x27;: &#x27;</span>128<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>num_epochs<span class="hljs-string">&#x27;: 6.0,</span><br><span class="hljs-string"> &#x27;</span>num_jobs_final<span class="hljs-string">&#x27;: 2,</span><br><span class="hljs-string"> &#x27;</span>num_jobs_initial<span class="hljs-string">&#x27;: 2,</span><br><span class="hljs-string"> &#x27;</span>num_jobs_step<span class="hljs-string">&#x27;: 1,</span><br><span class="hljs-string"> &#x27;</span>online_ivector_dir<span class="hljs-string">&#x27;: None,</span><br><span class="hljs-string"> &#x27;</span>preserve_model_interval<span class="hljs-string">&#x27;: 10,</span><br><span class="hljs-string"> &#x27;</span>presoftmax_prior_scale_power<span class="hljs-string">&#x27;: -0.25,</span><br><span class="hljs-string"> &#x27;</span>proportional_shrink<span class="hljs-string">&#x27;: 0.0,</span><br><span class="hljs-string"> &#x27;</span>rand_prune<span class="hljs-string">&#x27;: 4.0,</span><br><span class="hljs-string"> &#x27;</span>remove_egs<span class="hljs-string">&#x27;: False,</span><br><span class="hljs-string"> &#x27;</span>reporting_interval<span class="hljs-string">&#x27;: 0.1,</span><br><span class="hljs-string"> &#x27;</span>right_tolerance<span class="hljs-string">&#x27;: 5,</span><br><span class="hljs-string"> &#x27;</span>samples_per_iter<span class="hljs-string">&#x27;: 400000,</span><br><span class="hljs-string"> &#x27;</span>shrink_saturation_threshold<span class="hljs-string">&#x27;: 0.4,</span><br><span class="hljs-string"> &#x27;</span>shrink_value<span class="hljs-string">&#x27;: 1.0,</span><br><span class="hljs-string"> &#x27;</span>shuffle_buffer_size<span class="hljs-string">&#x27;: 5000,</span><br><span class="hljs-string"> &#x27;</span>srand<span class="hljs-string">&#x27;: 0,</span><br><span class="hljs-string"> &#x27;</span>stage<span class="hljs-string">&#x27;: -10,</span><br><span class="hljs-string"> &#x27;</span>train_opts<span class="hljs-string">&#x27;: [],</span><br><span class="hljs-string"> &#x27;</span>tree_dir<span class="hljs-string">&#x27;: &#x27;</span>exp/chain-skip/tree<span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>use_gpu<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-built_in">wait</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string"> &#x27;</span>xent_regularize<span class="hljs-string">&#x27;: 0.1&#125;</span><br><span class="hljs-string">2022-08-01 23:28:26,740 [steps/nnet3/chain/train.py:341 - train - INFO ] Creating phone language-model</span><br><span class="hljs-string">2022-08-01 23:28:29,310 [steps/nnet3/chain/train.py:346 - train - INFO ] Creating denominator FST</span><br><span class="hljs-string">copy-transition-model exp/chain-skip/tree/final.mdl exp/chain-skip/tdnn-f-cn/0.trans_mdl</span><br><span class="hljs-string">LOG (copy-transition-model[5.5.10~1589-6d54]:main():copy-transition-model.cc:62) Copied transition model.</span><br><span class="hljs-string">2022-08-01 23:28:32,318 [steps/nnet3/chain/train.py:353 - train - INFO ] Initializing a basic network for estimating preconditioning matrix</span><br><span class="hljs-string">2022-08-01 23:28:33,457 [steps/nnet3/chain/train.py:382 - train - INFO ] Generating egs</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh --frames-overlap-per-eg 0 --cmd run.pl --cmvn-opts --norm-means=false --norm-vars=false --online-ivector-dir  --left-context 22 --right-context 22 --left-context-initial -1 --right-context-final -1 --left-tolerance 5 --right-tolerance 5 --frame-subsampling-factor 3 --alignment-subsampling-factor 3 --stage -10 --frames-per-iter 1500000 --frames-per-eg 150,120,90 --srand 0 data/fbank/train exp/chain-skip/tdnn-f-cn exp/chain-skip/gmm_lats exp/chain-skip/tdnn-f-cn/egs</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: Holding out 300 utterances in validation set and 300 in training diagnostic set, out of total 10000.</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: creating egs.  To ensure they are not deleted later you can do:  touch exp/chain-skip/tdnn-f-cn/egs/.nodelete</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: feature type is raw, with &#x27;</span>apply-cmvn<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tree-info exp/chain-skip/tdnn-f-cn/tree</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: working out number of frames of training data</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: working out feature dim</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: creating 7 archives, each with 14597 egs, with</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh:   150,120,90 labels per example, and (left,right) context = (22,22)</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: Getting validation and training subset examples in background.</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: Generating training examples on disk</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: recombining and shuffling order of archives on disk</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: Getting subsets of validation examples for diagnostics and combination.</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: Removing temporary archives, alignments and lattices</span><br><span class="hljs-string">steps/nnet3/chain/get_egs.sh: Finished preparing training examples</span><br><span class="hljs-string">2022-08-01 23:30:40,555 [steps/nnet3/chain/train.py:431 - train - INFO ] Copying the properties from exp/chain-skip/tdnn-f-cn/egs to exp/chain-skip/tdnn-f-cn</span><br><span class="hljs-string">2022-08-01 23:30:40,597 [steps/nnet3/chain/train.py:445 - train - INFO ] Computing the preconditioning matrix for input features</span><br><span class="hljs-string">2022-08-01 23:31:03,108 [steps/nnet3/chain/train.py:454 - train - INFO ] Preparing the initial acoustic model.</span><br><span class="hljs-string">2022-08-01 23:31:08,320 [steps/nnet3/chain/train.py:487 - train - INFO ] Training will run for 6.0 epochs = 63 iterations</span><br><span class="hljs-string">2022-08-01 23:31:08,324 [steps/nnet3/chain/train.py:529 - train - INFO ] Iter: 0/62   Jobs: 2   Epoch: 0.00/6.0 (0.0% complete)   lr: 0.100000</span><br><span class="hljs-string">run.pl: job failed, log is in exp/chain-skip/tdnn-f-cn/log/train.0.1.log</span><br><span class="hljs-string">2022-08-01 23:31:26,659 [/mnt/c/Users/ABC/Desktop/kaldi-cslt/egs/thchs30/steps/libs/common.py:207 - background_command_waiter - ERROR ] Command exited with status 1: run.pl --gpu 1 exp/chain-skip/tdnn-f-cn/log/train.0.1.log                     nnet3-chain-train --use-gpu=wait                      --apply-deriv-weights=False                     --l2-regularize=0.0 --leaky-hmm-coefficient=0.1                      --write-cache=exp/chain-skip/tdnn-f-cn/cache.1  --xent-regularize=0.1                                          --print-interval=10 --momentum=0.0                     --max-param-change=1.414213562373095                     --backstitch-training-scale=0.0                     --backstitch-training-interval=1                     --l2-regularize-factor=0.5                       --srand=0                     &quot;nnet3-am-copy --raw=true --learning-rate=0.1 --scale=1.0 exp/chain-skip/tdnn-f-cn/0.mdl - |&quot; exp/chain-skip/tdnn-f-cn/den.fst                     &quot;ark,bg:nnet3-chain-copy-egs                          --frame-shift=1                         ark:exp/chain-skip/tdnn-f-cn/egs/cegs.1.ark ark:- |                         nnet3-chain-shuffle-egs --buffer-size=5000                         --srand=0 ark:- ark:- | nnet3-chain-merge-egs                         --minibatch-size=64 ark:- ark:- |&quot;                     exp/chain-skip/tdnn-f-cn/1.1.raw</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br></pre></td><td class="code"><pre><code class="hljs sh">creating data/&#123;train,dev,<span class="hljs-built_in">test</span>&#125;<br>cleaning data/train<br>preparing scps and text <span class="hljs-keyword">in</span> data/train<br>cleaning data/dev<br>preparing scps and text <span class="hljs-keyword">in</span> data/dev<br>cleaning data/test<br>preparing scps and text <span class="hljs-keyword">in</span> data/test<br>creating test_phone <span class="hljs-keyword">for</span> phone decoding<br>steps/make_mfcc.sh --nj 8 --cmd run.pl data/mfcc/train exp/make_mfcc/train mfcc/train<br>utils/validate_data_dir.sh: Successfully validated data-directory data/mfcc/train<br>steps/make_mfcc.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_mfcc.sh: Succeeded creating MFCC features <span class="hljs-keyword">for</span> train<br>steps/compute_cmvn_stats.sh data/mfcc/train exp/mfcc_cmvn/train mfcc/train<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> train<br>steps/make_mfcc.sh --nj 8 --cmd run.pl data/mfcc/dev exp/make_mfcc/dev mfcc/dev<br>utils/validate_data_dir.sh: Successfully validated data-directory data/mfcc/dev<br>steps/make_mfcc.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_mfcc.sh: Succeeded creating MFCC features <span class="hljs-keyword">for</span> dev<br>steps/compute_cmvn_stats.sh data/mfcc/dev exp/mfcc_cmvn/dev mfcc/dev<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> dev<br>steps/make_mfcc.sh --nj 8 --cmd run.pl data/mfcc/test exp/make_mfcc/test mfcc/test<br>utils/validate_data_dir.sh: Successfully validated data-directory data/mfcc/test<br>steps/make_mfcc.sh: [info]: no segments file exists: assuming wav.scp indexed by utterance.<br>steps/make_mfcc.sh: Succeeded creating MFCC features <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span><br>steps/compute_cmvn_stats.sh data/mfcc/test exp/mfcc_cmvn/test mfcc/test<br>Succeeded creating CMVN stats <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span><br>make word graph ...<br>utils/prepare_lang.sh --position_dependent_phones <span class="hljs-literal">false</span> data/dict &lt;SPOKEN_NOISE&gt; data/local/lang data/lang<br>Checking data/dict/silence_phones.txt ...<br>--&gt; reading data/dict/silence_phones.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/silence_phones.txt is OK<br><br>Checking data/dict/optional_silence.txt ...<br>--&gt; reading data/dict/optional_silence.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/optional_silence.txt is OK<br><br>Checking data/dict/nonsilence_phones.txt ...<br>--&gt; reading data/dict/nonsilence_phones.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/nonsilence_phones.txt is OK<br><br>Checking disjoint: silence_phones.txt, nonsilence_phones.txt<br>--&gt; disjoint property is OK.<br><br>Checking data/dict/lexicon.txt<br>--&gt; reading data/dict/lexicon.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/lexicon.txt is OK<br><br>Checking data/dict/extra_questions.txt ...<br>--&gt; reading data/dict/extra_questions.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict/extra_questions.txt is OK<br>--&gt; SUCCESS [validating dictionary directory data/dict]<br><br>**Creating data/dict/lexiconp.txt from data/dict/lexicon.txt<br>fstaddselfloops data/lang/phones/wdisambig_phones.int data/lang/phones/wdisambig_words.int<br>prepare_lang.sh: validating output directory<br>utils/validate_lang.pl data/lang<br>Checking existence of separator file<br>separator file data/lang/subword_separator.txt is empty or does not exist, deal <span class="hljs-keyword">in</span> word <span class="hljs-keyword">case</span>.<br>Checking data/lang/phones.txt ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/lang/phones.txt is OK<br><br>Checking words.txt: <span class="hljs-comment">#0 ...</span><br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/lang/words.txt is OK<br><br>Checking disjoint: silence.txt, nonsilence.txt, disambig.txt ...<br>--&gt; silence.txt and nonsilence.txt are disjoint<br>--&gt; silence.txt and disambig.txt are disjoint<br>--&gt; disambig.txt and nonsilence.txt are disjoint<br>--&gt; disjoint property is OK<br><br>Checking sumation: silence.txt, nonsilence.txt, disambig.txt ...<br>--&gt; found no unexplainable phones <span class="hljs-keyword">in</span> phones.txt<br><br>Checking data/lang/phones/context_indep.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/context_indep.txt<br>--&gt; data/lang/phones/context_indep.int corresponds to data/lang/phones/context_indep.txt<br>--&gt; data/lang/phones/context_indep.csl corresponds to data/lang/phones/context_indep.txt<br>--&gt; data/lang/phones/context_indep.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/nonsilence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 217 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/nonsilence.txt<br>--&gt; data/lang/phones/nonsilence.int corresponds to data/lang/phones/nonsilence.txt<br>--&gt; data/lang/phones/nonsilence.csl corresponds to data/lang/phones/nonsilence.txt<br>--&gt; data/lang/phones/nonsilence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/silence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/silence.txt<br>--&gt; data/lang/phones/silence.int corresponds to data/lang/phones/silence.txt<br>--&gt; data/lang/phones/silence.csl corresponds to data/lang/phones/silence.txt<br>--&gt; data/lang/phones/silence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/optional_silence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.int corresponds to data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.csl corresponds to data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/disambig.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 57 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/disambig.txt<br>--&gt; data/lang/phones/disambig.int corresponds to data/lang/phones/disambig.txt<br>--&gt; data/lang/phones/disambig.csl corresponds to data/lang/phones/disambig.txt<br>--&gt; data/lang/phones/disambig.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang/phones/roots.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 218 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/roots.txt<br>--&gt; data/lang/phones/roots.int corresponds to data/lang/phones/roots.txt<br>--&gt; data/lang/phones/roots.&#123;txt, int&#125; are OK<br><br>Checking data/lang/phones/sets.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 218 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/sets.txt<br>--&gt; data/lang/phones/sets.int corresponds to data/lang/phones/sets.txt<br>--&gt; data/lang/phones/sets.&#123;txt, int&#125; are OK<br><br>Checking data/lang/phones/extra_questions.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 7 entry/entries <span class="hljs-keyword">in</span> data/lang/phones/extra_questions.txt<br>--&gt; data/lang/phones/extra_questions.int corresponds to data/lang/phones/extra_questions.txt<br>--&gt; data/lang/phones/extra_questions.&#123;txt, int&#125; are OK<br><br>Checking optional_silence.txt ...<br>--&gt; reading data/lang/phones/optional_silence.txt<br>--&gt; data/lang/phones/optional_silence.txt is OK<br><br>Checking disambiguation symbols: <span class="hljs-comment">#0 and #1</span><br>--&gt; data/lang/phones/disambig.txt has <span class="hljs-string">&quot;#0&quot;</span> and <span class="hljs-string">&quot;#1&quot;</span><br>--&gt; data/lang/phones/disambig.txt is OK<br><br>Checking topo ...<br><br>Checking word-level disambiguation symbols...<br>--&gt; data/lang/phones/wdisambig.txt exists (newer prepare_lang.sh)<br>Checking data/lang/oov.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang/oov.txt<br>--&gt; data/lang/oov.int corresponds to data/lang/oov.txt<br>--&gt; data/lang/oov.&#123;txt, int&#125; are OK<br><br>--&gt; data/lang/L.fst is olabel sorted<br>--&gt; data/lang/L_disambig.fst is olabel sorted<br>--&gt; SUCCESS [validating lang directory data/lang]<br>Converting <span class="hljs-string">&#x27;data/graph/word.3gram.lm.gz&#x27;</span> to FST<br>arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=data/graph/lang/words.txt - data/graph/lang/G.fst</span><br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:94) Reading \data\ section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:149) Reading \1-grams: section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:149) Reading \2-grams: section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:149) Reading \3-grams: section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:RemoveRedundantStates():arpa-lm-compiler.cc:359) Reduced num-states from 3076353 to 454251<br>fstisstochastic data/graph/lang/G.fst<br>-7.27093e-08 -0.832396<br>Succeeded <span class="hljs-keyword">in</span> formatting LM: <span class="hljs-string">&#x27;data/graph/word.3gram.lm.gz&#x27;</span><br>make phone graph ...<br>utils/prepare_lang.sh --position_dependent_phones <span class="hljs-literal">false</span> data/dict_phone &lt;SPOKEN_NOISE&gt; data/local/lang_phone data/lang_phone<br>Checking data/dict_phone/silence_phones.txt ...<br>--&gt; reading data/dict_phone/silence_phones.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict_phone/silence_phones.txt is OK<br><br>Checking data/dict_phone/optional_silence.txt ...<br>--&gt; reading data/dict_phone/optional_silence.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict_phone/optional_silence.txt is OK<br><br>Checking data/dict_phone/nonsilence_phones.txt ...<br>--&gt; reading data/dict_phone/nonsilence_phones.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict_phone/nonsilence_phones.txt is OK<br><br>Checking disjoint: silence_phones.txt, nonsilence_phones.txt<br>--&gt; disjoint property is OK.<br><br>Checking data/dict_phone/lexicon.txt<br>--&gt; reading data/dict_phone/lexicon.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict_phone/lexicon.txt is OK<br><br>Checking data/dict_phone/extra_questions.txt ...<br>--&gt; reading data/dict_phone/extra_questions.txt<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/dict_phone/extra_questions.txt is OK<br>--&gt; SUCCESS [validating dictionary directory data/dict_phone]<br><br>**Creating data/dict_phone/lexiconp.txt from data/dict_phone/lexicon.txt<br>fstaddselfloops data/lang_phone/phones/wdisambig_phones.int data/lang_phone/phones/wdisambig_words.int<br>prepare_lang.sh: validating output directory<br>utils/validate_lang.pl data/lang_phone<br>Checking existence of separator file<br>separator file data/lang_phone/subword_separator.txt is empty or does not exist, deal <span class="hljs-keyword">in</span> word <span class="hljs-keyword">case</span>.<br>Checking data/lang_phone/phones.txt ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/lang_phone/phones.txt is OK<br><br>Checking words.txt: <span class="hljs-comment">#0 ...</span><br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; data/lang_phone/words.txt is OK<br><br>Checking disjoint: silence.txt, nonsilence.txt, disambig.txt ...<br>--&gt; silence.txt and nonsilence.txt are disjoint<br>--&gt; silence.txt and disambig.txt are disjoint<br>--&gt; disambig.txt and nonsilence.txt are disjoint<br>--&gt; disjoint property is OK<br><br>Checking sumation: silence.txt, nonsilence.txt, disambig.txt ...<br>--&gt; found no unexplainable phones <span class="hljs-keyword">in</span> phones.txt<br><br>Checking data/lang_phone/phones/context_indep.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/context_indep.txt<br>--&gt; data/lang_phone/phones/context_indep.int corresponds to data/lang_phone/phones/context_indep.txt<br>--&gt; data/lang_phone/phones/context_indep.csl corresponds to data/lang_phone/phones/context_indep.txt<br>--&gt; data/lang_phone/phones/context_indep.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang_phone/phones/nonsilence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 217 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/nonsilence.txt<br>--&gt; data/lang_phone/phones/nonsilence.int corresponds to data/lang_phone/phones/nonsilence.txt<br>--&gt; data/lang_phone/phones/nonsilence.csl corresponds to data/lang_phone/phones/nonsilence.txt<br>--&gt; data/lang_phone/phones/nonsilence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang_phone/phones/silence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/silence.txt<br>--&gt; data/lang_phone/phones/silence.int corresponds to data/lang_phone/phones/silence.txt<br>--&gt; data/lang_phone/phones/silence.csl corresponds to data/lang_phone/phones/silence.txt<br>--&gt; data/lang_phone/phones/silence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang_phone/phones/optional_silence.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/optional_silence.txt<br>--&gt; data/lang_phone/phones/optional_silence.int corresponds to data/lang_phone/phones/optional_silence.txt<br>--&gt; data/lang_phone/phones/optional_silence.csl corresponds to data/lang_phone/phones/optional_silence.txt<br>--&gt; data/lang_phone/phones/optional_silence.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang_phone/phones/disambig.&#123;txt, int, csl&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 4 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/disambig.txt<br>--&gt; data/lang_phone/phones/disambig.int corresponds to data/lang_phone/phones/disambig.txt<br>--&gt; data/lang_phone/phones/disambig.csl corresponds to data/lang_phone/phones/disambig.txt<br>--&gt; data/lang_phone/phones/disambig.&#123;txt, int, csl&#125; are OK<br><br>Checking data/lang_phone/phones/roots.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 218 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/roots.txt<br>--&gt; data/lang_phone/phones/roots.int corresponds to data/lang_phone/phones/roots.txt<br>--&gt; data/lang_phone/phones/roots.&#123;txt, int&#125; are OK<br><br>Checking data/lang_phone/phones/sets.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 218 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/sets.txt<br>--&gt; data/lang_phone/phones/sets.int corresponds to data/lang_phone/phones/sets.txt<br>--&gt; data/lang_phone/phones/sets.&#123;txt, int&#125; are OK<br><br>Checking data/lang_phone/phones/extra_questions.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 7 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/phones/extra_questions.txt<br>--&gt; data/lang_phone/phones/extra_questions.int corresponds to data/lang_phone/phones/extra_questions.txt<br>--&gt; data/lang_phone/phones/extra_questions.&#123;txt, int&#125; are OK<br><br>Checking optional_silence.txt ...<br>--&gt; reading data/lang_phone/phones/optional_silence.txt<br>--&gt; data/lang_phone/phones/optional_silence.txt is OK<br><br>Checking disambiguation symbols: <span class="hljs-comment">#0 and #1</span><br>--&gt; data/lang_phone/phones/disambig.txt has <span class="hljs-string">&quot;#0&quot;</span> and <span class="hljs-string">&quot;#1&quot;</span><br>--&gt; data/lang_phone/phones/disambig.txt is OK<br><br>Checking topo ...<br><br>Checking word-level disambiguation symbols...<br>--&gt; data/lang_phone/phones/wdisambig.txt exists (newer prepare_lang.sh)<br>Checking data/lang_phone/oov.&#123;txt, int&#125; ...<br>--&gt; text seems to be UTF-8 or ASCII, checking whitespaces<br>--&gt; text contains only allowed whitespaces<br>--&gt; 1 entry/entries <span class="hljs-keyword">in</span> data/lang_phone/oov.txt<br>--&gt; data/lang_phone/oov.int corresponds to data/lang_phone/oov.txt<br>--&gt; data/lang_phone/oov.&#123;txt, int&#125; are OK<br><br>--&gt; data/lang_phone/L.fst is olabel sorted<br>--&gt; data/lang_phone/L_disambig.fst is olabel sorted<br>--&gt; SUCCESS [validating lang directory data/lang_phone]<br>Converting <span class="hljs-string">&#x27;data/graph_phone/phone.3gram.lm.gz&#x27;</span> to FST<br>arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=data/graph_phone/lang/words.txt - data/graph_phone/lang/G.fst</span><br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:94) Reading \data\ section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:149) Reading \1-grams: section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:149) Reading \2-grams: section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:Read():arpa-file-parser.cc:149) Reading \3-grams: section.<br>LOG (arpa2fst[5.5.1038~1-9af2c]:RemoveRedundantStates():arpa-lm-compiler.cc:359) Reduced num-states from 5709 to 4848<br>fstisstochastic data/graph_phone/lang/G.fst<br>1.86678e-07 -3.76792<br>Succeeded <span class="hljs-keyword">in</span> formatting LM: <span class="hljs-string">&#x27;data/graph_phone/phone.3gram.lm.gz&#x27;</span><br>steps/train_mono.sh --boost-silence 1.25 --nj 8 --cmd run.pl data/mfcc/train data/lang exp/mono<br>steps/train_mono.sh: Initializing monophone system.<br>steps/train_mono.sh: Compiling training graphs<br>steps/train_mono.sh: Aligning data equally (pass 0)<br>steps/train_mono.sh: Pass 1<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 2<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 3<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 4<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 5<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 6<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 7<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 8<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 9<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 10<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 11<br>steps/train_mono.sh: Pass 12<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 13<br>steps/train_mono.sh: Pass 14<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 15<br>steps/train_mono.sh: Pass 16<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 17<br>steps/train_mono.sh: Pass 18<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 19<br>steps/train_mono.sh: Pass 20<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 21<br>steps/train_mono.sh: Pass 22<br>steps/train_mono.sh: Pass 23<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 24<br>steps/train_mono.sh: Pass 25<br>steps/train_mono.sh: Pass 26<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 27<br>steps/train_mono.sh: Pass 28<br>steps/train_mono.sh: Pass 29<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 30<br>steps/train_mono.sh: Pass 31<br>steps/train_mono.sh: Pass 32<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 33<br>steps/train_mono.sh: Pass 34<br>steps/train_mono.sh: Pass 35<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 36<br>steps/train_mono.sh: Pass 37<br>steps/train_mono.sh: Pass 38<br>steps/train_mono.sh: Aligning data<br>steps/train_mono.sh: Pass 39<br>steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/mono<br>steps/diagnostic/analyze_alignments.sh: see stats <span class="hljs-keyword">in</span> exp/mono/log/analyze_alignments.log<br>56 warnings <span class="hljs-keyword">in</span> exp/mono/log/acc.*.*.<span class="hljs-built_in">log</span><br>3976 warnings <span class="hljs-keyword">in</span> exp/mono/log/align.*.*.<span class="hljs-built_in">log</span><br>1053 warnings <span class="hljs-keyword">in</span> exp/mono/log/update.*.<span class="hljs-built_in">log</span><br>exp/mono: nj=8 align prob=-100.09 over 25.49h [retry=0.2%, fail=0.0%] states=656 gauss=990<br>steps/train_mono.sh: Done training monophone system <span class="hljs-keyword">in</span> exp/mono<br>steps/align_si.sh --boost-silence 1.25 --nj 8 --cmd run.pl data/mfcc/train data/lang exp/mono exp/mono_ali<br>using monophone to generate graph<br>WARNING: the --mono, --left-biphone and --quinphone options are now deprecated and ignored.<br>tree-info exp/mono/tree<br>steps/align_si.sh: feature <span class="hljs-built_in">type</span> is delta<br>steps/align_si.sh: aligning data <span class="hljs-keyword">in</span> data/mfcc/train using model from exp/mono, putting alignments <span class="hljs-keyword">in</span> exp/mono_ali<br>tree-info exp/mono/tree<br>fstpushspecial<br>fstdeterminizestar --use-log=<span class="hljs-literal">true</span><br>fstminimizeencoded<br>fsttablecompose data/graph/lang/L_disambig.fst data/graph/lang/G.fst<br>steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/mono_ali<br>steps/diagnostic/analyze_alignments.sh: see stats <span class="hljs-keyword">in</span> exp/mono_ali/log/analyze_alignments.log<br>steps/align_si.sh: <span class="hljs-keyword">done</span> aligning data.<br>steps/train_deltas.sh --boost-silence 1.25 --cmd run.pl 2000 10000 data/mfcc/train data/lang exp/mono_ali exp/tri1<br>steps/train_deltas.sh: accumulating tree stats<br>steps/train_deltas.sh: getting questions <span class="hljs-keyword">for</span> tree-building, via clustering<br>steps/train_deltas.sh: building the tree<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 177 with no stats; corresponding phone list: 178<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 182 with no stats; corresponding phone list: 183<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204<br>WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209<br>** The warnings above about <span class="hljs-string">&#x27;no stats&#x27;</span> generally mean you have phones **<br>** (or <span class="hljs-built_in">groups</span> of phones) <span class="hljs-keyword">in</span> your phone <span class="hljs-built_in">set</span> that had no corresponding data. **<br>** You should probably figure out whether something went wrong, **<br>** or whether your data just doesn<span class="hljs-string">&#x27;t happen to have examples of those **</span><br><span class="hljs-string">** phones. **</span><br><span class="hljs-string">steps/train_deltas.sh: converting alignments from exp/mono_ali to use current tree</span><br><span class="hljs-string">steps/train_deltas.sh: compiling graphs of transcripts</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 1</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 2</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 3</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 4</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 5</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 6</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 7</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 8</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 9</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 10</span><br><span class="hljs-string">steps/train_deltas.sh: aligning data</span><br><span class="hljs-string">fstisstochastic data/graph/lang/tmp/LG.fst</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 11</span><br><span class="hljs-string">-0.0480882 -0.0488869</span><br><span class="hljs-string">[info]: LG not stochastic.</span><br><span class="hljs-string">fstcomposecontext --context-size=1 --central-position=0 --read-disambig-syms=data/graph/lang/phones/disambig.int --write-disambig-syms=data/graph/lang/tmp/disambig_ilabels_1_0.int data/graph/lang/tmp/ilabels_1_0.12502 data/graph/lang/tmp/LG.fst</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 12</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 13</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 14</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 15</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 16</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 17</span><br><span class="hljs-string">fstisstochastic data/graph/lang/tmp/CLG_1_0.fst</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 18</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 19</span><br><span class="hljs-string">-0.0480882 -0.0488869</span><br><span class="hljs-string">[info]: CLG not stochastic.</span><br><span class="hljs-string">make-h-transducer --disambig-syms-out=exp/mono/graph_word/disambig_tid.int --transition-scale=1.0 data/graph/lang/tmp/ilabels_1_0 exp/mono/tree exp/mono/final.mdl</span><br><span class="hljs-string">fstrmsymbols exp/mono/graph_word/disambig_tid.int</span><br><span class="hljs-string">fsttablecompose exp/mono/graph_word/Ha.fst data/graph/lang/tmp/CLG_1_0.fst</span><br><span class="hljs-string">fstrmepslocal</span><br><span class="hljs-string">fstminimizeencoded</span><br><span class="hljs-string">fstdeterminizestar --use-log=true</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 20</span><br><span class="hljs-string">steps/train_deltas.sh: aligning data</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 21</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 22</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 23</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 24</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 25</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 26</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 27</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 28</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 29</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 30</span><br><span class="hljs-string">steps/train_deltas.sh: aligning data</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 31</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 32</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 33</span><br><span class="hljs-string">steps/train_deltas.sh: training pass 34</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri1</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri1/log/analyze_alignments.log</span><br><span class="hljs-string">93 warnings in exp/tri1/log/align.*.*.log</span><br><span class="hljs-string">74 warnings in exp/tri1/log/acc.*.*.log</span><br><span class="hljs-string">9 warnings in exp/tri1/log/init_model.log</span><br><span class="hljs-string">1 warnings in exp/tri1/log/build_tree.log</span><br><span class="hljs-string">281 warnings in exp/tri1/log/update.*.log</span><br><span class="hljs-string">9 warnings in exp/tri1/log/questions.log</span><br><span class="hljs-string">1 warnings in exp/tri1/log/compile_questions.log</span><br><span class="hljs-string">exp/tri1: nj=8 align prob=-96.76 over 25.48h [retry=0.4%, fail=0.0%] states=1680 gauss=10026 tree-impr=4.80</span><br><span class="hljs-string">steps/train_deltas.sh: Done training system with delta+delta-delta features in exp/tri1</span><br><span class="hljs-string">steps/align_si.sh --nj 8 --cmd run.pl data/mfcc/train data/lang exp/tri1 exp/tri1_ali</span><br><span class="hljs-string">tree-info exp/tri1/tree</span><br><span class="hljs-string">tree-info exp/tri1/tree</span><br><span class="hljs-string">fstcomposecontext --context-size=3 --central-position=1 --read-disambig-syms=data/graph/lang/phones/disambig.int --write-disambig-syms=data/graph/lang/tmp/disambig_ilabels_3_1.int data/graph/lang/tmp/ilabels_3_1.19467 data/graph/lang/tmp/LG.fst</span><br><span class="hljs-string">steps/align_si.sh: feature type is delta</span><br><span class="hljs-string">steps/align_si.sh: aligning data in data/mfcc/train using model from exp/tri1, putting alignments in exp/tri1_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri1_ali</span><br><span class="hljs-string">fstisstochastic exp/mono/graph_word/HCLGa.fst</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri1_ali/log/analyze_alignments.log</span><br><span class="hljs-string">steps/align_si.sh: done aligning data.</span><br><span class="hljs-string">steps/train_lda_mllt.sh --cmd run.pl --splice-opts --left-context=3 --right-context=3 2500 15000 data/mfcc/train data/lang exp/tri1_ali exp/tri2b</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Accumulating LDA statistics.</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Accumulating tree stats</span><br><span class="hljs-string">0.644531 -0.0974261</span><br><span class="hljs-string">HCLGa is not stochastic</span><br><span class="hljs-string">add-self-loops --self-loop-scale=0.1 --reorder=true exp/mono/final.mdl exp/mono/graph_word/HCLGa.fst</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">fstisstochastic data/graph/lang/tmp/CLG_3_1.fst</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Building the tree</span><br><span class="hljs-string">0 -0.0488869</span><br><span class="hljs-string">[info]: CLG not stochastic.</span><br><span class="hljs-string">make-h-transducer --disambig-syms-out=exp/tri1/graph_word/disambig_tid.int --transition-scale=1.0 data/graph/lang/tmp/ilabels_3_1 exp/tri1/tree exp/tri1/final.mdl</span><br><span class="hljs-string">fstrmsymbols exp/tri1/graph_word/disambig_tid.int</span><br><span class="hljs-string">fstrmepslocal</span><br><span class="hljs-string">fstminimizeencoded</span><br><span class="hljs-string">fstdeterminizestar --use-log=true</span><br><span class="hljs-string">fsttablecompose exp/tri1/graph_word/Ha.fst data/graph/lang/tmp/CLG_3_1.fst</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 177 with no stats; corresponding phone list: 178</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209</span><br><span class="hljs-string">This is a bad warning.</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Converting alignments from exp/tri1_ali to use current tree</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Compiling graphs of transcripts</span><br><span class="hljs-string">Training pass 1</span><br><span class="hljs-string">Training pass 2</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 3</span><br><span class="hljs-string">Training pass 4</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 5</span><br><span class="hljs-string">Training pass 6</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 7</span><br><span class="hljs-string">Training pass 8</span><br><span class="hljs-string">Training pass 9</span><br><span class="hljs-string">Training pass 10</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">steps/decode.sh --cmd run.pl --nj 8 exp/mono/graph_word data/mfcc/test exp/mono/decode_test_word</span><br><span class="hljs-string">decode.sh: feature type is delta</span><br><span class="hljs-string">Training pass 11</span><br><span class="hljs-string">Training pass 12</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Estimating MLLT</span><br><span class="hljs-string">Training pass 13</span><br><span class="hljs-string">Training pass 14</span><br><span class="hljs-string">Training pass 15</span><br><span class="hljs-string">Training pass 16</span><br><span class="hljs-string">Training pass 17</span><br><span class="hljs-string">Training pass 18</span><br><span class="hljs-string">Training pass 19</span><br><span class="hljs-string">Training pass 20</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Training pass 21</span><br><span class="hljs-string">Training pass 22</span><br><span class="hljs-string">Training pass 23</span><br><span class="hljs-string">Training pass 24</span><br><span class="hljs-string">Training pass 25</span><br><span class="hljs-string">Training pass 26</span><br><span class="hljs-string">Training pass 27</span><br><span class="hljs-string">Training pass 28</span><br><span class="hljs-string">Training pass 29</span><br><span class="hljs-string">Training pass 30</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Training pass 31</span><br><span class="hljs-string">fstisstochastic exp/tri1/graph_word/HCLGa.fst</span><br><span class="hljs-string">Training pass 32</span><br><span class="hljs-string">Training pass 33</span><br><span class="hljs-string">Training pass 34</span><br><span class="hljs-string">0.644531 -0.128805</span><br><span class="hljs-string">HCLGa is not stochastic</span><br><span class="hljs-string">add-self-loops --self-loop-scale=0.1 --reorder=true exp/tri1/final.mdl exp/tri1/graph_word/HCLGa.fst</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri2b</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri2b/log/analyze_alignments.log</span><br><span class="hljs-string">102 warnings in exp/tri2b/log/acc.*.*.log</span><br><span class="hljs-string">9 warnings in exp/tri2b/log/init_model.log</span><br><span class="hljs-string">272 warnings in exp/tri2b/log/update.*.log</span><br><span class="hljs-string">1 warnings in exp/tri2b/log/compile_questions.log</span><br><span class="hljs-string">3 warnings in exp/tri2b/log/lda_acc.*.log</span><br><span class="hljs-string">147 warnings in exp/tri2b/log/align.*.*.log</span><br><span class="hljs-string">1 warnings in exp/tri2b/log/build_tree.log</span><br><span class="hljs-string">8 warnings in exp/tri2b/log/questions.log</span><br><span class="hljs-string">exp/tri2b: nj=8 align prob=-48.15 over 25.48h [retry=0.5%, fail=0.0%] states=2080 gauss=15034 tree-impr=4.34 lda-sum=23.95 mllt:impr,logdet=1.18,1.68</span><br><span class="hljs-string">steps/train_lda_mllt.sh: Done training system with LDA+MLLT features in exp/tri2b</span><br><span class="hljs-string">steps/align_si.sh --nj 8 --cmd run.pl --use-graphs true data/mfcc/train data/lang exp/tri2b exp/tri2b_ali</span><br><span class="hljs-string">tree-info exp/tri2b/tree</span><br><span class="hljs-string">tree-info exp/tri2b/tree</span><br><span class="hljs-string">make-h-transducer --disambig-syms-out=exp/tri2b/graph_word/disambig_tid.int --transition-scale=1.0 data/graph/lang/tmp/ilabels_3_1 exp/tri2b/tree exp/tri2b/final.mdl</span><br><span class="hljs-string">steps/align_si.sh: feature type is lda</span><br><span class="hljs-string">steps/align_si.sh: aligning data in data/mfcc/train using model from exp/tri2b, putting alignments in exp/tri2b_ali</span><br><span class="hljs-string">fstminimizeencoded</span><br><span class="hljs-string">fstrmsymbols exp/tri2b/graph_word/disambig_tid.int</span><br><span class="hljs-string">fsttablecompose exp/tri2b/graph_word/Ha.fst data/graph/lang/tmp/CLG_3_1.fst</span><br><span class="hljs-string">fstrmepslocal</span><br><span class="hljs-string">fstdeterminizestar --use-log=true</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri2b_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri2b_ali/log/analyze_alignments.log</span><br><span class="hljs-string">steps/align_si.sh: done aligning data.</span><br><span class="hljs-string">steps/train_sat.sh --cmd run.pl 2500 15000 data/mfcc/train data/lang exp/tri2b_ali exp/tri3b</span><br><span class="hljs-string">steps/train_sat.sh: feature type is lda</span><br><span class="hljs-string">steps/train_sat.sh: obtaining initial fMLLR transforms since not present in exp/tri2b_ali</span><br><span class="hljs-string">steps/train_sat.sh: Accumulating tree stats</span><br><span class="hljs-string">steps/train_sat.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">steps/train_sat.sh: Building the tree</span><br><span class="hljs-string">steps/train_sat.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 109 with no stats; corresponding phone list: 110</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 121 with no stats; corresponding phone list: 122</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 163 with no stats; corresponding phone list: 164</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 175 with no stats; corresponding phone list: 176</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 176 with no stats; corresponding phone list: 177</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 177 with no stats; corresponding phone list: 178</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 203 with no stats; corresponding phone list: 204</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmm():gmm-init-model.cc:55) Tree has pdf-id 208 with no stats; corresponding phone list: 209</span><br><span class="hljs-string">This is a bad warning.</span><br><span class="hljs-string">steps/train_sat.sh: Converting alignments from exp/tri2b_ali to use current tree</span><br><span class="hljs-string">steps/train_sat.sh: Compiling graphs of transcripts</span><br><span class="hljs-string">Pass 1</span><br><span class="hljs-string">Pass 2</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 3</span><br><span class="hljs-string">Pass 4</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 5</span><br><span class="hljs-string">Pass 6</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 7</span><br><span class="hljs-string">Pass 8</span><br><span class="hljs-string">Pass 9</span><br><span class="hljs-string">Pass 10</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Pass 11</span><br><span class="hljs-string">Pass 12</span><br><span class="hljs-string">Estimating fMLLR transforms</span><br><span class="hljs-string">Pass 13</span><br><span class="hljs-string">Pass 14</span><br><span class="hljs-string">Pass 15</span><br><span class="hljs-string">Pass 16</span><br><span class="hljs-string">Pass 17</span><br><span class="hljs-string">Pass 18</span><br><span class="hljs-string">Pass 19</span><br><span class="hljs-string">Pass 20</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Pass 21</span><br><span class="hljs-string">Pass 22</span><br><span class="hljs-string">Pass 23</span><br><span class="hljs-string">Pass 24</span><br><span class="hljs-string">Pass 25</span><br><span class="hljs-string">Pass 26</span><br><span class="hljs-string">Pass 27</span><br><span class="hljs-string">Pass 28</span><br><span class="hljs-string">Pass 29</span><br><span class="hljs-string">Pass 30</span><br><span class="hljs-string">Aligning data</span><br><span class="hljs-string">Pass 31</span><br><span class="hljs-string">Pass 32</span><br><span class="hljs-string">Pass 33</span><br><span class="hljs-string">Pass 34</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri3b</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri3b/log/analyze_alignments.log</span><br><span class="hljs-string">8 warnings in exp/tri3b/log/est_alimdl.log</span><br><span class="hljs-string">17 warnings in exp/tri3b/log/fmllr.*.*.log</span><br><span class="hljs-string">273 warnings in exp/tri3b/log/update.*.log</span><br><span class="hljs-string">1 warnings in exp/tri3b/log/compile_questions.log</span><br><span class="hljs-string">9 warnings in exp/tri3b/log/init_model.log</span><br><span class="hljs-string">184 warnings in exp/tri3b/log/align.*.*.log</span><br><span class="hljs-string">8 warnings in exp/tri3b/log/questions.log</span><br><span class="hljs-string">137 warnings in exp/tri3b/log/acc.*.*.log</span><br><span class="hljs-string">1 warnings in exp/tri3b/log/build_tree.log</span><br><span class="hljs-string">steps/train_sat.sh: Likelihood evolution:</span><br><span class="hljs-string">-49.6847 -49.47 -49.3759 -49.1992 -48.6433 -48.0719 -47.7074 -47.4761 -47.3067 -46.8607 -46.6761 -46.4768 -46.3598 -46.2623 -46.1698 -46.0852 -46.0069 -45.9349 -45.8688 -45.714 -45.6215 -45.5655 -45.513 -45.4636 -45.4176 -45.372 -45.3275 -45.2854 -45.2456 -45.1544 -45.0968 -45.0729 -45.0593 -45.05</span><br><span class="hljs-string">exp/tri3b: nj=8 align prob=-47.86 over 25.48h [retry=0.6%, fail=0.0%] states=2096 gauss=15027 fmllr-impr=2.42 over 18.96h tree-impr=6.40</span><br><span class="hljs-string">steps/train_sat.sh: done training SAT system in exp/tri3b</span><br><span class="hljs-string">steps/align_fmllr.sh --nj 8 --cmd run.pl data/mfcc/train data/lang exp/tri3b exp/tri3b_ali</span><br><span class="hljs-string">tree-info exp/tri3b/tree</span><br><span class="hljs-string">tree-info exp/tri3b/tree</span><br><span class="hljs-string">make-h-transducer --disambig-syms-out=exp/tri3b/graph_word/disambig_tid.int --transition-scale=1.0 data/graph/lang/tmp/ilabels_3_1 exp/tri3b/tree exp/tri3b/final.mdl</span><br><span class="hljs-string">steps/align_fmllr.sh: feature type is lda</span><br><span class="hljs-string">steps/align_fmllr.sh: compiling training graphs</span><br><span class="hljs-string">fstrmepslocal</span><br><span class="hljs-string">fstrmsymbols exp/tri3b/graph_word/disambig_tid.int</span><br><span class="hljs-string">fsttablecompose exp/tri3b/graph_word/Ha.fst data/graph/lang/tmp/CLG_3_1.fst</span><br><span class="hljs-string">fstminimizeencoded</span><br><span class="hljs-string">fstdeterminizestar --use-log=true</span><br><span class="hljs-string">steps/align_fmllr.sh: aligning data in data/mfcc/train using exp/tri3b/final.alimdl and speaker-independent features.</span><br><span class="hljs-string">ERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstdeterminizestar[5.5.1038~1-9af2c]:ReadFstKaldi():kaldi-fst-io.cc:35) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7f8837bb21c3]</span><br><span class="hljs-string">fstdeterminizestar(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x55a41a5396fd]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldi(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)+0x1bc) [0x7f8837c1463f]</span><br><span class="hljs-string">fstdeterminizestar(main+0x2c1) [0x55a41a5374d9]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f88374b1083]</span><br><span class="hljs-string">fstdeterminizestar(_start+0x2e) [0x55a41a53714e]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstrmsymbols[5.5.1038~1-9af2c]:ReadFstKaldiGeneric():kaldi-fst-io.cc:59) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7f16484451c3]</span><br><span class="hljs-string">fstrmsymbols(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x55794475d89b]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldiGeneric(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)+0x1cd) [0x7f16484a68c0]</span><br><span class="hljs-string">fstrmsymbols(main+0x3c1) [0x55794475cc2a]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f1647eb6083]</span><br><span class="hljs-string">fstrmsymbols(_start+0x2e) [0x55794475c7ae]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstrmepslocal[5.5.1038~1-9af2c]:ReadFstKaldi():kaldi-fst-io.cc:35) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7fcddd5301c3]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x7fcddd5939ab]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldi(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)+0x1bc) [0x7fcddd59263f]</span><br><span class="hljs-string">fstrmepslocal(main+0x1ff) [0x5608e3aebb68]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7fcddce52083]</span><br><span class="hljs-string">fstrmepslocal(_start+0x2e) [0x5608e3aeb8ae]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstminimizeencoded[5.5.1038~1-9af2c]:ReadFstKaldi():kaldi-fst-io.cc:35) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7f263e3761c3]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x7f263e3d99ab]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldi(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)+0x1bc) [0x7f263e3d863f]</span><br><span class="hljs-string">fstminimizeencoded(main+0x137) [0x5610c27c2b20]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f263dde7083]</span><br><span class="hljs-string">fstminimizeencoded(_start+0x2e) [0x5610c27c292e]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorsteps/align_fmllr.sh: computing fMLLR transforms</span><br><span class="hljs-string">steps/align_fmllr.sh: doing final alignment.</span><br><span class="hljs-string">steps/align_fmllr.sh: done aligning data.</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh --cmd run.pl data/lang exp/tri3b_ali</span><br><span class="hljs-string">steps/diagnostic/analyze_alignments.sh: see stats in exp/tri3b_ali/log/analyze_alignments.log</span><br><span class="hljs-string">61 warnings in exp/tri3b_ali/log/align_pass2.*.log</span><br><span class="hljs-string">45 warnings in exp/tri3b_ali/log/align_pass1.*.log</span><br><span class="hljs-string">3 warnings in exp/tri3b_ali/log/fmllr.*.log</span><br><span class="hljs-string">steps/train_quick.sh --cmd run.pl 4200 40000 data/mfcc/train data/lang exp/tri3b_ali exp/tri4b</span><br><span class="hljs-string">steps/train_quick.sh: feature type is lda</span><br><span class="hljs-string">steps/train_quick.sh: using transforms from exp/tri3b_ali</span><br><span class="hljs-string">steps/train_quick.sh: accumulating tree stats</span><br><span class="hljs-string">steps/train_quick.sh: Getting questions for tree clustering.</span><br><span class="hljs-string">steps/train_quick.sh: Building the tree</span><br><span class="hljs-string">steps/train_quick.sh: Initializing the model</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 109 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 121 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 163 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 175 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 176 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 177 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 203 of new tree has no stats.</span><br><span class="hljs-string">WARNING (gmm-init-model[5.5.1038~1-9af2c]:InitAmGmmFromOld():gmm-init-model.cc:147) Leaf 208 of new tree has no stats.</span><br><span class="hljs-string">steps/train_quick.sh: This is a bad warning.</span><br><span class="hljs-string">steps/train_quick.sh: mixing up old model.</span><br><span class="hljs-string">steps/train_quick.sh: converting old alignments</span><br><span class="hljs-string">steps/train_quick.sh: compiling training graphs</span><br><span class="hljs-string">steps/train_quick.sh: pass 1</span><br><span class="hljs-string">steps/train_quick.sh: pass 2</span><br><span class="hljs-string">steps/train_quick.sh: pass 3</span><br><span class="hljs-string">steps/train_quick.sh: pass 4</span><br><span class="hljs-string">steps/train_quick.sh: pass 5</span><br><span class="hljs-string">steps/train_quick.sh: pass 6</span><br><span class="hljs-string">steps/train_quick.sh: pass 7</span><br><span class="hljs-string">steps/train_quick.sh: pass 8</span><br><span class="hljs-string">steps/train_quick.sh: pass 9</span><br><span class="hljs-string">steps/train_quick.sh: pass 10</span><br><span class="hljs-string">steps/train_quick.sh: aligning data</span><br><span class="hljs-string">steps/train_quick.sh: pass 11</span><br><span class="hljs-string">steps/train_quick.sh: pass 12</span><br><span class="hljs-string">steps/train_quick.sh: pass 13</span><br><span class="hljs-string">steps/train_quick.sh: pass 14</span><br><span class="hljs-string">steps/train_quick.sh: pass 15</span><br><span class="hljs-string">steps/train_quick.sh: aligning data</span><br><span class="hljs-string">steps/train_quick.sh: pass 16</span><br><span class="hljs-string">steps/train_quick.sh: pass 17</span><br><span class="hljs-string">steps/train_quick.sh: pass 18</span><br><span class="hljs-string">steps/train_quick.sh: pass 19</span><br><span class="hljs-string">steps/train_quick.sh: estimating alignment model</span><br><span class="hljs-string">ERROR: VectorFst::Read: Unexpected end of file: &lt;unspecified&gt;</span><br><span class="hljs-string">ERROR (fstdeterminizestar[5.5.1038~1-9af2c]:ReadFstKaldi():kaldi-fst-io.cc:40) Could not read fst from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7f81a0f251c3]</span><br><span class="hljs-string">fstdeterminizestar(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x5559a38006fd]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldi(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)+0x586) [0x7f81a0f87a09]</span><br><span class="hljs-string">fstdeterminizestar(main+0x2c1) [0x5559a37fe4d9]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f81a0824083]</span><br><span class="hljs-string">fstdeterminizestar(_start+0x2e) [0x5559a37fe14e]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstrmsymbols[5.5.1038~1-9af2c]:ReadFstKaldiGeneric():kaldi-fst-io.cc:59) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7f4c0cae81c3]</span><br><span class="hljs-string">fstrmsymbols(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x561cab70389b]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldiGeneric(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)+0x1cd) [0x7f4c0cb498c0]</span><br><span class="hljs-string">fstrmsymbols(main+0x3c1) [0x561cab702c2a]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f4c0c559083]</span><br><span class="hljs-string">fstrmsymbols(_start+0x2e) [0x561cab7027ae]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstrmepslocal[5.5.1038~1-9af2c]:ReadFstKaldi():kaldi-fst-io.cc:35) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7f72dc7501c3]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x7f72dc7b39ab]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldi(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)+0x1bc) [0x7f72dc7b263f]</span><br><span class="hljs-string">fstrmepslocal(main+0x1ff) [0x564dabc95b68]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f72dc072083]</span><br><span class="hljs-string">fstrmepslocal(_start+0x2e) [0x564dabc958ae]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorERROR: FstHeader::Read: Bad FST header: -</span><br><span class="hljs-string">ERROR (fstminimizeencoded[5.5.1038~1-9af2c]:ReadFstKaldi():kaldi-fst-io.cc:35) Reading FST: error reading FST header from standard input</span><br><span class="hljs-string"></span><br><span class="hljs-string">[ Stack-Trace: ]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-base.so(kaldi::MessageLogger::LogMessage() const+0x793) [0x7fe2408121c3]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(kaldi::MessageLogger::LogAndThrow::operator=(kaldi::MessageLogger const&amp;)+0x25) [0x7fe2408759ab]</span><br><span class="hljs-string">/mnt/c/Users/ABC/Desktop/kaldi/src/lib/libkaldi-fstext.so(fst::ReadFstKaldi(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)+0x1bc) [0x7fe24087463f]</span><br><span class="hljs-string">fstminimizeencoded(main+0x137) [0x556e137adb20]</span><br><span class="hljs-string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7fe240283083]</span><br><span class="hljs-string">fstminimizeencoded(_start+0x2e) [0x556e137ad92e]</span><br><span class="hljs-string"></span><br><span class="hljs-string">kaldi::KaldiFatalErrorrun.pl: 1 / 8 failed, log is in exp/tri4b/log/acc_alimdl.*.log</span><br></code></pre></td></tr></table></figure><h1 id="4-Some-Useful-Tools-in-Kaldi"><a href="#4-Some-Useful-Tools-in-Kaldi" class="headerlink" title="4. Some Useful Tools in Kaldi"></a>4. Some Useful Tools in Kaldi</h1><h2 id="4-1-utils-x2F-run-pl"><a href="#4-1-utils-x2F-run-pl" class="headerlink" title="4.1 utils&#x2F;run.pl"></a>4.1 utils&#x2F;run.pl</h2><p>This will help the Kaldi run the system in multiple processing units，which makes the kaldi training more fast. We will discuss the <code>nj</code> later, since we will know <code>num_jobs</code>.</p><p>There is a very important tips here is that:</p><p>the <code>nj</code> value should smaller than the corpus speaker’s number. If there are 20 speakers in your corpus, you cannot set that number higher than that. If not follow this rule, it will send the errors.</p><h2 id="4-2-split-data-sh"><a href="#4-2-split-data-sh" class="headerlink" title="4.2 split_data.sh"></a>4.2 split_data.sh</h2><p>It will cut the data directories. </p><h1 id="5-Some-Useful-Links"><a href="#5-Some-Useful-Links" class="headerlink" title="5. Some Useful Links"></a>5. Some Useful Links</h1><p><a href="https://www.eleanorchodroff.com/tutorial/kaldi/training-acoustic-models.html">https://www.eleanorchodroff.com/tutorial/kaldi/training-acoustic-models.html</a></p><p><a href="https://faculty.sbs.arizona.edu/hammond/ling578-sp20/">https://faculty.sbs.arizona.edu/hammond/ling578-sp20/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Speech Recognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell and Vim on Speech and Language Processing</title>
    <link href="/2022/07/11/Shell-and-Vim-on-Speech-and-Language-Processing/"/>
    <url>/2022/07/11/Shell-and-Vim-on-Speech-and-Language-Processing/</url>
    
    <content type="html"><![CDATA[<h1 id="UNIX-Shell-Cmds"><a href="#UNIX-Shell-Cmds" class="headerlink" title="UNIX Shell Cmds"></a>UNIX Shell Cmds</h1><table><thead><tr><th align="left"><strong>Basic operations</strong></th><th align="left"></th></tr></thead><tbody><tr><td align="left">… … , … , ~ … for parent directory . . means current directory, ~ means home</td><td align="left"></td></tr><tr><td align="left">. &#x3D; ls, ls is the list, which shows the names of the files in the directory.</td><td align="left"></td></tr><tr><td align="left">ls ~</td><td align="left">means the list of home directory</td></tr><tr><td align="left">ls -l</td><td align="left">show all the subfolders under this folder in detail</td></tr><tr><td align="left">ls -l</td><td align="left">is similar to ls -l</td></tr><tr><td align="left">ls -l Documents&#x2F;*.pdf</td><td align="left">prints out all the pdf files in the Documents directory</td></tr><tr><td align="left">ls -al</td><td align="left">show details of the files in no directory (dash: files, f: folders, you can put files</td></tr><tr><td align="left">pwd</td><td align="left">print working directory prints the address of the directory you are in at the moment</td></tr><tr><td align="left">cd , cd . &#x2F;, cd ~</td><td align="left">first directory</td></tr><tr><td align="left">cd &#x2F;… &#x2F;… &#x2F;… &#x2F;…</td><td align="left">cd is a change directory, which goes to a particular file address</td></tr><tr><td align="left">cd &#x2F;… &#x2F;… &#x2F;… &#x2F;; ls</td><td align="left">goes to a file address and then displays all file names</td></tr><tr><td align="left">ls -</td><td align="left">returns to the previous directory</td></tr><tr><td align="left">cd …</td><td align="left">go to the previous directory</td></tr><tr><td align="left">cd … &#x2F;… &#x2F;… &#x2F;… &#x2F;…</td><td align="left">exit back to the original n parent directory</td></tr><tr><td align="left">q</td><td align="left">quit</td></tr><tr><td align="left">clear</td><td align="left">clear code</td></tr><tr><td align="left">← →</td><td align="left">Toggle code back and forth, so you can easily use repetitive code multiple times.</td></tr><tr><td align="left">history</td><td align="left">View history, even after shutting down the machine.</td></tr><tr><td align="left">echo</td><td align="left">Print like other languages’ PRINT operations</td></tr><tr><td align="left">wc -l fish</td><td align="left">count the number of lines in the file that have fish in them</td></tr><tr><td align="left">wc -c fish</td><td align="left">count the number of files with fish in them</td></tr><tr><td align="left"><strong>File Operations</strong></td><td align="left"></td></tr><tr><td align="left">touch A</td><td align="left">create new file name A</td></tr><tr><td align="left">ls -l A</td><td align="left">View file A details</td></tr><tr><td align="left">mv A B</td><td align="left">change the name of A to B</td></tr><tr><td align="left">mv ‘…&#x2F;A.txt’ Documents&#x2F;Books</td><td align="left">Move the A text file from somewhere to the Books folder under Documents</td></tr><tr><td align="left">mv ‘…&#x2F;*txt’ Documents&#x2F;Books</td><td align="left">move all text files from a location to the Books folder under Documents</td></tr><tr><td align="left">rm B</td><td align="left">Delete file B directly without trash, this is permanently deleted</td></tr><tr><td align="left">rm -i B</td><td align="left">Ask before deleting B (recommended)</td></tr><tr><td align="left">cat A.txt</td><td align="left">concatenate&#x2F;catenate (concatenate, make continuous) means you can run some files at the same time, here it will run and print out the txt file</td></tr><tr><td align="left">more A.txt</td><td align="left">print out the contents of the A text file completely, and then type “&#x2F;filename” to find the file you are looking for</td></tr><tr><td align="left">less A.txt</td><td align="left">You can use the up and down arrows to navigate through the printed text or space to go up and down</td></tr><tr><td align="left">source .bash_aliases</td><td align="left">Run this bash_aliases file</td></tr><tr><td align="left">nano A.txt</td><td align="left">you can enter the edit mode of the document A, you can use Ctrl + S to save the modified file after the change</td></tr><tr><td align="left">find &#x2F; -name “A”</td><td align="left">search for the file with the name “A”</td></tr><tr><td align="left">find &#x2F; -name “A” 2&gt;&#x2F;dev&#x2F;null</td><td align="left">Search for files with the file name “A” and only view the results as valid</td></tr><tr><td align="left">grep E</td><td align="left">find document E (recommended)</td></tr><tr><td align="left">grep E &#x2F;A&#x2F;B&#x2F;C</td><td align="left">Regularize search for document E in the specified location</td></tr><tr><td align="left">grep $USER</td><td align="left">anchor the end of a line e.g. ‘grep$’ matches all lines ending with user</td></tr><tr><td align="left"><strong>folder operations</strong></td><td align="left"></td></tr><tr><td align="left">mkdir A</td><td align="left">create new folder A</td></tr><tr><td align="left">mkdir A&#x2F;C</td><td align="left">create subfolder C of folder A</td></tr><tr><td align="left">mv A B</td><td align="left">rename folder A to B</td></tr><tr><td align="left">rmdir B</td><td align="left">If folder B is empty, you can remove it directly, it will be deleted directly without trash (not recommended)</td></tr><tr><td align="left">rm -ir B</td><td align="left">Delete the files in the folder one after another (recommended)</td></tr><tr><td align="left"><strong>network operations</strong></td><td align="left"></td></tr><tr><td align="left">curl ‘<a href="(http://xiaos.site">(http://xiaos.site</a>‘</td><td align="left">c url &#x3D; see url, will download the resource code of the web page (doesn’t work often)</td></tr><tr><td align="left">curl -L ‘<a href="http://xiaos.site/">http://xiaos.site</a>‘</td><td align="left">follow redirect, will download the resource code of the web page (recommended)</td></tr><tr><td align="left">curl -o robertzhangxiao.html-L ‘<a href="(http://xiaos.site">(http://xiaos.site</a>‘</td><td align="left">will directly download the html file from this site and save it</td></tr><tr><td align="left">curl -L ‘<a href="(http://xiaos.site">(http://xiaos.site</a>‘ in the vertical line grep fish</td><td align="left">look in the downloaded file</td></tr><tr><td align="left"><strong>variables</strong></td><td align="left"></td></tr><tr><td align="left">numbers&#x3D;’XXX’</td><td align="left">define variables without spaces in the equal sign</td></tr><tr><td align="left">echo $numbers</td><td align="left">Output variables</td></tr><tr><td align="left">echo $LINES x $COLUMNS</td><td align="left">output the row variable</td></tr><tr><td align="left">echo $PATH</td><td align="left">output path environment variable, here is to output the pragram address</td></tr><tr><td align="left"><strong>Shell Scripts</strong></td><td align="left">file followed by sh</td></tr><tr><td align="left">bin</td><td align="left">is the binary</td></tr><tr><td align="left">ls bin</td><td align="left">all binary files, assuming it will output magic</td></tr><tr><td align="left">bin&#x2F;magic</td><td align="left">run this binary file called magic</td></tr><tr><td align="left">PATH&#x3D;$PATH:&#x2F;Users&#x2F;student&#x2F;bin</td><td align="left">You can do the same if you type magic</td></tr><tr><td align="left">Note: Not all sh files can be run on linux systems, but not on macs and win.</td><td align="left"></td></tr><tr><td align="left"><strong>console</strong></td><td align="left"></td></tr><tr><td align="left">type PS1&#x3D;’$’</td><td align="left">will remove the header name</td></tr><tr><td align="left">aliases ll&#x3D;’ls -la’</td><td align="left">will make the long code shorter, and then just type ll</td></tr><tr><td align="left">aliases</td><td align="left">View all aliases variables</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>  -r S0252/S0252_mic/* ./S0150/S0150_mic/<br></code></pre></td></tr></table></figure><p>Copy all the data from the “S0252&#x2F;S0252_mic&#x2F;“ directory to “&#x2F;S0150&#x2F;S0150_mic&#x2F;“ directory. “-r” means copy directly without any warnings.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh<br></code></pre></td></tr></table></figure><p>Check the size of the directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -h --max-depth=1 /.<br></code></pre></td></tr></table></figure><p>Check all the directory size under the current directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span><br></code></pre></td></tr></table></figure><p>We can translate the upper case words in that file into lower case.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | grep -o <span class="hljs-string">&quot;[a-z]&quot;</span><br></code></pre></td></tr></table></figure><p>Print the document letter by letter.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br>d<br>c<br><span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>Print the document letter by letter and sort them.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><br>c<br>d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c <br></code></pre></td></tr></table></figure><p>Print how many each letter occur.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span>a<br><span class="hljs-symbol">125 </span> b<br><span class="hljs-symbol">31 </span> c<br><span class="hljs-symbol">22 </span> d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr  <span class="hljs-comment">### here the &quot;r&quot; in &quot;nr&quot; means reverse the sorting, means from the up to the bottom and vice versa.</span><br></code></pre></td></tr></table></figure><p>Print how many each letter occur by the frequency.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">125 </span> b<br><span class="hljs-symbol">100 </span>a<br><span class="hljs-symbol">22 </span> d<br><span class="hljs-symbol">31 </span> c<br></code></pre></td></tr></table></figure><p><strong>Using Egrep to read the column:</strong></p><p>There is a .lab speech file, which is labbeled as well:</p><p>Here the first column is the timming, second is the frequency, and the third is the labelled data.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-number">0.1213</span> <span class="hljs-number">123</span> y<br><span class="hljs-number">0.1232</span> <span class="hljs-number">111</span> uw<br><span class="hljs-number">0.2113</span> <span class="hljs-number">110</span> eh<br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br></code></pre></td></tr></table></figure><p>So we now need to read all the third column information, we use egrep:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egrep -h -o <span class="hljs-string">&quot;[a-z]&#123;1,2&#125;$&quot;</span> *.lab  <span class="hljs-comment">### we are looking for the lower case letters, $ means that they are happened at the end of the line</span><br><br></code></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">y</span><br><span class="hljs-attribute">uw</span><br><span class="hljs-attribute">eh</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egrep -h -o <span class="hljs-string">&quot;[a-z]&#123;1,2&#125;$&quot;</span> *.lab | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr <br></code></pre></td></tr></table></figure><p>This will print the each phone frequency in reverse order:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">121 </span>y<br><span class="hljs-symbol">120 </span>uw<br><span class="hljs-symbol">110 </span>eh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">ls</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p><strong>Check how many files in one directory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ./<br></code></pre></td></tr></table></figure><p><strong>Delete the current directory.</strong>  No warrning will occur.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt<br></code></pre></td></tr></table></figure><p>Print all the .txt files in that directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt &gt; ./text<br></code></pre></td></tr></table></figure><p>Print all the .txt file’s content in that text file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">python3 ./.../..py &gt; ./text<br></code></pre></td></tr></table></figure><p>print the .py running results on text file.</p><p>file .wav :<br>Check the identity of the wav file size</p><p>Use mv to change the file name:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> ./../../.py ./../../.py<br></code></pre></td></tr></table></figure><p>We can use remove to change the file’s name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> ...<br></code></pre></td></tr></table></figure><p><strong>Check where … is, the location of …</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ll -lh<br></code></pre></td></tr></table></figure><p><strong>check all the files’ size</strong></p><p>If there has a space in the beginning of the file’s name, we just need to delete it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s|^ ||&#x27;</span><br></code></pre></td></tr></table></figure><p>Adding a “_” in the middle of the file name:<br>eg. SPKID 09912 into SPKID_09912, g means globally.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s| |_|g&#x27;</span><br></code></pre></td></tr></table></figure><p>Or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s|SPKID|SPKID_|&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>align two files:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">paste</span> -d <span class="hljs-string">&#x27; &#x27;</span> wav.scp wav_id &gt; tmp.txt <br></code></pre></td></tr></table></figure><p>Delete each lines’ particular words by grep:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip freeze | grep -v <span class="hljs-string">&quot;@ the things you want to remove&quot;</span> &gt; requirements.txt<br></code></pre></td></tr></table></figure><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim:"></a>Vim:</h1><p>To the top: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GG<br></code></pre></td></tr></table></figure><p>To the bottom:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">gg<br></code></pre></td></tr></table></figure><p>vim name+tab : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto-type the name <br></code></pre></td></tr></table></figure><p>auto sort: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>check how many lines:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> number<br></code></pre></td></tr></table></figure><p>delete one line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure><p>search the “keyword”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/<span class="hljs-string">&quot;keyword&quot;</span><br></code></pre></td></tr></table></figure><p>check the difference between two different files:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vimdiff A.txt B.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Speech and Language Processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/06/07/Git%20Tutorials/"/>
    <url>/2022/06/07/Git%20Tutorials/</url>
    
    <content type="html"><![CDATA[<h1 id="Deploy-Key-Generation"><a href="#Deploy-Key-Generation" class="headerlink" title="Deploy Key Generation"></a>Deploy Key Generation</h1><h2 id="List-all-the-ssh-file"><a href="#List-all-the-ssh-file" class="headerlink" title="List all the ssh file"></a>List all the ssh file</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure><h2 id="Regenerate-a-deploy-key"><a href="#Regenerate-a-deploy-key" class="headerlink" title="Regenerate a deploy key"></a>Regenerate a deploy key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;the_name_of_the_deploy_key&quot;</span><br></code></pre></td></tr></table></figure><p>We can just create a key which name is “the_name_of_the_deploy_key”, if there was an error from the github says there were two duplicated keys we used.ss</p><h2 id="View-the-deploy-key"><a href="#View-the-deploy-key" class="headerlink" title="View the deploy key"></a>View the deploy key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vim ~.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>So after we viewed the key, we can just copy and paste into the Github.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> http://username:password@247.58.7.177/xxx/xxx.git <br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/10054318/how-do-i-provide-a-username-and-password-when-running-git-clone-gitremote-git">https://stackoverflow.com/questions/10054318/how-do-i-provide-a-username-and-password-when-running-git-clone-gitremote-git</a></p><h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><p>Here we can only clone just one single branch </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone -b &lt;the_name_of_the_branch&gt; --single-branch https://github.com/...git<br></code></pre></td></tr></table></figure><p>Check how many branches</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git brach<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -a<br></code></pre></td></tr></table></figure><p>Create a new branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -c &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><p>Enable that branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git workout &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><h1 id="Read-the-variable-path"><a href="#Read-the-variable-path" class="headerlink" title="Read the variable path"></a>Read the variable path</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.bashrc<br></code></pre></td></tr></table></figure><h1 id="Check-the-git-x2F-config"><a href="#Check-the-git-x2F-config" class="headerlink" title="Check the .git&#x2F;config"></a>Check the .git&#x2F;config</h1><p><img src="/../images/image-20220805200842425.png" alt="image-20220805200842425"></p><p>Inside the terminal and click it to enter the git config files, so we can modify the information there.</p><p><img src="/../images/image-20220805200956551.png" alt="image-20220805200956551"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Audio and Speech Application Development</title>
    <link href="/2022/03/30/Audio-and-Speech-Application-Development/"/>
    <url>/2022/03/30/Audio-and-Speech-Application-Development/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-Dev"><a href="#Web-Dev" class="headerlink" title="Web Dev"></a>Web Dev</h1><p>There are serveral frameworks that are in my suggestion lists, such as: </p><h3 id="BeaqleJS"><a href="#BeaqleJS" class="headerlink" title="BeaqleJS"></a>BeaqleJS</h3><p>BeaqleJS: HTML5 and JavaScript based<br>Framework for the Subjective Evaluation of<br>Audio Quality: <a href="https://github.com/HSU-ANT/beaqlejs">https://github.com/HSU-ANT/beaqlejs</a></p><h3 id="wavesurfer-js"><a href="#wavesurfer-js" class="headerlink" title="wavesurfer.js"></a>wavesurfer.js</h3><p><a href="https://wavesurfer-js.org/">https://wavesurfer-js.org/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Audio and Speech Processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wenet ASR Toolkit Tutorials From Training to Deployment</title>
    <link href="/2022/03/02/Wenet-ASR-Toolkit-Tutorials-From-Training-to-Deployment/"/>
    <url>/2022/03/02/Wenet-ASR-Toolkit-Tutorials-From-Training-to-Deployment/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20220730230852670.png" alt="image-20220730230852670"></p><h1 id="1-Use-Wenet-to-train-the-ASR-E2E-Model"><a href="#1-Use-Wenet-to-train-the-ASR-E2E-Model" class="headerlink" title="1. Use Wenet to train the ASR E2E Model"></a>1. Use Wenet to train the ASR E2E Model</h1><h2 id="1-1-Pre-trained-Model"><a href="#1-1-Pre-trained-Model" class="headerlink" title="1.1 Pre-trained Model"></a>1.1 Pre-trained Model</h2><p>We can Download the pre-compiled runtime wenet mode from the wenet github, since they already shared the pre-trained runtime model <a href="https://github.com/wenet-e2e/wenet/actions/runs/2175816175">https://github.com/wenet-e2e/wenet/actions/runs/2175816175</a> their, so we can just use it instead of compile for ourselves.</p><p>Wenet supports the <code>.zip</code> model to decode the ASR outputs. If you do not need to train your model yourself, then you can try this step. </p><p><img src="/../images/image-20220730003510616-16591147216542.png" alt="image-20220730003510616"></p><h2 id="1-2-Self-trained-Model"><a href="#1-2-Self-trained-Model" class="headerlink" title="1.2 Self-trained Model"></a>1.2 Self-trained Model</h2><p>If you want to train your model, you can try to run an example project just like kaldi <code>wsj</code> examples. In Wenet, since it was created mostly for Chinese ASR tasks, so we will use a Chinese corpus to be the example. But Wenet still supports other languages like English, so if you still want to do it, it should be without any concern. </p><p>In all, this is just an example we can refer, the goal is to know how wenet train the ASR we want.</p><p>Here is the offical website for the trainning purposes, <a href="https://wenet.org.cn/wenet/tutorial_aishell.html">https://wenet.org.cn/wenet/tutorial_aishell.html</a></p><p>Also, with the LibriSpeech one: <a href="https://wenet.org.cn/wenet/tutorial_librispeech.html">https://wenet.org.cn/wenet/tutorial_librispeech.html</a></p><h1 id="2-Optionally-Integrate-with-the-Language-Model-LM"><a href="#2-Optionally-Integrate-with-the-Language-Model-LM" class="headerlink" title="2. Optionally Integrate with the Language Model (LM)"></a>2. Optionally Integrate with the Language Model (LM)</h1><p>As we know, the wenet will output a <code>TLG.fst</code> decoding model, and then we can just use this model to integrate into the n-gram language model.</p><p>Since before we had the dictionary in tokens, but here we are dealing with the word level.</p><p>If we use the LM, in most cases the decoding time will be much longer, but also there will be a higher accurancy, but this is not compulsory!</p><h2 id="2-1-N-gram-LM-in-Wenet"><a href="#2-1-N-gram-LM-in-Wenet" class="headerlink" title="2.1 N-gram LM in Wenet"></a>2.1 N-gram LM in Wenet</h2><p>Wenet use the N-gram LM to help us to improve our CTC DNN model, since if we can add one more LM so we can have a more promissing WER during the decoding.</p><p>Compared with the DNN LM, the n-gram model is very easily to implement and light-weighted, which is much faster than the DNN decoding. And at the same time, the traditional n-gram model is not limited to the corpus size, we can even use a very small corpus to build this. Also compared with DNN, we can make our model more controllable, since DNN is very randomize. </p><p>In Wenet, we will import the WFST to do the decoding for the LM. </p><h3 id="TLG-fst"><a href="#TLG-fst" class="headerlink" title="TLG.fst"></a>TLG.fst</h3><p>Just like in Kaldi, we have the <code>HCLG.fst</code>, also in Wenet, we have the same strategy. </p><p><strong>T.fst</strong></p><p>For <code>T</code>,  it means the <code>token</code>, in wenet, it is used for CTC decoding. It is used for: </p><ol><li>remove and manage the blanks, from <blank> -&gt; <eps> </li><li>decode the multiple tokens output into one sentence, how we manage it? (this is very typically used in Mandarin Chinese, which can be a kind of characteristics of that language.)</li></ol><p><strong>L.fst</strong></p><p>L is lexicon, since the logic here is to make the input characters into the words, in english can be phones to words.</p><p><strong>G.fst</strong></p><p>G is grammar, it guides us from the words level into the sentence level. For words, it can be n-gram model. </p><p><strong>LG.fst</strong>  </p><p>LG.fst &#x3D; compose(L.fst, G.fst), we can compose those two fst models into one. </p><p><strong>TLG.fst</strong></p><p>Finally, we can just compose the LG.fst with the T.fst into a big decoding map. </p><h2 id="2-2-Language-Model-Deployment"><a href="#2-2-Language-Model-Deployment" class="headerlink" title="2.2 Language Model Deployment"></a>2.2 Language Model Deployment</h2><h3 id="Install-SRILM"><a href="#Install-SRILM" class="headerlink" title="Install SRILM"></a>Install SRILM</h3><p>If you want to review more ideas about the SRILM, you can also refer this page: <a href="https://www.xiaos.site/2022/07/11/Kaldi-for-Dummies/#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model">https://www.xiaos.site/2022/07/11/Kaldi-for-Dummies/#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> wenet/tools<br><span class="hljs-comment"># download, install the srilm, compile it.</span><br>bash install_srilm.sh<br><span class="hljs-built_in">source</span> env.sh<br><span class="hljs-comment"># check the dependencies whether in our dev env</span><br><span class="hljs-built_in">which</span> ngram-count<br><br><span class="hljs-comment"># we just train a 2-gram LM, the input text file is train.txt and the output is the lm.arpa</span><br>ngram-count -order 2 -text train.txt -lm lm.arpa<br><br><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># the train.txt is the original lexicon file, which includes some words like</span><br><br><br><span class="hljs-comment"># train.txt</span><br>I Love You<br>Wenet<br>ASR<br><span class="hljs-keyword">From</span> Training <span class="hljs-keyword">to</span> Deployment<br></code></pre></td></tr></table></figure><p>In that case, it will generate a <code>lm.arpa</code> file, and we can <code>vim lm.arpa</code></p><h3 id="Get-the-fst-with-LM-language-model"><a href="#Get-the-fst-with-LM-language-model" class="headerlink" title="Get the .fst with LM ( language model)"></a>Get the .fst with LM ( language model)</h3><p><img src="/../images/image-20220804141633132.png" alt="image-20220804141633132"></p><p>Her we need to get into the <code>cd /wenet/examples/aishell/s0</code> folder and <code>vim</code> the <code>run.sh</code> file.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 7.1 Prepare dict</span><br>unit_file=<span class="hljs-variable">$dict</span><br><span class="hljs-built_in">mkdir</span> -p data/local/dict<br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$unit_file</span> data/local/dict/units.txt<br>tools/fst/prepare_dict.py <span class="hljs-variable">$unit_file</span> <span class="hljs-variable">$&#123;data&#125;</span>/resource_aishell/lexicon.txt \<br>    data/local/dict/lexicon.txt<br><span class="hljs-comment"># 7.2 Train lm</span><br>lm=data/local/lm<br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$lm</span><br>tools/filter_scp.pl data/train/text \<br>     <span class="hljs-variable">$data</span>/data_aishell/transcript/aishell_transcript_v0.8.txt &gt; <span class="hljs-variable">$lm</span>/text<br><span class="hljs-built_in">local</span>/aishell_train_lms.sh<br><span class="hljs-comment"># 7.3 Build decoding TLG</span><br>tools/fst/compile_lexicon_token_fst.sh \<br>    data/local/dict data/local/tmp data/local/lang<br>tools/fst/make_tlg.sh data/local/lm data/local/lang data/lang_test || <span class="hljs-built_in">exit</span> 1;<br><span class="hljs-comment"># 7.4 Decoding with runtime</span><br>./tools/decode.sh --nj 16 \<br>    --beam 15.0 --lattice_beam 7.5 --max_active 7000 \<br>    --blank_skip_thresh 0.98 --ctc_weight 0.5 --rescoring_weight 1.0 \<br>    --fst_path data/lang_test/TLG.fst \<br>    --dict_path data/lang_test/words.txt \<br>    data/test/wav.scp data/test/text <span class="hljs-variable">$dir</span>/final.zip \<br>    data/lang_test/units.txt <span class="hljs-variable">$dir</span>/lm_with_runtime<br></code></pre></td></tr></table></figure><p>In wenet, this is the 7th step in the  <code>run.sh</code>,  if runs well, we would get :</p><p><code>composing decoding graph TLG.fst succeded</code></p><p>We will compile a <code>.fst</code> file into the <code>data/lang_test/</code> folder.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="3-Runtime-Compiling"><a href="#3-Runtime-Compiling" class="headerlink" title="3. Runtime Compiling"></a>3. Runtime Compiling</h1><h2 id="3-1-Get-the-pre-compiled-runtime-from-Wenet"><a href="#3-1-Get-the-pre-compiled-runtime-from-Wenet" class="headerlink" title="3.1 Get the pre-compiled runtime from Wenet"></a>3.1 Get the pre-compiled runtime from Wenet</h2><p>Wenet already gave us a pre-compiled runtime software for us to decode, so we do not need to compile the runtime ourselves, we can firstly use the wenet official released version to help us to do the decoding in the next stage, we can download here:</p><p><img src="/../images/image-20220804222301456.png" alt="image-20220804222301456"></p><p>After we downloaded, we can see those documents there:</p><p><img src="/../images/image-20220804222653725.png" alt="image-20220804222653725"></p><p>We will use mostly those three <code>.exe</code>  programs with red marks for us to do the decoding. </p><h2 id="3-2-Compile-at-your-local-machine"><a href="#3-2-Compile-at-your-local-machine" class="headerlink" title="3.2 Compile at your local machine"></a>3.2 Compile at your local machine</h2><p>If you want to compile your own runtime files on your local machine <strong>instead of downloading from the pre-compiled version from the Wenet official release</strong>, please check here!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> runtime/server/x86<br><span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> build &amp;&amp; cmake .. &amp;&amp; cmake --build .<br></code></pre></td></tr></table></figure><p>There is a notice here, we must ensure the <strong>cmake is upper than the 3.14 version, and the gcc should be higher than 5.4.</strong> </p><h1 id="4-Decode-the-Model"><a href="#4-Decode-the-Model" class="headerlink" title="4. Decode the Model"></a>4. Decode the Model</h1><p>Here is an example, we will use the pre-trained wenet model to do a sample decoding. After we downloaded that pre-trained model, we can just get into that downloaded directory.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> Downloads/release-wenet-binary<br></code></pre></td></tr></table></figure><h2 id="4-1-Runtime-Local-Decoding"><a href="#4-1-Runtime-Local-Decoding" class="headerlink" title="4.1 Runtime Local Decoding"></a>4.1 Runtime Local Decoding</h2><p>Here we can do a basic decoding test from our downloaded pre-trained runtime model. The decoding tool is just like <code>decoder_main.exe</code>, but we have to pass in some params there. </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--chunk_size    the wave chunck streamming param</span><br><span class="hljs-comment">--wav_paththe wave file we want to do the decoding</span><br><span class="hljs-comment">--model_paththe neural model from the trained model</span><br><span class="hljs-comment">--dict_path     the dictionary file from the trained model.</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./decoder_main.exe     --chunk_size -1     --wav_path ../test.wav     --model_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/final.zip     --dict_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/units.txt<br></code></pre></td></tr></table></figure><p>Here is the demo code that wenet gave:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /home/wenet/runtime/server/x86<br><span class="hljs-built_in">export</span> GLOG_logtostderr=1<br><span class="hljs-built_in">export</span> GLOG_v=2<br>wav_path=../test.wav<br>model_dir=../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch<br>./build/bin/decoder_main \<br>    --chunk_size 16 \<br>    --wav_path <span class="hljs-variable">$wav_path</span> \<br>    --model_path <span class="hljs-variable">$model_dir</span>/final.zip \<br>    --unit_path <span class="hljs-variable">$model_dir</span>/units.txt 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> log.txt \<br>    <span class="hljs-comment"># here are the path need to specify if we need the LM, it without these two lines of code, it will decode without the LM</span><br>    --fst_path <span class="hljs-variable">$model_dir</span>/TLG.fst \<br>    --dict_path <span class="hljs-variable">$model_dir</span>/words.txt<br></code></pre></td></tr></table></figure><h2 id="4-2-Online-Decoding-with-Host"><a href="#4-2-Online-Decoding-with-Host" class="headerlink" title="4.2 Online Decoding with Host"></a>4.2 Online Decoding with Host</h2><h3 id="4-2-1-Runtime-Host-Decoding-with-a-CMD-interface"><a href="#4-2-1-Runtime-Host-Decoding-with-a-CMD-interface" class="headerlink" title="4.2.1 Runtime Host Decoding with a CMD interface"></a>4.2.1 Runtime Host Decoding with a CMD interface</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./websocket_client_main.exe   --hostname 127.0.0.1   --port 10086    --wav_path ../test.wav<br></code></pre></td></tr></table></figure><h3 id="4-2-2-Runtime-Host-Decoding-with-a-Web-interface"><a href="#4-2-2-Runtime-Host-Decoding-with-a-Web-interface" class="headerlink" title="4.2.2 Runtime Host Decoding with a Web interface"></a>4.2.2 Runtime Host Decoding with a Web interface</h3><p>Wenet just gave us a great demo for us to do the demo illustration, and it used the <code>Flask</code>.  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># here are the code to run the runtime server, right now it is hosted, and we can get the request from that url: ws://127.0.0.1:10086</span><br>./websocket_server_main.exe --port 10086    --chunk_size -1    --model_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/final.zip     --dict_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/units.txt<br></code></pre></td></tr></table></figure><p>For the server side, it will open a server from the local machine at the 10086, we can then get into the <code>index.html</code> from the flask demo to get the response there. </p><p><img src="/../images/image-20220730004721190.png" alt="image-20220730004721190"></p><p>We need to open the <code>index.html</code> after we already made sure that our <code>ws://127.0.0.1:10086</code> host is launching. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> wenet/runtime/server/x86/web/templates<br><span class="hljs-comment"># we can just open that index.html to open a flask web demo app to retreive the data there.</span><br></code></pre></td></tr></table></figure><p>The blue button here is a Chinese means “start to do the speech recognition”, and after we click the allow to recording, so we can just do the asr tasks here with the streaming and unstreamming modes only if we changed the <code>chunk_size</code> from our decoding cmds.</p><p><img src="/../images/image-20220730004448344.png" alt="image-20220730004448344"></p><h2 id="4-3-Use-Python"><a href="#4-3-Use-Python" class="headerlink" title="4.3 Use Python"></a>4.3 Use Python</h2><p>We can refer this website,  it supports the streaming and non-streaming methods: <a href="https://github.com/wenet-e2e/wenet/tree/main/runtime/binding/python">https://github.com/wenet-e2e/wenet/tree/main/runtime/binding/python</a></p><p>Here we just choose a <strong>Non-streaming</strong> Usage. </p><p>we just firstly install the python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install wenet<br></code></pre></td></tr></table></figure><p>We need to write a <code>demo.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># demo.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> wenet<br><br>wav_file = sys.argv[<span class="hljs-number">1</span>] <span class="hljs-comment"># we specify the file we want to decode </span><br>decoder = wenet.Decoder(model_dir, lang=<span class="hljs-string">&#x27;chs&#x27;</span>)<br><span class="hljs-comment"># in the model directory we need to add 4 files into it: 1) the runtime model like final.zip 2) units.txt from the datasets, 3) words.txt, from the LM we trained (optional), 4) TLG.fst, from previous operations (optional)</span><br>ans = decoder.decode_wav(wav_file)<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment"># call decoder.reset() if you want to do the next decoding</span><br></code></pre></td></tr></table></figure><h1 id="5-Hot-Word-Enhancement"><a href="#5-Hot-Word-Enhancement" class="headerlink" title="5. Hot Word Enhancement"></a>5. Hot Word Enhancement</h1><p>Hot word is contextual (context) biasing, which means we can argumented the specific word we want and make it easily be recognized. This is often occurred within the speech technology. </p><p>The common senarios can be recognize: locations, contacter’s name, date or telephone numbers… This senario is always used into the real commercial cases.</p><p>In all, the how word enhancement is to give some particular words some kind of more weighting score. In this way, it will make the word we want (hot word) more easily to be decoded.</p><h1 id="6-Long-time-audio-ASR"><a href="#6-Long-time-audio-ASR" class="headerlink" title="6. Long-time audio ASR"></a>6. Long-time audio ASR</h1><p><img src="/../images/image-20220819211753969.png" alt="image-20220819211753969"></p><p>The basic philosophy here for long-time audio asr tasks are very direct, we just divide the big problems into small problems. We have to detect the endpoint for each sentences, just make it in trucks. And after the end-point,  we can re-recognize the sentences. </p><h2 id="6-1-EndPoint-Detection"><a href="#6-1-EndPoint-Detection" class="headerlink" title="6.1 EndPoint Detection"></a>6.1 EndPoint Detection</h2><p>What is endpoint, endpoint is somewhere that the user will stop at some point, or just the end of the sentences. We can just set the silence threshold of the sentences. </p><p>There are three senarios(rules) in wenet:</p><ol><li>Before the speech, the silence in there. Default value is 5000ms (5s).</li><li>Within the speech, the silence there. Default value is 1000ms (1s).</li><li>If the user’s speech trunks are too large, we have to cut it forcelly. Default value is 20000ms (20s).</li></ol><p>We can set the params here in wenet.</p><p>Here are the core codes here from wenet for Endpoint detection task:<a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.h">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.h</a></p><p><img src="/../images/image-20220819212902233.png" alt="image-20220819212902233"></p><p><img src="/../images/image-20220819213119821.png" alt="image-20220819213119821"></p><p>We can define the values we want, the units will be 5000 ms. </p><p>The real code for <strong>continous blank detection</strong> is in here: <a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.cc">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.cc</a></p><p>These are the codes that how it really works:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CtcEndpoint::IsEndpoint</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> std::vector&lt;std::vector&lt;<span class="hljs-type">float</span>&gt;&gt;&amp; ctc_log_probs,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-comment">// it will get the ctc log probabilities, it will get the ctc prob and compare with the blank prob.</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">bool</span> decoded_something)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; ctc_log_probs.<span class="hljs-built_in">size</span>(); ++t) &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; <span class="hljs-type">logp_t</span> = ctc_log_probs[t];<br>    <span class="hljs-type">float</span> blank_prob = <span class="hljs-built_in">expf</span>(<span class="hljs-type">logp_t</span>[config_.blank]);<br>    num_frames_decoded_++;<br>    <span class="hljs-comment">// in here if the blank prob bigger than the preset blank value we set, it will detect as silence signal.</span><br>    <span class="hljs-keyword">if</span> (blank_prob &gt; config_.blank_threshold) &#123;<br>      num_frames_trailing_blank_++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// if not will be cleared into 0, some it follows a culmuative way.</span><br>      num_frames_trailing_blank_ = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// we will check the length of the speech.</span><br>  <span class="hljs-built_in">CHECK_GE</span>(num_frames_decoded_, num_frames_trailing_blank_);<br>  <span class="hljs-built_in">CHECK_GT</span>(frame_shift_in_ms_, <span class="hljs-number">0</span>);<br>  <span class="hljs-type">int</span> utterance_length = num_frames_decoded_ * frame_shift_in_ms_;<br>  <span class="hljs-type">int</span> trailing_silence = num_frames_trailing_blank_ * frame_shift_in_ms_;<br>  <span class="hljs-comment">// if there is any case that be activated, the endpoint exception case will be triggered.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RuleActivated</span>(config_.rule1, <span class="hljs-string">&quot;rule1&quot;</span>, decoded_something, trailing_silence,<br>                    utterance_length))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RuleActivated</span>(config_.rule2, <span class="hljs-string">&quot;rule2&quot;</span>, decoded_something, trailing_silence,<br>                    utterance_length))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RuleActivated</span>(config_.rule3, <span class="hljs-string">&quot;rule3&quot;</span>, decoded_something, trailing_silence,<br>                    utterance_length))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Speech Recognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2022/01/07/Hexo/"/>
    <url>/2022/01/07/Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-combine-the-Hexo-together-with-the-Typora"><a href="#How-to-combine-the-Hexo-together-with-the-Typora" class="headerlink" title="How to combine the Hexo together with the Typora"></a>How to combine the Hexo together with the Typora</h1><p>Here is the way I reviewed from the web, since I knew there is a very big issue if we just add the images there but have the path issues. </p><p><a href="https://www.cnblogs.com/himeka/p/16306906.html">https://www.cnblogs.com/himeka/p/16306906.html</a></p><p><img src="/../images/image-20220730012119667.png" alt="image-20220730012119667"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
