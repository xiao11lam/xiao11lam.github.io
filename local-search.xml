<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vocal Tract Length Normalization (VTLN)</title>
    <link href="/2022/09/12/Vocal-Tract-Length-Normalization-VTLN/"/>
    <url>/2022/09/12/Vocal-Tract-Length-Normalization-VTLN/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Calculate-the-Vocal-Tract-Length"><a href="#Calculate-the-Vocal-Tract-Length" class="headerlink" title="Calculate the Vocal Tract Length"></a>Calculate the Vocal Tract Length</h1><h2 id="Using-Praat"><a href="#Using-Praat" class="headerlink" title="Using Praat"></a>Using Praat</h2><p>After we installed the <code>Pratt</code> together with the <code>VocalToolkit</code> : <a href="https://www.praatvocaltoolkit.com/calculate-vocal-tract-length.html">https://www.praatvocaltoolkit.com/calculate-vocal-tract-length.html</a>, we can just calculate the vocal tract length from the <code>pratt</code> easily.</p><p><img src="/../images/image-20220912215239543.png" alt="image-20220912215239543"></p><p>We can open that <code>Praat</code> the main panel, and hit the <code>process</code> buttom, </p><p><img src="/../images/image-20220912215345612.png" alt="image-20220912215345612"></p><p><img src="/../images/image-20220912215404723.png" alt="image-20220912215404723"></p><p><img src="/../images/image-20220912215427231.png" alt="image-20220912215427231"></p><p>Here is the result, and the calculating formula was from: Johnson, Keith. Acoustic and Auditory Phonetics. 2nd ed. Malden, Mass: Blackwell Pub, 2003. p. 96.</p><p>$$<br>F_{n} &#x3D; \frac{ (2n - 1)c}{4L},    c &#x3D; 35,000\ cm&#x2F; sec<br>$$</p><p>In here, $$F_{4}$$ is 3369.558 Hz, and here can be the how it calculated:<br>$$<br>3369.558 \ Hz &#x3D;  \frac{(7)* 35,000\ cm&#x2F; sec}{4L} \<br>3369.558 \ \frac{1}{sec} &#x3D; \frac{(7)* 35,000\ cm&#x2F; sec}{4L} \<br>\frac{3369.558}{sec} &#x3D; \frac{(7)* 35,000\ cm&#x2F; sec}{4L} \<br>\frac{3369.558 * 4L}{sec} &#x3D; (7)* 35,000\ cm&#x2F; sec \<br>3369.558 * 4L &#x3D;  (7)* 35,000\ cm \<br>L &#x3D; \frac{(7)* 35,000\ cm}{3369.558 * 4} \<br>L &#x3D; \frac{245000}{13478} \<br>L &#x3D; 18.1777711827 \ cm<br>$$</p><h1 id="Source-Filter-Theory"><a href="#Source-Filter-Theory" class="headerlink" title="Source Filter Theory"></a>Source Filter Theory</h1><p><a href="https://slideplayer.com/slide/8271737/">https://slideplayer.com/slide/8271737/</a></p><p><a href="https://www2.ims.uni-stuttgart.de/EGG/frmst1.htm">https://www2.ims.uni-stuttgart.de/EGG/frmst1.htm</a></p><p><img src="/../images/image-20220914145911751.png" alt="image-20220914145911751"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Audio and Electroacoustic System Engineering</title>
    <link href="/2022/08/30/Audio-and-Electroacoustic-System-Engineering/"/>
    <url>/2022/08/30/Audio-and-Electroacoustic-System-Engineering/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Audio-Engineering"><a href="#Audio-Engineering" class="headerlink" title="Audio Engineering"></a>Audio Engineering</h1><h2 id="Loudness"><a href="#Loudness" class="headerlink" title="Loudness"></a>Loudness</h2><h2 id="Frequency-and-bandwidth"><a href="#Frequency-and-bandwidth" class="headerlink" title="Frequency and bandwidth"></a>Frequency and bandwidth</h2><h3 id="f0"><a href="#f0" class="headerlink" title="f0"></a>f0</h3><p><code>F0</code> is the frequency corresponding to the point where the vibration plate vibrates most strongly when the speaker starts to vibrate from the low range, and the frequency corresponding to the first time the impedance value reaches its maximum value on the impedance curve (i.e. <code>Zmax</code>) is called the resonant frequency or resonance frequency of the speaker unit, abbreviated as <code>F0</code>. The input is a swept frequency signal of equal amplitude, and the voltage across the speaker is viewed in real time with a voltmeter. The voltage corresponds to <code>f0</code> at the maximum.</p><p><a href="https://wiki.aalto.fi/pages/viewpage.action?pageId=149890776">https://wiki.aalto.fi/pages/viewpage.action?pageId=149890776</a></p><h3 id="fh"><a href="#fh" class="headerlink" title="fh"></a>fh</h3><p><code>f0</code> is mainly caused by the rear cavity, <code>fh</code> is the problem of the front cavity. The change in high frequency is the extrusion of the front cavity.</p><h3 id="Q-Value"><a href="#Q-Value" class="headerlink" title="Q Value"></a>Q Value</h3><p>Q value: represents the resonance quality factor at the resonance point <code>f0</code>. </p><p>The higher Q means that the curve is sharper, and in terms of vibration phenomenon, it is not easy to stop the vibration, so the bass will sound muddy. But in the case of small speakers, because the bass is not easy to do well, so the Q value is higher.</p><h2 id="Sensitivity"><a href="#Sensitivity" class="headerlink" title="Sensitivity"></a>Sensitivity</h2><p>Sensitivity is a microphone that indicates its true output loudness, the lower it is the higher the gain that needs to be added to the pre-amp.</p><p>$$<br>EG1 &#x3D; \frac{-54.5 dBV}{Pa (1.85 mV)},  1 Pa &#x3D; 94 dB SPL (1000 Hz)<br>$$</p><p>$$<br>EG2 &#x3D; \frac{-29 dB  re  1V}{Pa (35mV @ 94 dB SPL)}, ±2dB @ 1Khz<br>$$</p><p>Eg1 needs 25.5 dB of gain to be the same volume level as EG2 output. The louder it is the louder it is.</p><p><img src="/../images/image-20220830155046339.png" alt="image-20220830155046339"></p><p><img src="/../images/image-20220830155055754.png" alt="image-20220830155055754"></p><p>This microphone is sensitive: -37dBFS, which is 94dB SPL @1kHZ is in accordance with the 1Vrms to control, so now the sensitivity can be understood as -37dBV. because the full scale here is 1Vrms.</p><h2 id="Some-Important-formulas"><a href="#Some-Important-formulas" class="headerlink" title="Some Important formulas"></a>Some Important formulas</h2><p>$$<br>Frequency &#x3D; rate * channels * sample \ bits<br>$$</p><p>$$<br>1 Pa @ dB SPL &#x3D; \<br>10 log_{10}(12 &#x2F; PB2) &#x3D; \<br>20 log_{10}(1 &#x2F; PB) &#x3D; \<br>-20 log_{10}(PB) &#x3D;\<br>-20 log_{10}(2(10-5)) &#x3D;\<br>-20 (log_{10} 2 + log10 10-5) &#x3D;\<br>-20 ((log_{10} 2) – 5) &#x3D;\<br>100 – 20 log_{10} 2 ≈ 93.9794 dB SPL\<br>$$</p><p>$$<br>0 dB SPL &#x3D; 10 log10(0.000022 &#x2F; 0.000022) &#x3D; 10 log10(1) &#x3D; 10 (0) &#x3D; 0.<br>$$</p><p>$$<br>dBPa &#x3D; 20*log(x \ Pa)<br>$$</p><p>$$<br>dB &#x3D; 20 log_{10} （V_{input} &#x2F; V_{output \ or \ reference \ voltage}）<br>$$</p><p>$$<br>dB &#x3D; 10 log_{10} （P_{input}&#x2F;P_{output \ or \ reference \ power}）<br>$$</p><p>The formula for Volts to <strong>dBV</strong> conversion is:<br>$$<br>dBV &#x3D; 20*log(xV)<br>$$<br><strong>6dB &#x3D;&gt; 2 times voltage, 3dB &#x3D;&gt; 2 times power.</strong></p><p> And hence, the reverse formula for dBv to Volts conversion is:<br>$$<br>Volts &#x3D; 10^{\frac{dBV}{20}}<br>$$<br>Power level in decibels relative to 1 V (volts) power. dB in Acqua acoustic test is 1 Vrms (root mean square value of voltage) as the reference voltage value. So at this point, 0 dB is 1 Vrms, the maximum value. Power level relative to 1 mW (milliwatt) power, in decibels.<em><strong>dBm &#x3D; decibel of milliwatt (mW)</strong></em><br>$$<br>dBm &#x3D; 10 *log(xm \ W) \<br>10 log_{10}(signal \ power&#x2F;1 mW) \<br>1 mW &#x3D; 0  \ dBm \<br>10 mW &#x3D; 10 \ dBm \<br>100 mW &#x3D; 20 \ dBm \<br>40 W &#x3D; 46 \ dBm<br>$$</p><p>$$<br>20 log_{10}(2)dB &#x3D; 6.02 dB \<br>20 log_{10}(3)dB &#x3D; 9.54 dB \<br>20 log_{10}(4)dB &#x3D; 12.04 dB \<br>20 log_{10}(5)dB &#x3D; 13.97 dB \<br>20 log_{10}(6)dB &#x3D; 15.56 dB \<br>$$<br>**dBFS &#x3D; dBm0 &#x3D; dBm relative to a 0 transmission point &#x3D; dB relative to digital overload point, 0dB0v &#x3D; full scale.. **</p><p><strong>dBv is a logarithmic voltage ratio with a voltage reference of 1 Volt.</strong></p><p>1 V is equivalent to 0 dBv.</p><h1 id="Electroacoustic-System-Hardwares"><a href="#Electroacoustic-System-Hardwares" class="headerlink" title="Electroacoustic System Hardwares"></a>Electroacoustic System Hardwares</h1><h2 id="Loudspeaker"><a href="#Loudspeaker" class="headerlink" title="Loudspeaker"></a>Loudspeaker</h2><p><img src="/../images/image-20220830153601503.png" alt="image-20220830153601503"></p><p>The three main parts of the speaker.</p><p><strong>Diaphragm</strong>： 振膜</p><p><strong>Voice coil</strong>：音圈</p><p><strong>Magnetic circuit</strong>： 磁路</p><p>Diaphragm motion produces an analogous electrical signal. </p><p>The diaphragm movement generates an analog signal, while the thick diaphragm affects frequency response, transient response and sensitivity.</p><p>Large diaphragm size: high sensitivity, narrow band width.</p><p>Small diaphragm size: low sensitivity, wide bandwidth.</p><p>Active: It has an internal oscillation source, which can start oscillating as long as it is connected to DC power.</p><p>Passive: that is, its internal without a source of vibration, to be connected to AC to start the vibration, coils and magnets, the current goes up as soon as it passes, down as soon as it is disconnected, so that you can produce a vibration circuit, so that by controlling this one up and down, I can control the frequency of this vibration. Once the electricity is energized, there is a magnetic, up, a disconnect, no magnetic down. Passive include: oscillator, electromagnetic coil, magnet, vibration diaphragm and shell composition. We only give high and low high and low, this passive will ring.</p><h2 id="Microphone"><a href="#Microphone" class="headerlink" title="Microphone"></a>Microphone</h2><h3 id="Microphone-type"><a href="#Microphone-type" class="headerlink" title="Microphone type"></a>Microphone type</h3><ul><li>Dynamic Mic: Dynamic Coil</li><li>Condensor: Condenser Microphone</li><li>Pure Condensor: Pure condenser microphone</li><li>Electret condenser (“pre-polarized”) condenser microphones</li><li>MEMS (micro-electro-mechanical system) microelectromechanical microphones  </li><li>Miniature electret condenser: Miniature electret condenser microphone</li></ul><h4 id="MEMS-microphones"><a href="#MEMS-microphones" class="headerlink" title="MEMS microphones."></a>MEMS microphones.</h4><p>We generally choose MEMS microphones. A MEMS microphone is composed of a MEMS chip and an ASIC chip.<br>MEMS microphone classification and selection: <a href="https://www.klippel.de/s">https://www.klippel.de/s</a></p><p><img src="/../images/image-20220830160459517.png" alt="image-20220830160459517"></p><p>The voltage value of the output analog signal of a digital microphone is usually PDM or I²S. The output signal of a digital signal microphone can communicate directly with a DSP or SoC, which does not need a Codec at this time, thus reducing the cost of the system.</p><p>The microphone is based on the clk to adjust the value of the size, the digital microphone can be adjusted by adjusting the sensitivity to achieve the effect of AOP constant. Sensitivity and AOP are related, sensitivity can be reduced to improve AOP.</p><p>The AOP effect will be higher with differential signals. For the microphone to distort 1% of the time the point, and AOP is generally 5, 6 dB difference.</p><h4 id="Digital-PDM-Microphones"><a href="#Digital-PDM-Microphones" class="headerlink" title="Digital (PDM) Microphones"></a>Digital (PDM) Microphones</h4><p><a href="https://www.cuidevices.com/blog/analog-or-digital-how-to-choose-the-right-mems-microphone-interface">https://www.cuidevices.com/blog/analog-or-digital-how-to-choose-the-right-mems-microphone-interface</a><br>A PDM microphone is a digital microphone. Digital microphones generally take 4 to more pins, but analog ones generally three. The advantage of analog microphones is that they are small in size and do not take up much space generally *2.5mm,*<em>3.35mm</em>0.88mm or smaller. But PDM microphone is generally <em>3mm</em>, *4mm,*1mm, if we consider the alignment and space size, too small, we will have to consider the analog microphone.</p><p><img src="/../images/image-20220830160555817.png" alt="image-20220830160555817"></p><h4 id="I2S-microphone"><a href="#I2S-microphone" class="headerlink" title="I2S  microphone"></a>I2S  microphone</h4><p>The I2S microphone output can then be output directly to the I2S device without a codec.</p><p><img src="/../images/image-20220830160746952.png" alt="image-20220830160746952"></p><p><a href="https://www.analog.com/media/en/technical-documentation/technical-articles/Analog-and-Digital-MEMS-Microphone-Design-Considerations-MS-2472.pdf">https://www.analog.com/media/en/technical-documentation/technical-articles/Analog-and-Digital-MEMS-Microphone-Design-Considerations-MS-2472.pdf</a></p><p><a href="https://ez.analog.com/audio/w/documents/511/faq-can-a-digital-microphone-s-pdm-output-be-directly-connected-to-an-i2s-input">https://ez.analog.com/audio/w/documents/511/faq-can-a-digital-microphone-s-pdm-output-be-directly-connected-to-an-i2s-input</a></p><p><a href="https://www.digikey.com/en/product-highlight/k/knowles/i2s-output-digital-microphone">https://www.digikey.com/en/product-highlight/k/knowles/i2s-output-digital-microphone</a></p><p><img src="/../images/image-20220830160754871.png" alt="image-20220830160754871"></p><p><a href="https://www.digikey.com/en/product-highlight/k/knowles/i2s-output-digital-microphone">https://www.digikey.com/en/product-highlight/k/knowles/i2s-output-digital-microphone</a></p><p>I2S microphone example: <a href="http://www.analog.com/en/audiovideo-products/mems-microphones/admp441/products/product.html">ADMP441 </a>, I2S can easily be replaced, but the mainstream is still PDM now.</p><h2 id="Audio-Power-Amp-（PA"><a href="#Audio-Power-Amp-（PA" class="headerlink" title="Audio Power Amp （PA)"></a>Audio Power Amp （PA)</h2><p>The amplification can be the <code>gain factor</code>. </p><p>There is no electrical signal from the horn, because the horn is a passive device, so the measured signal is actually the PA.</p><p>Here are the basic params to describe the Audio PA. We will only use the sin waves to do the testing here. </p><p><img src="/../images/image-20220830231622130.png" alt="image-20220830231622130"></p><p><img src="/../images/image-20220830231726241.png" alt="Power and Loudness"></p><p>Since every <strong>10 dBFS</strong> decrease, then the theoretical value of the measured power will decrease by a factor of <strong>10</strong>.</p><p><strong>10dBFS &#x3D; 10log(P1&#x2F;P2)</strong></p><p><strong>1dBFS &#x3D; log(P1&#x2F;P2)</strong></p><p><strong>(P1&#x2F;P2) &#x3D; 10</strong></p><p>Therefore it can be seen that P1 should be ten times larger than P2, which is the parameter after the change.</p><p>Channel: 我们对于耳机一般选择双声道（dual），对于喇叭而言，我们既可以双声道也可以单声道。</p><p>20hz ~ 20kHz ± 0.2 dB ：代表以1000Hz为参照的测量.</p><h3 id="Loudness-Level（电声压）"><a href="#Loudness-Level（电声压）" class="headerlink" title="Loudness Level（电声压）"></a>Loudness Level（电声压）</h3><p>RMS level (Rooted Mean Square level): Mean Square* level</p><p>MOL (Maximum Output Level): Maximum output level &#x2F; minimum output level</p><p>Relative Level （电位差）</p>        <div id="aplayer-yKDeRlCd" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-yKDeRlCd"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "0dBFS_1k_L+R",              author: "**最大输出电平**",              url: "../audio/最大输出电平_0dBFS_1k_L+R.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h3 id="Dynamic-Range"><a href="#Dynamic-Range" class="headerlink" title="Dynamic Range"></a>Dynamic Range</h3>        <div id="aplayer-olLvqUxZ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-olLvqUxZ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "20Hz-20KHz_Frequency Sweep_61pt_slow",              author: "动态范围",              url: "../audio/动态范围扫频_20Hz-20KHz_Frequency-Sweep_61pt_slow.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>*<strong>动态范围Dynamic Range_1kHz-60dB*</strong></p>        <div id="aplayer-RnTnoytk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-RnTnoytk"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Dynamic-Range_1kHz-60dB",              author: "动态范围",              url: "../audio/动态范围_Dynamic-Range_1kHz_-60dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>Dynamic range refers to the system playback, the maximum undistorted output power and static system noise output power ratio of the logarithmic value</p><p>Dynamic range is the difference between two signals, usually we just listen to a large signal (0 dB), and then listen to a small signal (-60 dB) or need to subtract this result with 60 to see the difference.</p><p>Sweep in the AP software, we have to choose: 20 Hz - 20 kHz, 1&#x2F;6 Oct (61 pt, slow), and do not choose Append Graph Data, this option will keep the last results.</p><h3 id="Distortion"><a href="#Distortion" class="headerlink" title="Distortion"></a>Distortion</h3><p>*<strong>总谐波失真和左右声道相位差_MaximumOutputLevel &amp;THD+N&amp; InterchannelPhase_1kHz_0dB互调失真_IMD_70+7K*</strong></p>        <div id="aplayer-LuHcLzbN" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-LuHcLzbN"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "THD+N& InterchannelPhase_1kHz_0dB",              author: "总谐波失真和左右声道相位差",              url: "../audio/_总谐波失真和左右声道相位差_MaximumOutputLevel-THDN-InterchannelPhase_1kHz_0dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>·    <strong>THD+N :</strong> <strong>总协调参数失真+噪音</strong></p><p>Distortion of the sound after amplification. The smaller it is, the better.</p><p>IMD: Intermodulation distortion (20 Hz-20 kHz, 1&#x2F;6 Oct, 61: points)</p><p>MTD (Multi-tone distortion)</p><p>The type of non-linearity, when the amplitude of the output levels are both compressed and distorted is called <code>saturation</code>. </p><h3 id="Frequency-Response"><a href="#Frequency-Response" class="headerlink" title="Frequency Response"></a>Frequency Response</h3><p><strong>频率响应_Freq_sweep_61_0dB*</strong></p>        <div id="aplayer-szAfjcjU" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-szAfjcjU"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Freq_sweep_61_0dB",              author: "频率响应",              url: "../audio/_频率响应_Freq_sweep_61_0dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>Generally, the flatter the better.</p><p>Flatness: flatness</p><h3 id="Noise"><a href="#Noise" class="headerlink" title="Noise"></a>Noise</h3><p>*<strong>底噪_mute_silence_0dB*</strong></p>        <div id="aplayer-BWuiyGKf" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-BWuiyGKf"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "mute_silence_0dB",              author: "底噪",              url: "../audio/底噪_mute_0dB.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>*<strong>信噪比Dynamic Range_1kHz-60dB*</strong></p>        <div id="aplayer-JDDNDJmI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-JDDNDJmI"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Dynamic Range_1kHz-60dB",              author: "信噪比",              url: "../audio/_信噪比_Dynamic-Range_1kHz_-60dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>The noise will be noticeable and will clearly distort the outpu</p><p>·    Signal-to-Noise Ratio ：底噪率</p><p>·    POP noise</p><p>·    SNR （Signal-noise ratio）：<strong>Signal-to-noise ratio &#x3D; received signal power&#x2F;noise power</strong></p><p>Power Spectral Density: No &#x3D; 10^(-14.4) W&#x2F;Hz * B (Bandwidth: 20~20000Hz)。Noise Power&#x2F;Variance。 NoB单位dBm。来源：</p><h3 id="SNR"><a href="#SNR" class="headerlink" title="SNR"></a>SNR</h3><p>Dial 0dB first and then click noise. First measure the maximum electric sound pressure and then measure the bottom noise is also OK, count the difference. Signal-to-noise ratio and dynamic range is about the same. If you really can not switch, you can: maximum volume - noise bottom noise.</p><h3 id="Crosstalk"><a href="#Crosstalk" class="headerlink" title="Crosstalk"></a>Crosstalk</h3><p>*<strong>Crosstalk_left_only_1kHz_0dB*</strong></p>        <div id="aplayer-vdahSURE" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-vdahSURE"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Crosstalk_left_only_1kHz_0dB",              author: "Crosstalk",              url: "../audio/Crosstalk_left_only_1kHz_0dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>*<strong>Crosstalk_right_only_1kHz_0dB*</strong></p>        <div id="aplayer-XzjvjdEK" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-XzjvjdEK"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Crosstalk_right_only_1kHz_0dB",              author: "Crosstalk",              url: "../audio/Crosstalk_right_only_1kHz_0dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>*<strong>Crosstalk_sweep L to R 20to20k*</strong></p>        <div id="aplayer-AURrcQsN" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-AURrcQsN"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Crosstalk_sweep L to R 20to20k",              author: "Crosstalk",              url: "../audio/Crosstalk_sweep L to R 20to20k.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>The crosstalk curves from L to R are tested separately.</p><p>*<strong>Crosstalk_sweep R to L 20to20k*</strong></p>        <div id="aplayer-yNAFeVQs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-yNAFeVQs"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Crosstalk_sweep R to L 20to20k",              author: "Crosstalk",              url: "../audio/Crosstalk_sweep R to L 20to20k.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>The crosstalk curves from L to R are tested separately.</p><p>It means that there is no correlation between the two channels and they are independent of each other.</p><h3 id="Phase"><a href="#Phase" class="headerlink" title="Phase"></a>Phase</h3><p><strong>左右声道相位差_MaximumOutputLevel &amp;THD+N&amp; InterchannelPhase_1kHz_0dB*</strong></p>        <div id="aplayer-xdIcKoTY" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-xdIcKoTY"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "MaximumOutputLevel &THD+N& InterchannelPhase_1kHz_0dB",              author: "左右声道相位差",              url: "../audio/左右声道相位差_MaximumOutputLevel &THD+N& InterchannelPhase_1kHz_0dB.wav",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>We generally use 16bit audio for testing.</p><p>The difference between speakers and headphones is Balanced and Unbalanced, other operations are the same.</p><h2 id="Boost-and-Charge-pump"><a href="#Boost-and-Charge-pump" class="headerlink" title="Boost and Charge pump"></a>Boost and Charge pump</h2><p>Boost is high because of the DCDC, which uses an inductor. (The use of inductor current can not change the characteristics of the sudden)<br>Charge pump is reversed by capacitor, because the capacitor is very stable at both ends, but charge pump is generally very small boost multiplier, with the use of capacitors. charge pump is a charge pump boost, with the capacitor charging characteristics to complete the boost. charge pump uses capacitive energy storage, the same as the pump (a tube a tube), the charge through the capacitor (a capacitor Capacity size of the power) in series to boost the way. Charge after use, use after recharge.</p><p>boost</p><p><strong>advantages</strong>: Any voltage value efficiency can be to more than 90%, do a good company, can do 95%<br><strong>Disadvantages</strong>: need inductors, occupy a lot of area, but also need to prevent EMI mess.<br>charge pump</p><p><strong>advantages</strong>: Using the capacitive method, the volume advantage comes out.<br><strong>Disadvantages</strong>: VOUT voltage for the vin voltage of the integer times when the efficiency reaches the highest, other times, the efficiency will have an impact.</p><h1 id="Modulation"><a href="#Modulation" class="headerlink" title="Modulation"></a><strong>Modulation</strong></h1><p><img src="/../images/image-20220830185359432.png" alt="https://en.wikipedia.org/wiki/Delta-sigma_modulation#/media/File:Modulation_categorization.svg"></p><h2 id="Audio-Files-Formats"><a href="#Audio-Files-Formats" class="headerlink" title="Audio Files Formats"></a>Audio Files Formats</h2><h3 id="Pulse-Code-Mudulation"><a href="#Pulse-Code-Mudulation" class="headerlink" title="Pulse Code Mudulation"></a>Pulse Code Mudulation</h3><p>PCM is multi-segmented to save the audio data files of CDs and PCM files are very easy to edit.</p><table><thead><tr><th><strong>Pulse modulation</strong></th><th></th></tr></thead><tbody><tr><td><strong>Analog</strong></td><td><a href="https://zh.wikipedia.org/wiki/%E8%84%89%E5%86%B2%E5%B9%85%E5%BA%A6%E8%B0%83%E5%88%B6">PAM</a> · <a href="https://zh.wikipedia.org/wiki/%E8%84%89%E5%86%B2%E5%AF%86%E5%BA%A6%E8%B0%83%E5%88%B6">PDM</a> · <a href="https://zh.wikipedia.org/wiki/%E8%84%89%E5%86%B2%E4%BD%8D%E7%BD%AE%E8%B0%83%E5%88%B6">PPM</a></td></tr><tr><td><strong>Digital</strong></td><td><a href="https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E7%B7%A8%E7%A2%BC%E8%AA%BF%E8%AE%8A">PCM</a> · <a href="https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E5%AF%AC%E5%BA%A6%E8%AA%BF%E8%AE%8A">PWM</a></td></tr></tbody></table><p><img src="/../images/image-20220830185640372.png" alt="[https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E7%B7%A8%E7%A2%BC%E8%AA%BF%E8%AE%8A](https://zh.wikipedia.org/wiki/脈衝編碼調變) "></p><p>8, 9, 11, 12, 13, 14, 15, 15, 15, 14…etc. They are binary encoded to obtain a set of numbers: 1000, 1001, 1011, 1100, 1101, 1110, 1111, 1111, 1111, 1111, 1111, 1111…etc. These digital data can then be processed by DSPs or general CPUs for specific applications.</p><p>A unit of audio data is represented by multiple bytes, and a unit is represented by a fixed amount of bytes in a segment. So its effect is determined by the sample rate and depth.</p><p><img src="/../images/image-20220830185803031.png" alt="image-20220830185803031"></p><p>The filter filters the input square wave into a sinusoidal signal. the AP’s filter is to filter the square wave signal into a sinusoidal signal, which incidentally also reduces noise.</p><h3 id="PWM-Modulator"><a href="#PWM-Modulator" class="headerlink" title="PWM Modulator"></a><strong>PWM Modulator</strong></h3><p><img src="/../images/image-20220830185905173.png" alt="https://electronics.stackexchange.com/questions/391545/pwm-pam-pcm-sine-generation-and-usage-confusion"></p><p><img src="/../images/image-20220830190155188.png" alt="image-20220830190155188"></p><p><img src="/../images/image-20220830190205285.png" alt="https://www.arduino.cc/en/Tutorial/Foundations/PWM"></p><p>It is a segment of signals, each segment represents multiple points, and then the data is represented by each segment.</p><h3 id="PDM-Modulator"><a href="#PDM-Modulator" class="headerlink" title="PDM Modulator"></a><strong>PDM Modulator</strong></h3><p><img src="/../images/image-20220830190254694.png" alt="image-20220830190254694"></p><p>PDM is capable of transferring analog voltages into a single bit data stream. the output of PDM is PCM data that needs to be transferred via the I2S protocol. Compared to PCM has a higher sampling rate, because PCM by segment bytes to sample the audio data representation.<br>This is increasingly used in microphone acquisition and can be used to acquire high power consumption and high fidelity data.</p><p><img src="/../images/image-20220830190323321.png" alt="https://www.rfwireless-world.com/Terminology/Advantages-and-Disadvantages-of-Pulse-Density-Modulation.html"></p><p><img src="/../images/image-20220830190517184.png" alt="image-20220830190517184"></p><p>Here are the example product:</p><p><strong>MIC</strong>: <a href="http://www.analog.com/en/audiovideo-products/mems-microphones/admp421/products/product.html">ADMP421</a> or <a href="http://www.analog.com/en/audiovideo-products/mems-microphones/admp521/products/product.html">ADMP521</a>  </p><p><strong>Codec</strong>：  <a href="http://www.analog.com/en/audiovideo-products/audio-codecs/adau1361/products/product.html">ADAU1361 </a>and <a href="http://www.analog.com/en/audiovideo-products/audio-signal-processors/adau1761/products/product.html">ADAU1761</a></p><p>The microphone can’t be directly connected to the I2S device after capture, it needs to be connected to a codec again.</p><p><em>Refereces:</em></p><p><a href="https://www.latticesemi.com/zh-CN/Products/DesignSoftwareAndIP/IntellectualProperty/ReferenceDesigns/ReferenceDesign04/PDM">https://www.latticesemi.com/zh-CN/Products/DesignSoftwareAndIP/IntellectualProperty/ReferenceDesigns/ReferenceDesign04/PDM</a></p><p><a href="http://users.ece.utexas.edu/~bevans/courses/rtdsp/lectures/10_Data_Conversion/AP_Understanding_PDM_Digital_Audio.pdf">http://users.ece.utexas.edu/~bevans/courses/rtdsp/lectures/10_Data_Conversion/AP_Understanding_PDM_Digital_Audio.pdf</a></p><h3 id="The-Difference-Comparing"><a href="#The-Difference-Comparing" class="headerlink" title="The Difference Comparing"></a>The Difference Comparing</h3><p>A practical difference is, microcontrollers, even the cheapest ones, offer multiple channels of PWM generators. They rarely offer PDM generators, so even if you’d actually prefer PDM, you end up using PWM because hardware does it for you, often at high clock frequency, so your CPU doesn’t need to run any code in real time, you can just fire-and-forget it.</p><p> PDM <em>could</em> be easily implemented in hardware; the pseudocodes Nominal Animal posted for PWM and PDM are both easily translated into digital logic (via hardware description language) and both have small silicon area; but due to tradition you just have PWM.</p><p> One may opt for a hybrid solution where the hardware PWM is used with a much shorter period (and hence, lower resolution), then a software loop “dithers” this PWM setpoint. The point is, the software doesn’t need to do this for every output symbol. The result is like a “clumped” PDM; compare these examples (just boring 50% duty because I’m lazier than Nominal Animal):</p><p><strong>Code:</strong> [<a href="javascript:void(0)">Select]</a> <strong><a href="https://www.eevblog.com/forum/beginners/pdm-vs-pwm/">https://www.eevblog.com/forum/beginners/pdm-vs-pwm/</a></strong></p><h1 id="Proctol"><a href="#Proctol" class="headerlink" title="Proctol"></a><strong>Proctol</strong></h1><h2 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a><strong>I2C</strong></h2><p><img src="/../images/image-20220830190924382.png" alt="https://www.engineersgarage.com/articles-raspberry-pi-i2c-bus-pins-smbus-smbus2-python/"></p><p>I2C can control multiple devices at the same time, but SPI can only control one. i2c transmits data, i2s transmits audio. i2c is used to transmit audio data, then the transmission of audio band will be very narrow, mainly because it can not do the full frequency range. i2c generally to control registers, but GPIO is the control of the hardware. That is to say, I2C is the SW part, and GPIO is the hardware to control. That is, the software to write registers is I2C control, hardware is GPIO pull pin to control.</p><h2 id="I2S"><a href="#I2S" class="headerlink" title="I2S"></a>I2S</h2><p><img src="/../images/image-20220830191000537.png" alt="https://microchipdeveloper.com/harmony:i2s-tutorial"></p><p>I2S cannot be used in the same way as I2C and is generally only used for audio devices. I2C can have multiple masters, but I2S can only have one. I2S performs better for audio transmission and is used to transmit PCM data, so that the codec can be directly avoided. <strong><a href="https://www.feasycom.com/blog-1050.html">https://www.feasycom.com/blog-1050.html</a></strong></p><p><img src="/../images/image-20220830191051142.png" alt="**Audio PAMA12070P**"></p><p><img src="/../images/image-20220830191110878.png" alt="On Audio Precision Test"></p><p>Here the connection should be connected to GND and ground, otherwise it can not be measured.<br><strong>WS&#x2F;LRCLK</strong><br>WS is selected for the field (channel), also known as LRCK, which is used to switch the data of the left and right channels. The frequency of LRCK is equal to the sampling frequency; LRCK takes one sample point per clock cycle, BCLK is 64fs, i.e., 64 bits of data per clock cycle.<br><strong>SCK&#x2F;BCLK (bit clock)</strong><br>Serial clock SCK, also called bit clock (BCLK), means that SCLK has 1 pulse for each bit of data corresponding to digital audio. frequency of SCLK &#x3D; 2 × sampling frequency × number of bits sampled. For supporting 32 bit, BCLK &#x3D; 2<em>44.1HZ</em>32&#x3D;2.8224MHZ.</p><p><strong>SD&#x2F;TDM DUT_D0: Data pin</strong><br>Serial Data SD (SDATA), is the audio data expressed in binary complement. In Philips’ I2S standard, both the hardware interface specification and the format of the digital audio data are specified. Sometimes, in order to enable better synchronization between devices, an additional signal MCLK, called the master clock, also called the system clock (Sys Clock), is 256 times or 384 times the sampling frequency.</p><p><a href="https://www.cnblogs.com/fellow1988/p/6294362.html">https://www.cnblogs.com/fellow1988/p/6294362.html</a></p><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><p><img src="/../images/image-20220830191304946.png" alt="https://www.mdpi.com/2079-9292/9/9/1509/htm"></p><p><em>References</em>:</p><p><strong><a href="https://www.crifan.com/common_audio_interface_tdm_pdm_i2s_pcm/">https://www.crifan.com/common_audio_interface_tdm_pdm_i2s_pcm/</a></strong></p><p>“All this functionality is implemented in a light-weight SPI interface so that any Feather Board can play audio from an SD card.”  <a href="https://learn.adafruit.com/adafruit-music-maker-featherwing/">https://learn.adafruit.com/adafruit-music-maker-featherwing/</a></p><h1 id="Audio-Measurements"><a href="#Audio-Measurements" class="headerlink" title="Audio Measurements"></a>Audio Measurements</h1><h2 id="Microphone-measurement-methods"><a href="#Microphone-measurement-methods" class="headerlink" title="Microphone measurement methods"></a>Microphone measurement methods</h2><p>Microphone three measurement methods.</p><ul><li><p>​Contrast test method</p><p>Compare the reference and the DUT microphone to be tested.</p></li><li><p>Two-channel transfer<br>Simultaneous measurement of the reference and the DUT microphone to be tested.</p></li></ul><p><img src="/../images/image-20220830160217690.png" alt="image-20220830160217690"></p><h1 id="Audio-Communication-Quality"><a href="#Audio-Communication-Quality" class="headerlink" title="Audio Communication Quality"></a>Audio Communication Quality</h1><h2 id="Loudness-Level"><a href="#Loudness-Level" class="headerlink" title="Loudness Level"></a>Loudness Level</h2><p>The loudness of the transmission and reception between the DUT and the network. Provides a known reference loudness value between the network and the DUT.<br>3GPP standard (narrowband).<br>Handheld: Transmit: 5.0 ~ 11.0dB Receive: -1.0 ~ 5.0dB<br>Hands-free: transmit: 9.0 ~ 17.0dB receive: 2.0 ~ 18.0dB<br>Positive value is attenuation, negative value is gain.<br>Attenuation is decrease<br>Gain is to increase.<br>Loudness level is very strange, positive value means decrease, negative value means increase. But for the hands-free words are to reduce, because it does not need to be to the ear on the line. The inverse square law: If any physical law, the distribution or intensity of a physical quantity decreases in the inverse square of the distance to the source, then this law can be called an inverse square law.</p><p>The loudness rating value does not indicate the actual perceived loudness, but rather measures the transmission loss of the system.<br>The acoustic signal is generally analog and what our human ear can capture, usually SPL sound, but during the channel transmission is voltage, i.e. Volts. It mainly measures the audio signal level between the DUT and the network, and it will affect the compatibility between the DUT and the network. If it is not tuned properly, it will cause the transmitted or received signal to be too loud.</p><p>Give a value for the acoustic signal reference, he will give. His presence essentially describes the relationship between <strong>y dBPa &#x3D; x dBV</strong> , which allows to get the correct conversion relationship.<br>The main reason for this is: the DUT is not tuned properly.</p><p>Sending direction: is the near-end speakers, sent to the opposite end of the signal is generally reduced by a few dB. because of the reduction of a few dB, so in the receiving side can gain a few dB and then compensate for the loss.</p><p>The frequency response is very much related to the loudness level.</p><p><img src="/../images/image-20220830193340585.png" alt="image-20220830193340585"></p><p><img src="/../images/image-20220830192850879.png" alt="image-20220830192850879"></p><p>The figure on the right is the difference between the two signals, the difference between the reference curve and the actual received curve, we can see that the difference is very small and very flat, indicating that the device below is a little better.</p><p><em>Reference:</em> ITU-T Recommendation P.79</p><h2 id="Frequency-Response-1"><a href="#Frequency-Response-1" class="headerlink" title="Frequency Response"></a>Frequency Response</h2><p>Frequency Response: describes how flat the loudness is. Frequency response is very much related to loudness level. The loudness level is an overall level, but the frequency response is a reflection of how smooth the response is. Here we are generally only concerned with how smooth the curve is here, not the size. The red line is the test curve, the blue line is the excitation signal we send to the device, when we subtract the difference between the two signals to get, this is the final of our frequency response curve.</p><h2 id="Delay"><a href="#Delay" class="headerlink" title="Delay"></a>Delay</h2><p>Can be eliminated by adjusting echo canller. The harder the echo cancellation. Longer delays require more aggressive echo cancellation.</p><p>Delay: The delay between the transmission and arrival of the voice signal. The unit is ms. The smaller the better.</p><p>Delay does not affect the quality of voice. The smaller the delay, the better.</p><p>When I talk to my microphone, the microphone is recorded. The signal recorded by the microphone is sent into the phone via codec.</p><p>Delay is generated for a variety of reasons, so its impact factors are many, need to improve the words need to be multiple dimensions to optimize the delay generated as follows. Multiple lines can cause the problem of delay.</p><p><img src="/../images/image-20220830192603531.png" alt="image-20220830192603531"></p><p><img src="/../images/image-20220830192615754.png" alt="image-20220830192615754"></p><p>The blue signal at this point is the transmitted excitation signal CSS burst, and the red one is the in-ear reception signal.</p><p>Here, the two signals are aligned, they calculate the initial similarity of the signals between each frame, and once the similarity is high, they are aligned, and then the intermediate delay time is calculated as shown by the arrow.</p><p><strong>Eg.</strong></p><p><img src="/../images/image-20220830193214428.png" alt="image-20220830193214428"></p><p>​                               </p><p>Delay (Cross): <strong>185.23 ms &#x3D; 0.185 s</strong></p><p><img src="/../images/image-20220830193234249.png" alt="image-20220830193234249"></p><h2 id="Noise-1"><a href="#Noise-1" class="headerlink" title="Noise:"></a>Noise:</h2><ol><li>Idle Channel Noise.<br>It is internal noise, similar to the bottom noise. The root cause of the generation of electronic noise in the audio path, low quality speakers or microphones.</li></ol><p>It is the noise floor. The internal bottom noise generated by the hardware when there is no signal at all.</p><p><img src="/../images/image-20220830193432504.png" alt="Level: -70.65 dBPa(A) Ok"></p><p><img src="/../images/image-20220830192931604.png" alt="image-20220830192931604"></p><p>Unit dBm0<br>Test principle.</p><blockquote><p>Test the response of DUT in a quiet environment</p><p>FFT conversion</p><p>calculate all the energy values.<br>The green signal in this is the excitation signal.</p></blockquote><ol start="2"><li><p>SFI (Single Frequency Interference)<br>Here the red line is the reference, that is, good, green is the actual test data beyond the bad place, the more beyond the more not.</p></li><li><p>In&#x2F;Out Band Signal</p></li></ol><h2 id="Distortion-1"><a href="#Distortion-1" class="headerlink" title="Distortion"></a><strong>Distortion</strong></h2><p>Non-linear response of the DUT. Causes: Low quality speakers or microphones, poor dynamic range performance. We tested with a sine signal to excite the response for each frequency band.</p><h2 id="Echo-the-bigger-the-better"><a href="#Echo-the-bigger-the-better" class="headerlink" title="Echo: the bigger the better"></a>Echo: the bigger the better</h2><p>Send an excitation signal to the receiving direction, we want to go to test how much echo is sent back from the receiving device, we test in the sending direction. It is when you can hear your voice in the sound sent by the other party, this time it is related to the other party and not to you. Root causes: long latency, devices that are not properly calibrated and no echo cancellation algorithm.<br>Near-end voice is green, far-end voice is red, and black indicates repeated parts.</p><p><img src="/../images/image-20220830192104094.png" alt="https://www.youtube.com/watch?v=yHJecWrk_E4 "></p><p>Echo counts is the loss is the echo cancellation effect, the greater the better.<br>Echo is a problem at the far end.<br>20ms &#x3D; 31dB<br>ITU-T G.131</p><p><img src="/../images/image-20220830192125217.png" alt="https://www.youtube.com/watch?v=yHJecWrk_E4 "></p><h2 id="DOUBLE-talk"><a href="#DOUBLE-talk" class="headerlink" title="DOUBLE talk"></a>DOUBLE talk</h2><p>A method looking for attenuation that occurs during double talk of varying severity.<br>Double talk has nothing to do with the quality of the call but can affect the experience.It is when one person is talking and other voices suddenly come out and affect the original signal.</p><p><img src="/../images/image-20220830192151548.png" alt="https://www.youtube.com/watch?v=yHJecWrk_E4 "></p><p><strong>Heavy doubletalk</strong>: It is when two people say the same text and at the same time. It is the scene of complete overlap.</p><h2 id="MOS"><a href="#MOS" class="headerlink" title="MOS"></a>MOS</h2><p>We don’t need a professional to listen to it, less time and money spent. The downside is that it doesn’t tell you why the sound quality is poor.</p><p>In order to improve the SNR ratio, we usually use linear and nonlinear noise cancellation algorithms. But these algorithms also have some degree of impact on the voice quality, which is difficult to avoid. To test the voice call quality, we measure the quality of voice calls by measuring MOS scores.</p><p>There are three main measures of <strong>MOS (Mean Subjective Opinion Score), noise transmission, and overall quality score</strong>.</p><p>The objective tests in the <strong>3QUEST</strong> model test, which includes both wideband and narrowband, mainly include</p><ol><li>Noise MOS score (N-MOS)</li></ol><p>The absolute value of background noise, and the effect of background noise on our audio signal.</p><ol start="2"><li>Voice MOS score (S-MOS)</li></ol><p>Test the SNR value of the voice, naturalness.</p><ol start="3"><li>Global MOS score (G-MOS)</li></ol><p>Nonlinear merging of S-MOS and N-MOS.</p><p>Equipment: </p><ul><li>Head Acoustics GmbH Version 3.5.200</li><li>ACQUA 3 Head System</li></ul><p><img src="/../images/image-20220830193531424.png" alt="image-20220830193531424"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="/../images/image-20220830192414403.png" alt="https://www.youtube.com/watch?v=yHJecWrk_E4 "></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Audio and speech Processing Theory</title>
    <link href="/2022/08/30/Audio-and-speech-Processing-Theory/"/>
    <url>/2022/08/30/Audio-and-speech-Processing-Theory/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Audio-Processing"><a href="#Audio-Processing" class="headerlink" title="Audio Processing"></a>Audio Processing</h1><h2 id="ADC-Analog-to-Digital-Codec"><a href="#ADC-Analog-to-Digital-Codec" class="headerlink" title="ADC (Analog to Digital Codec)"></a>ADC (Analog to Digital Codec)</h2><p><img src="/../images/image-20220830190323321.png" alt="https://www.rfwireless-world.com/Terminology/Advantages-and-Disadvantages-of-Pulse-Density-Modulation.html"></p><p>After the Microphone got the analog signals from the environment, it will pass through the codec and transform it into the digital data which only has “0”, and “1”. </p><p>The signals that continually trace the same path in this way are called periodic. </p><p>The shape that repeats is called a <strong>cycle</strong>, and the time it takes to repeat is called the <strong>period</strong>.</p><p>$$<br>f &#x3D; \frac{1}{p}<br>(f: freq, p: period)\<br>f &#x3D; rate * channel.num * sample.bits<br>$$</p><p>$$<br>dur(sec) &#x3D; \frac{bit.num}{bit&#x2F;sec}<br>$$</p><p>$$<br>dur(sec) &#x3D; \frac{size(mb) * 8 * 1024 * 1024}{sample.rate * bit.depth * channel.num }<br>$$<br>If there is 16 bit mono speech file:<br>$$<br>dur(sec) &#x3D; \frac{size(mb) * 8 * 1024 * 1024}{sample.rate * 16 * 1 }<br>$$</p><p>The sawtooth waveform is important in the study of production, as the vocal cords change the airflow from the lungs into a signal that looks similar to a sawtooth.</p><p>Square wave, or rectangle wave, or pulse trains. The signals differ in how long they stay at the top and bottom of their travel, their duty cycle (the proportion of period in which they are at their maximum).</p><p>Each of these lasts for a short time only, and hence they are known as <strong>transients</strong> (since they don’t hang around). <strong>Burst</strong> is happened in the human speech and they are part of the transients.</p><p>The rms amplitude is the most important way of specifying the amplitude of a signal because it presupposes the use of a related quantity - <strong>intensity</strong>.</p><p><a href="http://soundfile.sapp.org/doc/WaveFormat/">http://soundfile.sapp.org/doc/WaveFormat/</a></p><h2 id="Audio-Architecture"><a href="#Audio-Architecture" class="headerlink" title="Audio Architecture"></a>Audio Architecture</h2><p>We will use the <code>SDL</code> C++ lib package to explain this, and we will know from this that how computer render the audio files.</p><p>The most high level concept or the interface of the audio system from the <code>SDL</code> is the <code>IAudioContext</code>. </p><h4 id="IAudioContext"><a href="#IAudioContext" class="headerlink" title="IAudioContext"></a>IAudioContext</h4><p>The <code>IAudioConext</code> contains those operations:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">-<span class="hljs-attr">--playAudio</span> (AudioObject)<br>-<span class="hljs-attr">--PauseAudio</span> (AudioObject)<br>-<span class="hljs-attr">--StopAudio</span> (AudioObject)<br></code></pre></td></tr></table></figure><p>Another component is like <code>IAudioDevice</code>, it includes:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl">---<span class="hljs-function"><span class="hljs-title">CreateAudio</span>(<span class="hljs-variable">fileName</span>)</span><br>---<span class="hljs-function"><span class="hljs-title">ReleaseAudio</span>(<span class="hljs-variable">IAudioData</span>)</span><br></code></pre></td></tr></table></figure><p>We will also have an abstract idea, like there has <code>AudioObject</code>. This is the object of our audio system.</p><p>It includes:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">---GenerateSamples</span>(stream, len)<br><span class="hljs-built_in">---SetPos</span>(pos) # set the <span class="hljs-attribute">position</span> of the <span class="hljs-selector-tag">audio</span> rendering<br>-<span class="hljs-attr">--SampleInfo</span><br>----<span class="hljs-attr">--volume</span><br>----<span class="hljs-attr">--pitch</span><br>----<span class="hljs-attr">--loopLoc</span><br>----<span class="hljs-attr">--Panning</span><br>-<span class="hljs-attr">--IAudioData</span><br></code></pre></td></tr></table></figure><p>We got <code>IAudioData</code> to contain the audio data, they are generated from: <code>GenerateSamples(stream, len, Pos, SampleInfo)</code>.</p><h1 id="Speech-and-Language-Processing"><a href="#Speech-and-Language-Processing" class="headerlink" title="Speech and Language Processing"></a>Speech and Language Processing</h1><p>Here are the lifecycle of the speech features processing.</p><p><img src="/../images/image-20220917181359913.png" alt="image-20220917181359913"></p><h2 id="Short-time-analysis-Speech-Features"><a href="#Short-time-analysis-Speech-Features" class="headerlink" title="Short time analysis : Speech Features"></a>Short time analysis : Speech Features</h2><p>The feature in speech means that <code>an indivisual measurable property or characteristics of a phenomenon being observed.</code></p><p>The three principles of a good feature:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Informative   </span><br><span class="hljs-attribute">Discriminating</span><br><span class="hljs-attribute">Independent</span><br></code></pre></td></tr></table></figure><h3 id="Short-time-analysis"><a href="#Short-time-analysis" class="headerlink" title="Short time analysis"></a>Short time analysis</h3><p>The basic idea is to break the audio frames into small trunks, which range from <code>10ms ~ 30ms</code>, so we will think in a more micro way. In this way, each trunk will be stationary. And those trunks we will call it <code>frames</code>.  In video processing, each image you captured is a frame, but in speech processing, we will only know the <strong>dense samples</strong> since we only use the <code>frame</code> for analyzing. </p><h4 id="Framing"><a href="#Framing" class="headerlink" title="Framing"></a>Framing</h4><p><img src="/../images/image-20220917174531894.png" alt="image-20220917174531894"></p><p>There are two concepts from the framing:</p><ol><li>frame size: the duration of each frame</li><li>frame step&#x2F;stride: the temporal distance between two consecutive frames</li></ol><p>Three principles of framing:</p><ol><li>Size &gt; Step (Mostly used way, so they can share overlaps)</li><li>Size &#x3D; Step (So each sampling point only belongs to a specific frame)</li><li>Size &lt; Step (So there may have gaps between different frames, which is not suggested since it can lose some info)</li></ol><p>Eg:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> sec audio file with <span class="hljs-number">16</span>KHz sample rate, frame size: <span class="hljs-number">25</span>ms, frame step(stride): <span class="hljs-number">10</span>ms<br><br><span class="hljs-attribute">Nums_frames</span> = <span class="hljs-number">1</span> second/ <span class="hljs-number">10</span>ms = <span class="hljs-number">100</span><br><span class="hljs-attribute">Nums_samples</span> per frame: <span class="hljs-number">16</span> KHz * <span class="hljs-number">0</span>.<span class="hljs-number">025</span>s = <span class="hljs-number">400</span><br><br></code></pre></td></tr></table></figure><h4 id="Window-function"><a href="#Window-function" class="headerlink" title="Window function"></a>Window function</h4><p><img src="/../images/image-20220917175421567.png" alt="image-20220917175421567"></p><p>In order to solve the framing discontinuity problem, we need to use the windowing function. Because when we do the framing, it will make the original speech signal with no boundary connections, which can cause discontinuity (Gibbs Phenomenon: <strong>undesired high frequency components</strong> and <strong>spectral leakage</strong>). </p><p>The logic of the windowing function is to give each frame a weight, near the edge values we make it <strong>close to 0</strong>, if in the middle frame, we keep it untouched. <img src="/../images/image-20220917175904984.png" alt="image-20220917175904984"></p><h5 id="Gaussian-Windowing"><a href="#Gaussian-Windowing" class="headerlink" title="Gaussian Windowing"></a>Gaussian Windowing</h5><h5 id="Hanning-Windowing-amp-Hamming-Windowing"><a href="#Hanning-Windowing-amp-Hamming-Windowing" class="headerlink" title="Hanning Windowing &amp; Hamming Windowing"></a>Hanning Windowing &amp; Hamming Windowing</h5><p><img src="/../images/image-20220917180023833.png" alt="image-20220917180023833"></p><p>Hamming windowing will set the edge totally like close to 0, but hamming window will slightly not that harsh.</p><h4 id="Frame-Post-Processing"><a href="#Frame-Post-Processing" class="headerlink" title="Frame Post Processing"></a>Frame Post Processing</h4><p>After we did the framing and the windowing, we need to do some frame post processing.</p><p>They includes:</p><ol><li>Frame Stacking : Stacking the neighboring frames into a single super frame, it will combine the relevant frames into a bigger frame.</li></ol><p><img src="/../images/image-20220917180656489.png" alt="image-20220917180656489"></p><p>As shown it will copy each frame from the previous frame, it will help us to know more information from the previous frame. The <code>?</code> frame from the graph can be replaced by 1st frame.</p><ol start="2"><li>Frame Subsampling: Drop some frame.</li></ol><p>It will help us to reduce the computational cost. </p><p><img src="/../images/image-20220917181019732.png" alt="image-20220917181019732"></p><p>We mostly do the Frame Stacking and then is the Frame Subsampling. </p><ol start="3"><li>Frame Normalization: Optimize the numeric values to follow the Normal Distributions.</li></ol><p><img src="/../images/image-20220917181123310.png" alt="image-20220917181123310"></p><p>The normalization parts  helped us to <code>converge</code> when we do the training.</p><p><img src="/../images/image-20220917181318336.png" alt="image-20220917181318336"></p><h3 id="Feature-Extraction"><a href="#Feature-Extraction" class="headerlink" title="Feature Extraction"></a>Feature Extraction</h3><h4 id="Global-Acoustic-Features-Stationary-features"><a href="#Global-Acoustic-Features-Stationary-features" class="headerlink" title="Global Acoustic Features (Stationary features)"></a>Global Acoustic Features (Stationary features)</h4><p>The global acoustic features are mostly stationary features, since we always need to get the whole audio files then can we processing those features.</p><p>Also if the speech signal is very <strong>periodic</strong> signal which are very stable, then it is very useful to discuss about those global acoustic features. But to many speech signals they are not periodic, if we use the stationary features to describe the whole speech signal, which will <strong>lose some details of the speech</strong>. And another question could be, the stationary features will be extremely sensible to the <strong>noise</strong>. </p><h5 id="Fundamental-frequency-f0"><a href="#Fundamental-frequency-f0" class="headerlink" title="Fundamental frequency (f0)"></a>Fundamental frequency (f0)</h5><h5 id="Formants-f1-and-f2"><a href="#Formants-f1-and-f2" class="headerlink" title="Formants (f1 and f2)"></a>Formants (f1 and f2)</h5><h5 id="Intensity"><a href="#Intensity" class="headerlink" title="Intensity"></a>Intensity</h5><h3 id="Time-Domain-Features"><a href="#Time-Domain-Features" class="headerlink" title="Time Domain Features"></a>Time Domain Features</h3><p>We can extract the features directly from the waveform without the Fourier transform.</p><p>Here are the usual time domain features:</p><p><strong>Short Time Energy</strong></p><p>It mostly used in VAD, if high energy &#x3D;&gt; speech signal, and in Automatic Gain Control (AGC).</p><p><strong>Short Time Average Magnitude</strong></p><p><strong>Short-time Zero Cross Rate (ZCR)</strong></p><p><strong>Short-time Autocorrelation</strong></p><p>We will delay the signals by k samples, then compute the <code>correlation</code>. </p><p><img src="/../images/image-20220919014841416.png" alt="image-20220919014841416"></p><p>We will mostly use this in the <strong>pitch detection</strong>! </p><p><strong>Short-time average magnitude difference function (AMDF)</strong></p><p>We will delay the signals by k samples, then compute the <code>difference</code>.</p><p><img src="/../images/image-20220919015020116.png" alt="image-20220919015020116"> </p><p>For the short-time AMDF, we use:</p><p><img src="/../images/image-20220919015035225.png" alt="image-20220919015035225"></p><p>It just like the autocorrelation, but it is very good for the pitch dection. </p><p><strong>Short Time Linear Predictive Coding (LPC)</strong></p><p>We will assume that each sample can be approximated by previous samples via linear combinations:</p><p><img src="/../images/image-20220919015237395.png" alt="image-20220919015237395"></p><p>$$<br>The \ combination \ of \ the \ previous \ ks \ samples : a_{i} \<br>the \ difference : e[n] \<br>Each \ frame \ has \ N \ Samples<br>$$</p><h3 id="Frequency-Domain-Features"><a href="#Frequency-Domain-Features" class="headerlink" title="Frequency Domain Features"></a>Frequency Domain Features</h3><p>We need to do the Fourier transform firstly, and this is always be used. </p><h1 id="Speech-Production-Model"><a href="#Speech-Production-Model" class="headerlink" title="Speech Production Model"></a>Speech Production Model</h1><p>The voiced and unvoiced speech mostly for 10~20 ms. </p><p><img src="/../images/image-20220830144931149.png" alt="Pic From: http://eemedia.ee.unsw.edu.au/contents/elec9344/LectureNotes/Chapter%201.pdf"></p><p>The vocal tract model can be understood by a filter equation, here can be the transfer function, the <code>n</code> means the filers you want to have:<br>$$<br>\frac{1}{1 + b_{1}z^{-1} + b_{2}z^{-2} + b_{n}z^{-n} }<br>$$</p><p>The Radiation model here means the <code>lip model</code>. </p><p>Vocal fold can become a <strong>signal system</strong>.  It has a input signal, and transmitted into a system and output a processed speech signals. So if in vocal tract, it will be the voice source signal, and pass the vocal tract it will be the speech signal.</p><p>The human speech model can be a <code>LTI (Linear Time Invariant)</code> system. LTI system can be both linear and time-invariant, and can be homogenous (k * input signal and k * output signal, which can be a linear addiction, in a, <code>frequency</code> is the same, when got <code>statuation</code> or <code>overanged</code> it could be not LTI system) and additive (sum of the two signals, signals can be added and transferred). Linear can be &#x3D; <code>homogeneity + additivity</code>.</p><p>A system that is <code>time-invariant</code> does not change over time, in (t-delay) &#x3D;&gt; out (t-delay). For a sinusoid, a change in time is equivalent to a change in phase, a sin wave and a cosine wave differes only in time. </p><p>We will assume the vocal tract is a LTI system, but in reality it is not, we just gave an assumption, it is <code>time-variant</code>. We are treating some vocal tract <code>noise</code> into a LTI system. </p><p>But we only need to know the response of an LTI system to sinusoids. </p><p><a href="http://www.speechandhearing.net/laboratory/esystem/">www.speechandhearing.net/laboratory/esystem/</a></p><h1 id="Linguistics-amp-Phonetics"><a href="#Linguistics-amp-Phonetics" class="headerlink" title="Linguistics &amp; Phonetics"></a>Linguistics &amp; Phonetics</h1><p>Linguistics can be a science about hyposis and experimental research. We study human languages as a natural phenomenon, and this is what linguistics about. And linguistics should not used as a mean of discrimination. </p><p>From <strong>Panini</strong>, we still use his <strong>level of analysis</strong> study about Sanskrit linguistics:</p><ol><li>Phonology (Sound Difference for each phone in difference languages)</li><li>Morphology (格)</li><li>Syntax </li><li>Lexicon （like the dictionary)</li></ol><p><strong>Contemporary linguistics is about unwealing the hidden rules of the languages.</strong></p><p>Basically, the system of language and the system of societies and cultures can be analysed in a similar way.  <strong>So its about data so much, it called Structurism.</strong> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMake for Audio and Speech Processing</title>
    <link href="/2022/08/29/CMake-for-Audio-and-Speech-Processing/"/>
    <url>/2022/08/29/CMake-for-Audio-and-Speech-Processing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Cmake-Basic-Files"><a href="#Cmake-Basic-Files" class="headerlink" title="Cmake Basic Files"></a>Cmake Basic Files</h1><h2 id="Two-Essential-Lines"><a href="#Two-Essential-Lines" class="headerlink" title="Two Essential Lines"></a>Two Essential Lines</h2><p>For any cmake project, we need to have a <code>CMakeLists.txt</code> file, there are two scripts are fixed:</p><figure class="highlight plaintext"><figcaption><span>line ``` is mostly about the ```cmake version```.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1st"><br>```cmake<br>cmake_minimum_required(VERSION 3.1)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>line``` is the project name:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 2st"><br>```camke<br>project(kaldi)<br></code></pre></td></tr></table></figure><h2 id="Include-DIR"><a href="#Include-DIR" class="headerlink" title="Include DIR"></a>Include DIR</h2><p>Next step is to call or include the DIRs you need, the DIR can be the environmental files or other files:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>here means the current absolute path, ```include``` is the sub-directory.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMAKE_SOURCE_DIR```"><br><br><br>## Executable CMake<br><br>After finish all the settings there, just use this line:<br><br>```cmake<br>add_executable(output_cmake_exe the_cpp_file.cpp the_cpp_file2.cpp)<br></code></pre></td></tr></table></figure><h2 id="Compile-the-code"><a href="#Compile-the-code" class="headerlink" title="Compile the code"></a>Compile the code</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">cmake .<br>make -j<br>make install<br></code></pre></td></tr></table></figure><h1 id="Some-Great-Open-Resource-tools"><a href="#Some-Great-Open-Resource-tools" class="headerlink" title="Some Great Open Resource tools"></a>Some Great Open Resource tools</h1><p>World: <a href="https://github.com/mmorise/World">https://github.com/mmorise/World</a></p><p>Athena-signal processing open source library: <a href="https://github.com/athena-team/athena-signal">https://github.com/athena-team/athena-signal</a></p><p>SPTK: <a href="https://github.com/sp-nitech/SPTK">https://github.com/sp-nitech/SPTK</a></p><p>WebRTC AEC AGC ANC NS示例: <a href="https://github.com/shichaog/WebRTC-audio-processing">https://github.com/shichaog/WebRTC-audio-processing</a></p><p>AudioTutorials: <a href="https://github.com/BennyQBD/AudioTutorial">https://github.com/BennyQBD/AudioTutorial</a></p><p>SoundTouch Audio Processing Library: <a href="https://www.surina.net/soundtouch/index.html">https://www.surina.net/soundtouch/index.html</a></p><p>STRAIGHT Library (<a href="http://www.kisc.meiji.ac.jp/~mmorise/straight/english/">http://www.kisc.meiji.ac.jp/~mmorise/straight/english/</a>)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Speech Synthesis Toolkits Introduction</title>
    <link href="/2022/08/25/Speech-Synthesis-Toolkits-Introduction/"/>
    <url>/2022/08/25/Speech-Synthesis-Toolkits-Introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="About-TTS-Text-to-Speech"><a href="#About-TTS-Text-to-Speech" class="headerlink" title="About TTS (Text to Speech)"></a>About TTS (Text to Speech)</h1><p>The first thing is about text analysis process</p><ul><li>Word division, annotation, lexical annotation, rhyme prediction, etc.</li><li>Representation of normalized transcripts as phoneme-level text features</li><li>The length M of text features is only related to the transcript itself, not to the speech duration.</li></ul><p>We are usually talk about the stastical Speech Synthesis. After we doing the text analysis, we will just get into the acoustic generation part. </p><h4 id="Duration-Model"><a href="#Duration-Model" class="headerlink" title="Duration Model"></a>Duration Model</h4><p>The input will be the HMM output labels and transform into one-hot features, along with the statistical features.</p><p>Output will be the phone duration and the time of the states. In HMM,  we will get a frame level alignment. </p><h4 id="Acoustic-Model"><a href="#Acoustic-Model" class="headerlink" title="Acoustic Model"></a>Acoustic Model</h4><p>The input will be the frame level info, the output will be the spectrum params, the f0, along with the vowels, and consonants. After feeding those params into the vocoder, we will get the speech. </p><p>For every statistical model, the most important parts can be: the <code>acoustic model</code>, and <code>vocoder</code>.</p><h2 id="Acoustic-Generation"><a href="#Acoustic-Generation" class="headerlink" title="Acoustic Generation"></a>Acoustic Generation</h2><h3 id="HMM-based-acoustic-model"><a href="#HMM-based-acoustic-model" class="headerlink" title="HMM based acoustic model"></a>HMM based acoustic model</h3><h4 id="Text-Analysis"><a href="#Text-Analysis" class="headerlink" title="Text Analysis"></a>Text Analysis</h4><p>Here the text shows the start time and end time of the phone starts and stops. The start time and end time is from the HMM model alignment. And in decoding part we can decode the time for each phone.  </p><p><img src="/../images/image-20220826234317040.png" alt="This "></p><h3 id="NN-seq2seq-end2end-based-acoustic-model-Tactron"><a href="#NN-seq2seq-end2end-based-acoustic-model-Tactron" class="headerlink" title="NN(seq2seq, end2end) based acoustic model - Tactron"></a>NN(seq2seq, end2end) based acoustic model - Tactron</h3><h3 id="Text-Analysis-1"><a href="#Text-Analysis-1" class="headerlink" title="Text Analysis"></a>Text Analysis</h3><p>And this is the full information to show how each phone’s prodacy infomation. That is how it different from the HMM model since it does not need to really record all the starting point and ending point of each phone. Thats the core difference between the previous model and latest way. </p><p><img src="/../images/image-20220826234258547.png" alt="The Prodoty Text Trainning Corpus"></p><p>In tactron, we can just use the CBHG to do the pre-decoding, to learn the all textual information for the trainning text corpus, like grammar or semantic information. </p><p>There are the basic components in Tactron.</p><p><img src="/../images/image-20220827001951827.png" alt="2017. Wang et.al. - Tacotron: Towards end-to-end speech synthesis."></p><p>The input text will be the English sentences, for Chinese will just be the Chinese phones. It will use the Mel filter to get the Mel charactersitics. </p><h1 id="Tacotron-Training"><a href="#Tacotron-Training" class="headerlink" title="Tacotron Training"></a>Tacotron Training</h1><h2 id="Implementing-CBHG-Encoder-in-Tacotron"><a href="#Implementing-CBHG-Encoder-in-Tacotron" class="headerlink" title="Implementing CBHG Encoder in Tacotron"></a>Implementing CBHG Encoder in Tacotron</h2><p>The Tacotron model based on attention mechanism includes two parts, encoder and decoder with attention mechanism, and this assignment only needs to implement the CBHG-based encoder part.</p><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Based on 10 hours of Chinese data open-sourced by Beibei Technology, we provide the processed text features and packaged them together with the audio files to Baidu.com, download link.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Link: https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>xC0fNwDvJWpJdqnfqNAzMg Password: tgtp<br></code></pre></td></tr></table></figure><p>In the tacotron directory in testdata, we also provide some data from this database directly to test the process.</p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>First execute <code>pip install -r requirement.txt</code> to install the required environment, which is also the test environment for this job.</p><p>Due to the large number of parameters in this network, it is recommended to use a server with a GPU for training tests.</p><h3 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h3><p>First, in the egs&#x2F;example directory, run <code>bash preprocess.sh 4</code> to extract features from the text and speech data in the target testdata.</p><p>After the feature extraction, run <code>bash train.sh</code> to train the model. The error is in models&#x2F;basic_model.py, which is where we need to implement the CBHG encoder part of Tacotron.</p><p>Once the CBHG implementation is complete, training can be performed directly.</p><p>After the training is complete, a synthesis script is written to test it, modeled after egs&#x2F;example&#x2F;synthesis.sh. Since the attention mechanism used at this point is the most primitive attention mechanism mentioned in the code explanation, the convergence performance and effect are poor. In the next assignment we will implement a more stable Tacotron system.</p><h1 id="Traditional-TTS-model-Training-Demo-duration-model-acoustic-model"><a href="#Traditional-TTS-model-Training-Demo-duration-model-acoustic-model" class="headerlink" title="Traditional TTS model Training Demo(duration model, acoustic model)"></a>Traditional TTS model Training Demo(duration model, acoustic model)</h1><p>Text features -&gt; duration model -&gt; acoustic model -&gt; world vocoder -&gt; audio</p><h2 id="1、Download-data-configure-environment"><a href="#1、Download-data-configure-environment" class="headerlink" title="1、Download data, configure environment"></a>1、Download data, configure environment</h2><h3 id="Download-data"><a href="#Download-data" class="headerlink" title="Download data"></a>Download data</h3><p>Data link: <a href="https://pan.baidu.com/s/1_zN-PSIIrxtCGvjo1TWz1g">https://pan.baidu.com/s/1_zN-PSIIrxtCGvjo1TWz1g</a></p><p>Extraction code: jbc5</p><p>Unzip the train_data folder</p><p>Data link: <a href="https://pan.baidu.com/s/1i28ZppgWYHIupk8piH7SyQ">https://pan.baidu.com/s/1i28ZppgWYHIupk8piH7SyQ</a></p><p>Extraction code: mvkj</p><h3 id="Configure-environment-Python-3-6-Tensorflow-1-12"><a href="#Configure-environment-Python-3-6-Tensorflow-1-12" class="headerlink" title="Configure environment (Python 3.6 Tensorflow 1.12)"></a>Configure environment (Python 3.6 Tensorflow 1.12)</h3><p>Install python package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>If you are slow to install, you can use whl to install</p><p>tensorflow 1.12 whl package: <a href="https://pan.baidu.com/s/1WCOyFhszJnHHtIMWBq0sxQ">https://pan.baidu.com/s/1WCOyFhszJnHHtIMWBq0sxQ</a></p><p>Extraction code: r73i</p><h2 id="2-Normalize-data"><a href="#2-Normalize-data" class="headerlink" title="2. Normalize data"></a>2. Normalize data</h2><p>Normalize the duration and acoustic input and output data to get the train_cmvn_dur.npz and train_cmvn_spss.npz files in cmvn.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash bash/prepare.sh<br></code></pre></td></tr></table></figure><h2 id="3-Write-the-model"><a href="#3-Write-the-model" class="headerlink" title="3. Write the model"></a>3. Write the model</h2><p>Complete the <code>AcousticModel</code> and <code>DurationModel</code> model definition section in model.py</p><p>The model inputs are inputs and input_length, and the predicted results are targets</p><p>inputs are the input features, input_length is the first dimension of inputs, targets is the prediction result</p><h3 id="Inputs-and-outputs"><a href="#Inputs-and-outputs" class="headerlink" title="Inputs and outputs"></a>Inputs and outputs</h3><p><code>inputs.shape</code> &#x3D; <code>[seq_length, feature_dim]</code></p><p><code>input_length</code> &#x3D; <code>seq_length</code></p><p><code>target.shape</code> &#x3D; <code>[seq_length, target_dim]</code></p><p>The input feature_dim of the time-length model is <code>617</code> dimensions, which represents the text feature.</p><p>The target_dim of the output of the duration model is <code>5</code> dimensions, which represents the state duration information of each phoneme</p><p>The input of the acoustic model has a feature_dim of <code>626</code> dimensions, which represents the text features and the position features of the frame</p><p>The output of the acoustic model has a target_dim of <code>75</code> dimensions, which represents the acoustic features of the target audio (lf0,mgc,bap)</p><h3 id="Task-description"><a href="#Task-description" class="headerlink" title="Task description"></a>Task description</h3><p>Write the model to predict the output targets based on the input inputs</p><h2 id="4-Training"><a href="#4-Training" class="headerlink" title="4. Training"></a>4. Training</h2><p>Train the duration model</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash bash/train_dur.sh<br></code></pre></td></tr></table></figure><p>Train the acoustic model</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash bash/train_acoustic.sh<br></code></pre></td></tr></table></figure><p>The training model results are saved in logdir_dur and logdir_acoustic respectively</p><p>The total number of training steps, checkpoint steps, etc. can be modified in hparams.py. The model convergence can be judged by the loss curve and the effect of test synthesis, not necessarily by the total number of steps run.</p><h3 id="the-loss-function-curve-by-tensorborad"><a href="#the-loss-function-curve-by-tensorborad" class="headerlink" title="the loss function curve by tensorborad"></a>the loss function curve by tensorborad</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tensorboard --logdir=logdir_dur<br></code></pre></td></tr></table></figure><p>Open browser to view local port <code>6006</code></p><h2 id="5-Test-synthesis"><a href="#5-Test-synthesis" class="headerlink" title="5. Test synthesis"></a>5. Test synthesis</h2><p>The predicted output of the duration model is in output_dur (as input to the acoustic model)</p><p>The predicted result of the acoustic model is in output_acoustic (lf0, bap, mgc folders for the corresponding features generated, according to which the audio in syn_wav is synthesized by the world vocoder)</p><p>&lt;checkpoint&gt; Fill in the path of the model obtained by training</p><h3 id="1-Test-the-acoustic-model-using-real-duration-data"><a href="#1-Test-the-acoustic-model-using-real-duration-data" class="headerlink" title="1. Test the acoustic model (using real duration data)"></a>1. Test the acoustic model (using real duration data)</h3><p>The first parameter of the test script is the input label path, the second parameter is the output path, and the third parameter is the trained model path (e.g.: logdir_acoustic&#x2F;model&#x2F;model.ckpt-2000)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash bash/synthesize_acoustic.sh test_data/acoustic_features output_acoustic &lt;checkpoint&gt;<br></code></pre></td></tr></table></figure><h3 id="2-Test-duration-model-acoustic-model-use-the-output-of-the-duration-model-as-input-to-the-acoustic-model"><a href="#2-Test-duration-model-acoustic-model-use-the-output-of-the-duration-model-as-input-to-the-acoustic-model" class="headerlink" title="2. Test duration model + acoustic model (use the output of the duration model as input to the acoustic model)"></a>2. Test duration model + acoustic model (use the output of the duration model as input to the acoustic model)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash bash/synthesize_dur.sh test_data/duration_features output_dur &lt;checkpoint<br>bash bash/synthesize_acoustic.sh output_dur output_acoustic &lt;checkpoint&gt;<br></code></pre></td></tr></table></figure><p>The final synthesized voice is in output_acoustic&#x2F;syn_wav</p><h2 id="Vocoder"><a href="#Vocoder" class="headerlink" title="Vocoder"></a>Vocoder</h2><h3 id="Source-Filter-Vocoder-Use-World-as-an-example"><a href="#Source-Filter-Vocoder-Use-World-as-an-example" class="headerlink" title="Source Filter Vocoder: Use World as an example"></a>Source Filter Vocoder: Use World as an example</h3><p>Source Filter Vocoder made use of the source filter theory. There has some open-resource vocoders like:</p><p>HTS Vocoder</p><p>Griffin-Lim Vocoder: Converst Mel Spectogram into the speech audio file.</p><p>Staright: <a href="https://github.com/shuaijiang/STRAIGHT">https://github.com/shuaijiang/STRAIGHT</a> <a href="http://www.isc.meiji.ac.jp/~mmorise/straight/english/introductions.html">http://www.isc.meiji.ac.jp/~mmorise/straight/english/introductions.html</a></p><p>World: <a href="https://github.com/mmorise/World">https://github.com/mmorise/World</a></p><p>World is a very popular and latest open resource vocoder project on github. WORLD corresponds to the following three acoustic characteristics: F0 fundamental frequency (F0基频), SP spectral envelope（SP频谱包络） and AP non-periodic sequence （AP非周期序列）.</p><p>The lowest frequency sine wave of the original signal composed of sine waves is the fundamental frequency.</p><p>Spectral envelope is the envelope obtained by connecting the highest points of amplitudes of different frequencies by a smooth curve.</p><p>The non-periodic sequence corresponds to the non-periodic pulse sequence of the mixed excitation part.</p><h3 id="Install-the-World"><a href="#Install-the-World" class="headerlink" title="Install the World"></a>Install the World</h3><p><strong>git clone</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/xiao11lam/TTS.git<br><span class="hljs-built_in">cd</span> TTS/03_spss/tools<br></code></pre></td></tr></table></figure><p><strong>compile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> tools<br>bash compile_tools.sh<br></code></pre></td></tr></table></figure><p>The compilation process may take a while, so please be patient and get the tools&#x2F;bin folder after compiling</p><p><img src="/../images/image-20220826021655278.png" alt="image-20220826021655278"></p><h3 id="copy-synthesis"><a href="#copy-synthesis" class="headerlink" title="copy synthesis"></a>copy synthesis</h3><p>Synthesize syn.wav with world vocoder based on input test.wav</p><p>Extract <code>f0</code>, <code>sp</code>, <code>ap</code> from <code>test.wav</code> using world, then synthesize <code>copy_synthesize/16k_wav_syn/000001.resyn.wav</code> based on the extracted features</p><h3 id="Sample-rate-16k"><a href="#Sample-rate-16k" class="headerlink" title="Sample rate 16k"></a>Sample rate 16k</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash copy_synthesize/copy_synthesis_world_16k.sh<br></code></pre></td></tr></table></figure><h3 id="sample-rate-48k"><a href="#sample-rate-48k" class="headerlink" title="sample rate 48k"></a>sample rate 48k</h3><p>Modify on the basis of <code>copy_synthesis_world_16k.sh</code>, you can modify parameters as input and output paths <code>(wav_dir\out_dir)</code>, <code>sample rate fs</code>, <code>mcsize</code>, etc</p><h3 id="optional-melspectrogram-copy-synthesis"><a href="#optional-melspectrogram-copy-synthesis" class="headerlink" title="(optional) melspectrogram copy synthesis"></a>(optional) melspectrogram copy synthesis</h3><p>Synthesize <code>syn_mel.wav</code> from input <code>test.wav</code> via <code>griffinlim</code></p><p>Extract the melspectrogram of test.wav using world, then synthesize copy_synthesize&#x2F;syn_mel.wav based on the extracted melspectrogram features</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python copy_synthesize/copy_synthesis_mel.py copy_synthesize/16k_wav/000001.wav<br></code></pre></td></tr></table></figure><h3 id="NN-based-Vocoder"><a href="#NN-based-Vocoder" class="headerlink" title="NN based Vocoder"></a>NN based Vocoder</h3><h1 id="Tacotron-TTS"><a href="#Tacotron-TTS" class="headerlink" title="Tacotron TTS"></a>Tacotron TTS</h1><p><img src="/../images/image-20220825235943493.png" alt="image-20220825235943493"></p><h2 id="Tacotron-Hands-on"><a href="#Tacotron-Hands-on" class="headerlink" title="Tacotron Hands-on"></a>Tacotron Hands-on</h2><h3 id="Clone-the-code"><a href="#Clone-the-code" class="headerlink" title="Clone the code"></a>Clone the code</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">https://github.com/xiao11lam/TTS.git<br></code></pre></td></tr></table></figure><p>Or we can clone here:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">https://github.com/nwpuaslp/TTS_Course.git<br></code></pre></td></tr></table></figure><h1 id="ESPNET-Text-to-Speech"><a href="#ESPNET-Text-to-Speech" class="headerlink" title="ESPNET Text to Speech"></a>ESPNET Text to Speech</h1><h2 id="Install-ESPNET"><a href="#Install-ESPNET" class="headerlink" title="Install ESPNET"></a>Install ESPNET</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda create --name espnet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Speech Signal Processing Toolkit (SPTK) Tutorials</title>
    <link href="/2022/08/25/Speech-Signal-Processing-Toolkit-SPTK-Tutorials/"/>
    <url>/2022/08/25/Speech-Signal-Processing-Toolkit-SPTK-Tutorials/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Install-the-SPTK"><a href="#Install-the-SPTK" class="headerlink" title="Install the SPTK"></a>Install the SPTK</h1><h2 id="Install-the-SoX"><a href="#Install-the-SoX" class="headerlink" title="Install the SoX"></a>Install the SoX</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get install sox<br></code></pre></td></tr></table></figure><h2 id="Clone-the-Git-Repo"><a href="#Clone-the-Git-Repo" class="headerlink" title="Clone the Git Repo"></a>Clone the Git Repo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/sp-nitech/SPTK.git<br></code></pre></td></tr></table></figure><h2 id="Compile-the-C"><a href="#Compile-the-C" class="headerlink" title="Compile the C++"></a>Compile the C++</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> SPTK; make<br></code></pre></td></tr></table></figure><h2 id="Export-the-Environmental-Variable"><a href="#Export-the-Environmental-Variable" class="headerlink" title="Export the Environmental Variable"></a>Export the Environmental Variable</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220825050436624.png" alt="image-20220825050436624"></p><p>Just export the <code>bin</code> path to your environmental variable.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/mnt/c/Users/ABC/SPTK/bin<br></code></pre></td></tr></table></figure><h1 id="Analysis-Synthesis"><a href="#Analysis-Synthesis" class="headerlink" title="Analysis Synthesis"></a>Analysis Synthesis</h1><h2 id="Pitch-Extraction"><a href="#Pitch-Extraction" class="headerlink" title="Pitch Extraction"></a>Pitch Extraction</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pitch -s 16 -p 80 -L 80 -H 200 -o 1 &lt; test.wav &gt; data.f0<br></code></pre></td></tr></table></figure><h2 id="LPC"><a href="#LPC" class="headerlink" title="LPC"></a>LPC</h2><p>When we reviewed the <code>lpc</code> directory, which is under <code>/SPTK/egs/analysis_synthesis/lpc</code>. </p><p><img src="/../images/image-20220912232026981.png" alt="image-20220912232026981"></p><p>When we finally compare the output file:</p><p><code>data.syn.raw</code>:</p><p><img src="/../images/image-20220912233129993.png" alt="image-20220912233129993"></p><p><img src="/../images/image-20220912232904531.png" alt="image-20220912232904531"></p><p><img src="/../images/image-20220912232118579.png" alt="image-20220912232118579"></p><p>And compared with the original wav file, <code>data.org.wav</code>. </p><p><img src="/../images/image-20220912233057842.png" alt="image-20220912233057842"></p><p><img src="/../images/image-20220912232740976.png" alt="image-20220912232740976"></p><p><img src="/../images/image-20220912232138056.png" alt="image-20220912232138056"></p><p>We can found out that the sound pressure is became more linear.</p><h1 id="Python-Version-SPTK"><a href="#Python-Version-SPTK" class="headerlink" title="Python Version SPTK"></a>Python Version SPTK</h1><p>we can have a python version SPTK and it combines the same functions:</p><p><a href="https://nbviewer.org/github/r9y9/pysptk/blob/master/examples/pysptk%20introduction.ipynb">https://nbviewer.org/github/r9y9/pysptk/blob/master/examples/pysptk%20introduction.ipynb</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ASV-Subtools Automatic Speaker Verification Toolkit Tutorials</title>
    <link href="/2022/08/05/ASV-Subtools-Automatic-Speaker-Verification-Toolkit-Tutorials/"/>
    <url>/2022/08/05/ASV-Subtools-Automatic-Speaker-Verification-Toolkit-Tutorials/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="ASV-tools-Installation"><a href="#ASV-tools-Installation" class="headerlink" title="ASV-tools Installation"></a>ASV-tools Installation</h1><h2 id="Install-Kaldi"><a href="#Install-Kaldi" class="headerlink" title="Install Kaldi"></a>Install Kaldi</h2><p>We need to install the kaldi into the <code>work</code> directory.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/kaldi-asr/kaldi<br></code></pre></td></tr></table></figure><h1 id="Training-Data"><a href="#Training-Data" class="headerlink" title="Training Data"></a>Training Data</h1><h2 id="Datasets-Downloading"><a href="#Datasets-Downloading" class="headerlink" title="Datasets Downloading"></a>Datasets Downloading</h2><p>We will use the <code>voxceleb 1</code> to do the experiment demo. </p><p><img src="/../images/image-20220831183616702.png" alt="https://www.robots.ox.ac.uk/~vgg/data/voxceleb/vox1.html"></p><p>We need to download the dataset from the website.</p><h2 id="Front-end-files"><a href="#Front-end-files" class="headerlink" title="Front-end files"></a>Front-end files</h2><p>There are several files that needed to be prerpared, and we need to follow the kaldi way:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">wav.scp : utt-<span class="hljs-built_in">id</span> utt-path<br>utt2spk : utt-<span class="hljs-built_in">id</span> spk-<span class="hljs-built_in">id</span><br>spk2utt : spk-<span class="hljs-built_in">id</span> utt-<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>We need to use the <code>make_voxceleb1_v2.pl</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> asv-subtools/recipe/voxceleb/prepare<br><span class="hljs-comment"># we need to prepare the preparing files in this way</span><br>make_voxceleb1_v2.pl &lt;dataset&gt; &lt;path-to-data-dir&gt;<br><br><span class="hljs-comment"># Usage: ./make_voxceleb1_v2.pl &lt;path-to-voxceleb1&gt; &lt;dataset&gt; &lt;path-to-data-dir&gt;</span><br><span class="hljs-comment"># e.g. ./make_voxceleb1_v2.pl /export/voxceleb1 dev data/dev</span><br></code></pre></td></tr></table></figure><p>If we want to have a better shell scripting way like preparing those files, we can just do:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p data/voxceleb1_train<br><br><span class="hljs-comment"># get all the .wav file path, eg. /data/voxceleb1/dev/id1231/...wav</span><br>find /data/voxceleb1/dev -name <span class="hljs-string">&quot;*.wav&quot;</span> &gt; data/voxceleb1_train/temp.lst<br><br><span class="hljs-comment"># generate the wav.scp, eg. id1231 data/voxceleb1/dev/id1231/...wav</span><br><span class="hljs-comment"># 1st. using split to cut &quot;a&quot; text with &quot;/&quot;</span><br><span class="hljs-comment"># 2st. cut the a[8] value with &quot;.&quot; and save into the &quot;b&quot; </span><br>awk <span class="hljs-string">&#x27;&#123;split($0, a, &quot;/&quot;); &#123;split(a[8], b,&quot;.&quot;)&#125;; print a[6]&quot;-&quot;a[7]&quot;-&quot;b[1], $1&#125;&#x27;</span> data/voxceleb1_train/temp.list &gt; data/voxceleb1_train/wav.scp<br></code></pre></td></tr></table></figure><p>Now we can filter the files:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">subtools/kaldi/utils/fix_data_dir.sh<br><br><span class="hljs-comment"># this script helps to ensure that the various files in a data dir are correctly sorted and filtered, for example removing utterances that have no features (if feats.scp is present)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Voiceprint Recognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Audio and Speech Processing Development Environment</title>
    <link href="/2022/07/30/Audio-and-Speech-Processing-Development-Environment/"/>
    <url>/2022/07/30/Audio-and-Speech-Processing-Development-Environment/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose build<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo systemctl stop docker<br></code></pre></td></tr></table></figure><p>If there is warning like: Warning: Stopping docker.service, but it can still be activated by:**</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker.socket**<br></code></pre></td></tr></table></figure><p>So we can stop the socket</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo systemctl <span class="hljs-built_in">stop</span> docker.<span class="hljs-built_in">socket</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart docker<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker-compose up<br></code></pre></td></tr></table></figure><p>项目中架起docker环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker system prune<br></code></pre></td></tr></table></figure><h1 id="Cuda"><a href="#Cuda" class="headerlink" title="Cuda"></a>Cuda</h1><p><img src="/../images/image-20220730154010169.png" alt="image-20220730154010169"></p><h2 id="nvidia-smi"><a href="#nvidia-smi" class="headerlink" title="nvidia-smi"></a>nvidia-smi</h2><p><img src="/../images/image-20220801144443432.png" alt="image-20220801144443432"></p><p><strong>Issue 1:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">NVIDIA-SMI has failed because <span class="hljs-keyword">it</span> couldn&#x27;t communicate <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> NVIDIA driver. <br>Make sure <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> latest NVIDIA driver <span class="hljs-keyword">is</span> installed <span class="hljs-keyword">and</span> <span class="hljs-built_in">running</span>.<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install dkms<br>sudo dkms install -m nvidia -v 418.87.00  <span class="hljs-comment"># replace the result from ls /usr/src | grep nvidia</span><br></code></pre></td></tr></table></figure><p>Check  the NVIDIA number:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ls <span class="hljs-regexp">/usr/</span>src | <span class="hljs-keyword">grep</span> nvidia     <br></code></pre></td></tr></table></figure><p>This will solve this common issue.</p><p><strong>Install the CONDA for WSL2</strong></p><p>Please follow this link:<a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">https://docs.nvidia.com/cuda/wsl-user-guide/index.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin<br>sudo <span class="hljs-built_in">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600<br>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb<br>sudo dpkg -i cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb<br>sudo apt-get update<br>sudo apt-get -y install cuda<br></code></pre></td></tr></table></figure><p>or Installation of Linux x86 CUDA Toolkit using Meta Package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin<br>sudo <span class="hljs-built_in">mv</span> cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600<br>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda-repo-ubuntu2004-11-7-local_11.7.0-515.43.04-1_amd64.deb<br>sudo dpkg -i cuda-repo-ubuntu2004-11-7-local_11.7.0-515.43.04-1_amd64.deb<br>wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-keyring_1.0-1_all.deb<br>sudo dpkg -i cuda-keyring_1.0-1_all.deb<br>sudo apt-get update<br>sudo apt-get -y install cuda-toolkit-11-7<br></code></pre></td></tr></table></figure><p>Check the environment by:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh\">nvcc -V<br></code></pre></td></tr></table></figure><p>If there is <code>nvida</code> not found, it should be the environmental problem:</p><p>Set the environmenal Inside of the .bashrc file, update the path as follows:<br><code> export PATH=&quot;/usr/local/cuda-11.7/bin:$PATH&quot;</code><br><code> export LD_LIBRARY_PATH=&quot;/usr/local/cuda-11.7/lib64:$LD_LIBRARY_PATH&quot;</code></p><p><strong>Check the nvidia-smi:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nvidia-smi<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220918124124743.png" alt="image-20220918124124743"></p><h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><p><strong>Check the version of wsl</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wsl -l -v<br></code></pre></td></tr></table></figure><p><strong>Update from wsl 1 to wsl2</strong></p><p>change the default version into wsl2. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wsl --set-default-version 2<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wsl.exe --set-version Ubuntu 2<br></code></pre></td></tr></table></figure><h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>This will show how to install the anaconda at the Ubuntu system:</p><p>The first step should be <code>wget</code> the downloaded file:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh<br><span class="hljs-comment"># after we downloaded the Linux Version anaconda, we need to run the .sh file, and we just choose yes</span><br>sh Anaconda3-2022.05-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>If  there is a <code>conda not found</code> problem, we need to fix the environmental variables:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># check the bashrc file</span><br>vi ~/.bashrc<br><br><span class="hljs-comment"># insert the path loc</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/root/anaconda3/bin/<br><br><br><span class="hljs-comment"># excecute file, the conda can be found</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><br><span class="hljs-comment"># or we can set the environment into true</span><br>conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="Create-a-Python-Env"><a href="#Create-a-Python-Env" class="headerlink" title="Create a Python Env"></a>Create a Python Env</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># create a conda env name &quot;env_name&quot;</span><br>conda create -n env_name python=3.8<br><br><span class="hljs-comment"># activate the env</span><br>conda activate env_name<br><br><span class="hljs-comment"># deactivate the env</span><br>conda deactivate env_name<br><br><span class="hljs-comment"># create a conda env with environment.yml</span><br>conda <span class="hljs-built_in">env</span> create --name env_name -f environment.yml<br><br><span class="hljs-comment"># update the conda env with environment.yml</span><br>conda <span class="hljs-built_in">env</span> update --name <span class="hljs-variable">$MYENV</span> -f environment.yml<br></code></pre></td></tr></table></figure><h2 id="Environment-yml"><a href="#Environment-yml" class="headerlink" title="Environment.yml"></a>Environment.yml</h2><p>This is an example of <code>environmental.yml</code> from <code>shennong</code> package.<a href="https://docs.cognitive-ml.fr/shennong/index.html">https://docs.cognitive-ml.fr/shennong/index.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">name: shennong<br>channels:<br>  - conda-forge<br>  - coml<br>dependencies:<br>  - python&gt;=3.6<br>  - shennong-pykaldi<br>  - ffmpeg<br>  - h5features&gt;=1.3.2<br>  - h5py&lt;3.0  <span class="hljs-comment"># because h5features supports only h5py-2.*</span><br>  - hmmlearn&gt;=0.2.0,&lt;0.3.0<br>  - joblib<br>  <span class="hljs-comment"># shennong-pykaldi is compiled on numpy-1.15, so shennong must stay on the</span><br>  <span class="hljs-comment"># 1.15 version</span><br>  - numpy==1.15.*<br>  - pip<br>  - pydub<br>  - pytest&gt;=5.0<br>  - pytest-cov<br>  - pytest-runner<br>  - pyyaml<br>  - scipy<br>  - sox  <span class="hljs-comment"># sox binary</span><br>  - sphinx<br>  - sphinx_rtd_theme<br>  - tensorflow&lt;2.5<br>  - pip:<br>      - json-tricks==3.15.*<br>      - sox  <span class="hljs-comment"># pysox</span><br></code></pre></td></tr></table></figure><h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h2 id="Install-Pytorch"><a href="#Install-Pytorch" class="headerlink" title="Install Pytorch"></a>Install Pytorch</h2><p>We need to install the pytorch:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install pytorch<br></code></pre></td></tr></table></figure><h2 id="Check-the-Version-of-the-Pytorch"><a href="#Check-the-Version-of-the-Pytorch" class="headerlink" title="Check the Version of the Pytorch"></a>Check the Version of the Pytorch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Torch version:&quot;</span>, torch.__version__)<br></code></pre></td></tr></table></figure><h1 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h1><p>Create a heroku server.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">heroku create<br></code></pre></td></tr></table></figure><p>Push the original codes into the empty projects.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push heroku HEAD:master<br></code></pre></td></tr></table></figure><h1 id="Linux-Environment"><a href="#Linux-Environment" class="headerlink" title="Linux Environment"></a>Linux Environment</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># from https://github.com/kaldi-asr/kaldi/issues/515 @ willendzw</span><br><span class="hljs-comment"># The env.sh is not under tools/extras/. It is under tools/. So you just need to</span><br><span class="hljs-built_in">source</span> env.sh. It just add irstlm path. Eg:<br><span class="hljs-built_in">export</span> IRSTLM=/home/willen/Documents/kaldi/kaldi/tools/irstlm<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;PATH&#125;</span>:<span class="hljs-variable">$&#123;IRSTLM&#125;</span>/bin<br></code></pre></td></tr></table></figure><h3 id="AWS-Ubuntu-EC2"><a href="#AWS-Ubuntu-EC2" class="headerlink" title="AWS Ubuntu EC2"></a>AWS Ubuntu EC2</h3><p><img src="/../images/image-20220918004648297.png" alt="image-20220918004648297"></p><p>We can use the AWS and install it by this video tutorial: <a href="https://www.youtube.com/watch?v=NuB2BTYNosE&amp;t=81s">https://www.youtube.com/watch?v=NuB2BTYNosE&amp;t=81s</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Connect the ec2 server to ssh</span><br>ssh -i ...pem ubuntu@Public IPv4 DNS copied <span class="hljs-comment"># if you are using ubuntu please change the username &quot;ec2-user&quot; into &quot;ubuntu&quot;, otherwise just it.</span><br>ssh -i xiao.pem ec2-user@ec2-3-248-220-97.eu-west-1.compute.amazonaws.com<br></code></pre></td></tr></table></figure><h1 id="Librosa"><a href="#Librosa" class="headerlink" title="Librosa"></a>Librosa</h1><p>Here is the scripts that installed in case that it will be facing the incompatibale issues for librosa installing.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda install -c numba numba<br><br>conda install -c conda-forge librosa<br></code></pre></td></tr></table></figure><p>Here is one example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> scipy<br><span class="hljs-keyword">import</span> librosa<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>y, sr = librosa.load(<span class="hljs-string">&quot;/mnt/c/Users/ABC/SPTK/egs/analysis_synthesis/lpc/data.org.wav&quot;</span>, duration=<span class="hljs-number">0.020</span>)<br><br>a = librosa.lpc(y, order=<span class="hljs-number">4</span>)<br>b = np.hstack([[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span> * a[<span class="hljs-number">1</span>:]])<br><br>y_hat = scipy.signal.lfilter(b, [<span class="hljs-number">1</span>], y)<br>fig, ax = plt.subplots()<br>ax.plot(y)<br>ax.plot(y_hat, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>ax.legend([<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;y_hat&#x27;</span>])<br>ax.set_title(<span class="hljs-string">&#x27;LP Model Forward Prediction&#x27;</span>)<br><br>plt.savefig(<span class="hljs-string">&quot;out.png&quot;</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure><p>The saved png file can be looks like that:</p><p><img src="/../images/out.png" alt="out"></p><p>Here is a very good tutorials to express the librosa in the speech recognition and processing tasks:</p><p><a href="https://medium.com/wavey-ai/end-to-end-speech-recognition-f13f0d0197c7">https://medium.com/wavey-ai/end-to-end-speech-recognition-f13f0d0197c7</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Audio and Speech Processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Speech Technology Industry</title>
    <link href="/2022/07/30/Speech-Technology-Industry/"/>
    <url>/2022/07/30/Speech-Technology-Industry/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Startup-Company-Lists"><a href="#Startup-Company-Lists" class="headerlink" title="Startup Company Lists"></a>Startup Company Lists</h1><p><a href="https://www.ai-startups.org/top/speech_recognition/">https://www.ai-startups.org/top/speech_recognition/</a></p><p>Iconic Translation Machines Ltd.: Language Weaver.Technology and innovation combined with a deeper collaboration from human interaction.：<a href="https://www.rws.com/language-weaver/">https://www.rws.com/language-weaver/</a></p><p>adaptcentre：<a href="https://www.adaptcentre.ie/#1">https://www.adaptcentre.ie/#1</a></p><p>oysis: <a href="https://www.topionetworks.com/companies/voysis-58adc0fc2033d420e1000009">https://www.topionetworks.com/companies/voysis-58adc0fc2033d420e1000009</a></p><p>North AI</p><p>Amazon:</p><p>Aylien:<a href="https://aylien.com/">https://aylien.com/</a></p><p>[LinkedIn]: </p>]]></content>
    
    
    
    <tags>
      
      <tag>Speech Technology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP</title>
    <link href="/2022/07/12/CPP/"/>
    <url>/2022/07/12/CPP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>This is the notes for C++ learning.</p><h1 id="Hash-Map"><a href="#Hash-Map" class="headerlink" title="Hash Map"></a>Hash Map</h1><h2 id="Ordered-Map-Map"><a href="#Ordered-Map-Map" class="headerlink" title="Ordered Map (Map)"></a>Ordered Map (Map)</h2><p>The elements in the ordered map or we say the map, are sorted. In many cases we use the tree structure for this particular issue, such as binary trees.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br></code></pre></td></tr></table></figure><p>Here we defined a hash map, the key is the audio_ID, and the value is the trans:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map&lt;std::string, audioRecord&gt; audioMap;<br></code></pre></td></tr></table></figure><p>each time we need to add more one element, we use:</p><p>Here, the “audio_file_name” here are the keys. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">audioMap[audio_file_name_1] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_1&quot;</span>, sr, bit_depth, dur&#125;;<br>audioMap[audio_file_name_2] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_2&quot;</span>, sr, bit_depth, dur&#125;;<br>audioMap[audio_file_name_3] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_3&quot;</span>, sr, bit_depth, dur&#125;;<br>...<br>audioMap[audio_file_name_n] = audioRecord &#123;<span class="hljs-string">&quot;audio_file_name_n&quot;</span>, sr, bit_depth, dur&#125;;<br></code></pre></td></tr></table></figure><p>Retreive the data for audio_file_name_3:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">audioRecord&amp; audio_file_name_3 = audioMap[<span class="hljs-string">&quot;audio_file_name_3&quot;</span>]<br>audio_file_name_3.sr;<br></code></pre></td></tr></table></figure><p>So we can easily grap the value results of the “audio_file_name_3” sr.</p><h2 id="Unordered-Map"><a href="#Unordered-Map" class="headerlink" title="Unordered Map"></a>Unordered Map</h2><p>An unordered map is a hash table, it used the hash function to hash the key, and we can easily retreive the bucket we want. This is usually unordered and faster than the map. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unordered_map&lt;std::string, audioRecord&gt; audioMap;<br></code></pre></td></tr></table></figure><h1 id="Read-a-wav-file-and-render-it"><a href="#Read-a-wav-file-and-render-it" class="headerlink" title="Read a wav file and render it"></a>Read a wav file and render it</h1><h2 id="Environmental-Install"><a href="#Environmental-Install" class="headerlink" title="Environmental Install"></a>Environmental Install</h2><h3 id="Intall-SDL"><a href="#Intall-SDL" class="headerlink" title="Intall SDL"></a>Intall SDL</h3><p><a href="https://gist.github.com/aaangeletakis/3187339a99f7786c25075d4d9c80fad5">https://gist.github.com/aaangeletakis/3187339a99f7786c25075d4d9c80fad5</a></p><h3 id="Git-clone-the-Tutorial-Code"><a href="#Git-clone-the-Tutorial-Code" class="headerlink" title="Git clone the Tutorial Code"></a>Git clone the Tutorial Code</h3><p><a href="https://github.com/BennyQBD/AudioTutorial">https://github.com/BennyQBD/AudioTutorial</a></p><h2 id="Understand-audio"><a href="#Understand-audio" class="headerlink" title="Understand audio"></a>Understand audio</h2><p><a href="https://www.ee.iitb.ac.in/course/~daplab/resources/">https://www.ee.iitb.ac.in/course/~daplab/resources/</a></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Environment-of-C"><a href="#Environment-of-C" class="headerlink" title="Environment of C++"></a>Environment of C++</h2><p>In windows there is the Visual C++ </p><p>Linux: GCC : (the <code>gcc</code> in most cases are compiled for c, and g++ is for C++)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs g++">g++<br></code></pre></td></tr></table></figure><p>&#x2F; Clang (Clang++)…</p><p>The IDE includes: Visual Studio &#x2F; CodeLite &#x2F; Code::blocks &#x2F; Eclipse…</p><p>The usual tools included:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">– /usr/bin/<span class="hljs-built_in">time</span><br>– valgrind<br>– cpp <span class="hljs-keyword">reference</span><br>– Compiler explorer<br>– C++ insights<br></code></pre></td></tr></table></figure><p>The logic of the C++ is compling: </p><p>We can follow this simple solution<code>source code</code> &gt;&gt; <code>processing</code> &gt;&gt; <code>excecutable programs</code>, the problem is that it can takes a long time. And if there is little editing of the source code, and we have to re-compile it again. </p><p>The solution is to divide the source codes into multiple source codes like: </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">souce_file_1 (<span class="hljs-keyword">source</span> <span class="hljs-keyword">file</span> + headers) &gt;&gt; <span class="hljs-keyword">compile</span> &gt;&gt; object files &gt;&gt; link &gt;&gt; <br>excecutable programs<br>souce_file_2 (<span class="hljs-keyword">source</span> <span class="hljs-keyword">file</span> + headers) &gt;&gt; <span class="hljs-keyword">compile</span> &gt;&gt; object files &gt;&gt; link &gt;&gt;<br></code></pre></td></tr></table></figure><p>Now we can compile the C++ program more quickly, and easy to maintain. So the core steps can be <code>compile</code> and <code>link</code>. But here also comes with a question!!! </p><p>What if we used the same variable but in different C++ files, which may cause the collision, so we need to declare the definition of the variable. So the header files is to define the <code>variables</code>, it defines all the variables, if another c++ files need it, just borrow and declare it, which would be much more convinient. The initial way of using the header files can be declare the variables, but laterly it also includes some definitions. </p><p>But the golden rule still be if you declare <strong>one variable</strong>, you <strong>only</strong> can declare that variable once. If different c++ files want to refer to that variable, we just include it from the header files. </p><p><img src="/../images/image-20220922212927648.png" alt="image-20220922212927648"></p><p>Here is a “Hello world” example:</p><h3 id="1st-C-Preprocessor"><a href="#1st-C-Preprocessor" class="headerlink" title="1st. C Preprocessor"></a>1st. C Preprocessor</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    std::cout &lt;&lt;  <span class="hljs-string">&quot;Hello World&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Now we can do that preprocessing:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">gcc -E ./main.cpp -o ./main.i<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220922220320102.png" alt="image-20220922220320102"></p><p>The <code>main.i</code> file will include all the header files into our program and preprocess it. </p><h3 id="2st-C-Compile"><a href="#2st-C-Compile" class="headerlink" title="2st. C Compile"></a>2st. C Compile</h3><p>The next step could be the C compiling. It will generate the compiled code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">g++ main.i -S -o main.s <br></code></pre></td></tr></table></figure><p>Now we can get the compiled code: <code>main.s</code></p><p><img src="/../images/image-20220922220153890.png" alt="image-20220922220153890"></p><p>The <code>main</code> in here represents the <code>main</code> function we declared from the previous <code>hello world</code> program.</p><p> The <code>call</code> in here is to print the “hello world” message.</p><h3 id="3st-Assembler-amp-Linker-x2F-link-editor"><a href="#3st-Assembler-amp-Linker-x2F-link-editor" class="headerlink" title="3st. Assembler &amp; Linker&#x2F;link editor"></a>3st. Assembler &amp; Linker&#x2F;link editor</h3><p>The use of the assembler is to use the compiled code into the machine code, that machine can read. </p><p>We will refer to the system link or other objects and put it together to get the runable program. </p><h3 id="Direct-Way"><a href="#Direct-Way" class="headerlink" title="Direct Way"></a>Direct Way</h3><p>We can direct compile those steps in C++ just by one line of code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">g++ ./main.cpp -o ./main<br></code></pre></td></tr></table></figure><h2 id="Header-Files"><a href="#Header-Files" class="headerlink" title="Header Files"></a>Header Files</h2><h4 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h4><p>Here is the step to convert the original file into the translated component.</p><h5 id="ifdef"><a href="#ifdef" class="headerlink" title="ifdef"></a>ifdef</h5><p>Ifdef is to solve the reference too deep problem, we can declare these codes in the header file:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HEADER_NAME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEADER_NAME</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>Or we can try <strong>pragma_once</strong> which can replace the same way like #ifndef:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br></code></pre></td></tr></table></figure><p>We suggested to use the #pragma to avoid the collision between different header files. </p><h5 id="Header-Include"><a href="#Header-Include" class="headerlink" title="Header Include"></a>Header Include</h5><p>We need to include the header file: </p><p><strong>#include “ .h”</strong></p><p>If we are using “ “, the system will search the header file from the current directory. In most cases, we will use this way since its we wrote those header files.</p><p><strong>#include &lt;&gt;</strong></p><p>If we use &lt;&gt;, the system will search from the environment variable, or installed C++ packages, there is no “.h” ending. </p><h5 id="System-I-x2F-O-lib"><a href="#System-I-x2F-O-lib" class="headerlink" title="System I&#x2F;O lib"></a>System I&#x2F;O lib</h5><p><strong><iostream></strong></p><p>The <code>input stream</code> can be: <code>cin</code>, the <code>output stream</code> can be <code>cout</code>, <code>cerr</code> for error printing, <code>clog</code>  for printing the log…</p><h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><p>We will convert the interpreted units into the compiled languages:</p><p>Here is a good example:</p><p><a href="https://godbolt.org/z/zh9aqx">https://godbolt.org/z/zh9aqx</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i)<br>    &#123;<br>        res += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// the res should be 1+...+999</span><br></code></pre></td></tr></table></figure><p>Now here is the gcc compiling procedures: Here is the <code>-O0</code> is to compile the codes without any other optimizations. </p><p><img src="/../images/image-20220922223635463.png" alt="image-20220922223635463"></p><p>But if we set like <code>-O 3</code>, which we will get the third level optimization:</p><p><img src="/../images/image-20220922223756278.png" alt="image-20220922223756278"></p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><h2 id="Return-0"><a href="#Return-0" class="headerlink" title="Return 0"></a>Return 0</h2><p>Every function it will define the <code>return </code> value except the return value like <code>void</code> or in <code>main</code> function.</p><p>So in here we will define a main function:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cheer</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pInfo)</span></span>&#123;<br>    std::out &lt;&lt; pInfo &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cheer</span>(<span class="hljs-string">&quot;This is a good day&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>So there maybe a warning like <code>no return value</code>, we need to add the return value:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cheer</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pInfo)</span></span>&#123;<br>    std::out &lt;&lt; pInfo &lt;&lt; std::endl;<br>    <span class="hljs-comment">// return null value</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cheer</span>(<span class="hljs-string">&quot;This is a good day&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Also there is also no need to really declare  a formal parameter totally if we do not want use that variable but still want to keep it:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cheer</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pInfo, <span class="hljs-type">int</span>)</span></span>&#123;<br>    std::out &lt;&lt; pInfo &lt;&lt; std::endl;<br>    <span class="hljs-comment">// return null value</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cheer</span>(<span class="hljs-string">&quot;This is a good day&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// number 0 is just the habit</span><br>    <span class="hljs-comment">//  we can check by the echo $?</span><br>    <span class="hljs-comment">// if without declaring, the system will directly call it 0</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>function is the final running program，its like a general function. The return value of it is ```int```, and we usually use ```0``` to represent the return value.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs main```"><br><br><br>There are two forms of ```main``` function in C++:<br><br>```cpp<br>// This is the first type<br>int main()&#123;<br>    return 0;<br>&#125;<br><br><br>// Here is the second type, it equals to main()<br>int main(int argc, char* argv[])&#123;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>If we need to avoid there are multiple functions with the same name, we can use the <code>namespace</code> to avoid the comflictions.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> NameSpace1<br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> NameSpace2<br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    NameSpace2::<span class="hljs-built_in">fun</span>();<br>   <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>Or we can do <code>using namespace</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// Now it will defaulty search the fun funtion from the NameSpace1</span><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> NameSpace1;<br>    <span class="hljs-built_in">fun</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h4><p>In C++, we can use the <code>std::cout</code> or <code>printf</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>It can equals to :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span> <span class="hljs-comment">// but it is not that quite standard and strict, so we import &lt;cstdio&gt; lib to refer the printf</span></span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World\n&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>The essence of <code>if</code> is division like trees.</p><p>Here is the <code>if</code> in C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (x == y)&#123;<br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>The essence of the <code>while</code> is recursion or loop.</p><p>Here is an example is guessing number:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">42</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x != y)&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Please input a number: \n&quot;</span>;<br>        <span class="hljs-comment">// Cin here will be the user input</span><br>        std::cin &gt;&gt; y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220924142713210.png" alt="image-20220924142713210"></p><p>The logic here is that, if the user input is not equal to the <code>x</code> there, so the program will request you to input a number, else it will stop.</p><h4 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h4><p>We can define the struct of  multiple variables we want to call, especially for those variables who have inner connections.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-type">int</span> x;  <br>  <span class="hljs-type">int</span> y;  <br>  <span class="hljs-comment">// the inside of the struct also can include functions</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncX</span><span class="hljs-params">()</span></span>&#123;<br>      x = x + <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Point p)</span></span>&#123;<br>    p.x;<br>    p.y;<br>    p.x = p.x + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// So in this way, we can make the variables more friendly to call</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   Point p;<br>    <span class="hljs-comment">// so we can call a struct name is &quot;p&quot; </span><br>    p.x = <span class="hljs-number">3</span>;<br>    p.y = <span class="hljs-number">5</span>;<br>    p.<span class="hljs-built_in">IncX</span>();<br>    std::cout &lt;&lt; p.x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.y &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Type-and-variables"><a href="#Type-and-variables" class="headerlink" title="Type and variables"></a>Type and variables</h1><p>C++ is a very strong language focused on the type of variables typically. </p><p>There are two steps to set a variable in C++:</p><h5 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h5><p>The first step to define a value can be:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>Now the variable <code>x</code> can be created into a storage <code>address</code>, and pass the value into it. </p><h5 id="Pass-the-value"><a href="#Pass-the-value" class="headerlink" title="Pass the value"></a>Pass the value</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x = y<br></code></pre></td></tr></table></figure><p>The computer now will firstly find the address of the <code>x</code>, and change the value from that address <strong>[rbp-4] (-4 &#x3D; 0xFFFFFFFFFFFFFFFC)</strong> into <strong>10 (10 &#x3D; 0xA)</strong>. And the same idea is that <code>y</code> is correspond to <strong>[rbp-8 ] (-8 &#x3D; 0xFFFFFFFFFFFFFFF8)</strong> whose the value is <strong>5 &#x3D; 0x5</strong>.</p><p><img src="/../images/image-20220924160919422.png" alt="image-20220924160919422"></p><p>Now the idea can be let <code>y</code> equals to <code>x</code>. The logic here is we firstly get the address of y which is   <strong>[rbp-8]</strong> and pass the value under that address into <code>eax</code>, and pass the <code>eax</code> value into the address which is <strong>[rbp-4]</strong>.</p><p>There is one notice is that, the C++ will sometimes convert the value for you if you misuse it, like in here the 10.5 is a double float number, but the C++ will let you to store that value only include the integer part which is the automatic setting of the C++.</p><p><img src="/../images/image-20220924162242225.png" alt="image-20220924162242225"></p><h1 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h1><p>Here we can firstly define a pointer, and the pointer address will point to a value.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">42</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">56</span>;<br>    <br>    <span class="hljs-type">int</span>* p = &amp;x;<br>    <span class="hljs-comment">// &amp;x is to get the address from the variable, </span><br>    <span class="hljs-comment">// we can change the value of the pointer p the same as the address of y</span><br>    p = &amp;y;<br>    <br>    <span class="hljs-comment">// now we can get the value from refering the pointer p, the idea of int* p and *p is totally different</span><br>    std::cout &lt;&lt; *p &lt;&lt; std::endl;<br>    <span class="hljs-comment">// the *p will be the value of x</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220924215057558.png" alt="image-20220924215057558"></p><p>&amp; is for getting the address. Pointer will also create a space in your computer, it will also can become an object. Pointer it is a procedure to point! Pointer can save the address. </p><p>We can also set the default pointer into <code>null</code>, like:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// this is just a pre-set value, which means the address of it have not be clearly decided.</span><br></code></pre></td></tr></table></figure><p>We can use pointer to save a lot of computing space, especially when we want to pass a relatively “big” value into the function. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Str</span>&#123;<br>    ....<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Str* param)</span></span>&#123;<br>    <span class="hljs-comment">// we are setting the function params into the pointer, so we can just give that pointer an address, so we can easily manipulate it.</span><br>    <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Str x;<br>    <span class="hljs-comment">// now we pass the x&#x27;s address to p</span><br>    Str* p = &amp;x;<br>    <span class="hljs-built_in">fun</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Useful-Linux-Cmds"><a href="#Useful-Linux-Cmds" class="headerlink" title="Useful Linux Cmds"></a>Useful Linux Cmds</h1><h2 id="nm"><a href="#nm" class="headerlink" title="nm"></a>nm</h2><p>We can use:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nm ./main.cpp.o | c++filt -t<br></code></pre></td></tr></table></figure><p>It will print all the referred values or params when the program is compiled.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Code Quality</title>
    <link href="/2022/07/12/Code-Quality/"/>
    <url>/2022/07/12/Code-Quality/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Python-Basics-Operations"><a href="#Python-Basics-Operations" class="headerlink" title="Python Basics Operations"></a>Python Basics Operations</h1><h2 id="Float-number-and-bool"><a href="#Float-number-and-bool" class="headerlink" title="Float number and bool"></a>Float number and bool</h2><p>We cannot directly compare the float value, like using the logic “&#x3D;&#x3D;” symbol. But we can use: the way that using the division method to compare the result with a very small value. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># float_num == cannot be used into the float number comparision.</span><br><span class="hljs-built_in">abs</span>(float_num - <span class="hljs-number">12.2</span> &lt; <span class="hljs-number">1e-5</span>)<br><span class="hljs-comment"># here the 1e5 means the 0.1^(-5), just equals to 0.000001. </span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Convert <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">the</span> inverse <span class="hljs-built_in">number</span>:<br>Like <span class="hljs-built_in">num</span> = <span class="hljs-number">150</span><br>We got <span class="hljs-built_in">result</span> = <span class="hljs-number">51</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">150</span><br>digit1 = num % <span class="hljs-number">10</span><br>digit2 = num // <span class="hljs-number">10</span> % <span class="hljs-number">10</span><br>digit3 = num // <span class="hljs-number">100</span><br><br>result = digit1 * <span class="hljs-number">100</span> + digit2 * <span class="hljs-number">10</span> + digit3<br></code></pre></td></tr></table></figure><h2 id="Swap-the-two-value’s-values"><a href="#Swap-the-two-value’s-values" class="headerlink" title="Swap the two value’s values:"></a>Swap the two value’s values:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># here is the standard way</span><br>num1 = <span class="hljs-number">10</span><br>num2 = <span class="hljs-number">15</span><br><br>tmp = num2<br>num2 = num1<br>num1 = tmp<br><br><span class="hljs-comment"># this is to help you to exchange the variables, but if you are in python we can do:</span><br>num1, num2 = num2, num1<br></code></pre></td></tr></table></figure><p>Google Codestyle Pygide</p><h2 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate"></a>Enumerate</h2><p>In python we can use range() or just for loops to loop the elements from a list, but we still strongly suggest we use the enumerate, since it looks more python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> (index, num) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br><span class="hljs-keyword">return</span> (index, num)<br></code></pre></td></tr></table></figure><p>Reverse the list!!! Using range()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br><span class="hljs-comment"># range(n, m, -1) n = [n, n - 1, n - 2, ..., m + 1]</span><br><span class="hljs-built_in">print</span>(nums[i], end = <span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h2 id="While-and-for"><a href="#While-and-for" class="headerlink" title="While and for"></a>While and for</h2><p>While loop is just equal to the for loop in many ways:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(scores):<br><span class="hljs-built_in">print</span>(score[i])<br>i += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># thats the biggest difference, since if in for, we do not need to add the value manually.</span><br></code></pre></td></tr></table></figure><h3 id="Swap-a-function-to-exchange-the-values-into-an-array"><a href="#Swap-a-function-to-exchange-the-values-into-an-array" class="headerlink" title="Swap a function to exchange the values into an array"></a>Swap a function to exchange the values into an array</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Input</span> = <span class="hljs-string">&#x27;[1, 2, 3, 4]&#x27;</span><br><span class="hljs-attr">index1</span> = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attr">index2</span> = <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">Result</span> = <span class="hljs-string">&#x27;[1, 2, 4, 3]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">swapInteger</span>(<span class="hljs-params">swapList, swapIdx1, swapIdx2</span>):<br>    swapList[swapIdx1], swapList[swapIdx2] = swapList[swapIdx2], swapList[swapIdx1]<br>    <span class="hljs-keyword">return</span> swapList<br></code></pre></td></tr></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>In python the “self.” all can represent the inner nature of a function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(): <span class="hljs-comment"># Class name should follow the camel way</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, score</span>):<br><span class="hljs-comment"># we defined two natures of the student: name &amp; score</span><br>self.name = name<br>self.score = score<br><br><span class="hljs-comment"># here we defined the behaviour</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.name, self.score)<br></code></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a><strong>init</strong></h3><p>init is the default construnction function that will run when you create that class. This is the compulsory element of the class.</p><h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><p>Self it is the object itself, when we define the class we must declare it, but when we call it we will not see.</p><h2 id="From-class-to-object"><a href="#From-class-to-object" class="headerlink" title="From class to object"></a>From class to object</h2><p>Instance is just object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">student = Student(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">90</span>)<br><span class="hljs-comment"># we can visit the value of that object</span><br>student.name<br>student.score<br><span class="hljs-comment"># call the function from that class object</span><br>student.speak()<br><span class="hljs-comment"># reset the value</span><br>student.name = <span class="hljs-number">80</span><br><br></code></pre></td></tr></table></figure><h2 id="Existence"><a href="#Existence" class="headerlink" title="Existence"></a>Existence</h2><p>We need to have the existence judge before we really run the function:</p><p>It can combine two cases: 1) End Case 2) Base Case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># here is the base case</span><br><span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">return</span> <br></code></pre></td></tr></table></figure><h2 id="List-CRUD"><a href="#List-CRUD" class="headerlink" title="List CRUD"></a>List CRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ul><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = list_1 + list_2<br></code></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span> * <span class="hljs-number">3</span><br><span class="hljs-comment"># It will duplicate all the elements in the list three times</span><br></code></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p><strong>iteration</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list_a:<br>    <span class="hljs-built_in">print</span>(x, end = <span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>index id</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a[n]<br></code></pre></td></tr></table></figure><p><strong>slice</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a[:]<br></code></pre></td></tr></table></figure><p><strong>in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span> <span class="hljs-keyword">in</span> list_a<br><span class="hljs-comment"># it will return a boolean value</span><br></code></pre></td></tr></table></figure><p><strong>index method</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.index(<span class="hljs-string">&quot;the value you want to search&quot;</span>)<br><br><span class="hljs-comment"># it will tell you the index of the value you search, if not in there will be invalid</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">2</span> <span class="hljs-keyword">in</span> list_a:<br>    <span class="hljs-keyword">return</span> list_a.index(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># in order to prevent that if we cannot find the index value and output the bug issues, we need to firstly have a if then if true, we then print the index of that value, else just do not.</span><br></code></pre></td></tr></table></figure><p><strong>count</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.count(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># count is to get how many frequencies that value occurred from the list</span><br></code></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><strong>update through the index</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a[<span class="hljs-number">2</span>] = ... <br></code></pre></td></tr></table></figure><p><strong>Update through slicing</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b[:n] = [,,,]<br></code></pre></td></tr></table></figure><p><strong>append</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.append(<span class="hljs-string">&quot;will add an element from the end of the list&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>insert</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">list.insert(index, <span class="hljs-string">&quot;the element you want to insert&quot;</span>)<br>list.insert(2, <span class="hljs-string">&quot;the element you want to insert&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>extend</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>]<br>list_b = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list_a.extend(list_b)<br></code></pre></td></tr></table></figure><p>This will enable us to insert the values before the list we want to append. It looks like “+”, but for “+”, we need to generate a new list, but for this strategy, there is no need to do this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p><strong>&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b [:<span class="hljs-number">2</span>] = []<br><span class="hljs-comment"># delete all the values before the list_b[2]</span><br></code></pre></td></tr></table></figure><p><strong>pop</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b.pop(index)<br>list_b.pop(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># this will delete the list_b[2]</span><br></code></pre></td></tr></table></figure><p>If there is no index, it will defaultly delete the final value.</p><p><strong>remove</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list_b.remove(index_value)<br>list_b.pop(<span class="hljs-string">&quot;A&quot;</span>)<br><span class="hljs-comment"># this will remove the value from the list</span><br></code></pre></td></tr></table></figure><p><strong>del</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> list_a[<span class="hljs-number">3</span>]<br><span class="hljs-comment"># we can use delete to delete the value by index or by slicing</span><br><span class="hljs-keyword">del</span> list_a[:n]<br></code></pre></td></tr></table></figure><h3 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty"></a>is_empty</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> self.items：<br><span class="hljs-comment"># if the list is empty it will return false, if not empty, it will be True.</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.items:<br>    <span class="hljs-comment"># if the list is empty it will return True, if not, it will be False.</span><br></code></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p><strong>len</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(list_a)<br></code></pre></td></tr></table></figure><p><strong>sort</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.sort()<br><span class="hljs-comment"># it will generate a sorted version of the list_a</span><br></code></pre></td></tr></table></figure><p><strong>reverse</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.reverse()<br><span class="hljs-comment"># it will reverse the list</span><br></code></pre></td></tr></table></figure><p><strong>reverse sort</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_a.sort(reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-comment"># it will reverse from the big elements downto the small ones</span><br></code></pre></td></tr></table></figure><h3 id="List-Generator"><a href="#List-Generator" class="headerlink" title="List Generator"></a>List Generator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list_demo = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>]<br><span class="hljs-comment"># we can easily generate the list by this way.</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># generate a multiple value list</span><br>[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>we can generate the multiple values there:<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>We only can read tuple cannot do the <strong>CUD</strong> there. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>When we do the copy the value</p><h2 id="String-CRUD"><a href="#String-CRUD" class="headerlink" title="String CRUD"></a>String CRUD</h2><h3 id="Create-1"><a href="#Create-1" class="headerlink" title="Create"></a>Create</h3><p><strong>+</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a = string_a + string_b<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a = string_a * <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>for</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string_a:<br>    <span class="hljs-built_in">print</span>(c, end = <span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Read-1"><a href="#Read-1" class="headerlink" title="Read"></a>Read</h3><p><strong>find</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a.find(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-comment"># we can get the index of the string value</span><br></code></pre></td></tr></table></figure><h3 id="Update-1"><a href="#Update-1" class="headerlink" title="Update"></a>Update</h3><p><strong>replace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a.replace(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;www&quot;</span>)<br><span class="hljs-comment"># we can replace the value &quot;h&quot; into &quot;www&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Delete-1"><a href="#Delete-1" class="headerlink" title="Delete"></a>Delete</h3><p><strong>replace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string_a.replace(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-comment"># we can replace the value &quot;h&quot; into &quot; &quot;, by this way we can delete the &quot;h&quot; element.</span><br></code></pre></td></tr></table></figure><h3 id="Others-1"><a href="#Others-1" class="headerlink" title="Others"></a>Others</h3><p><strong>len</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(string_a)<br></code></pre></td></tr></table></figure><p><strong>format</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;I am &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Xiao&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>str()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>(<span class="hljs-number">100</span>)<br><span class="hljs-comment"># we can invert the numerical number into a string</span><br></code></pre></td></tr></table></figure><p><strong>format the elements of the list into the string value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">list_demo = [<span class="hljs-string">&quot;xiao&quot;</span>, <span class="hljs-string">&quot;zhang&quot;</span>]<br><br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list_demo:<br>    result += s + <span class="hljs-string">&quot; &quot;</span><br><span class="hljs-comment"># here is a more elegant way</span><br>result = <span class="hljs-string">&quot; &quot;</span>.join(list_demo)<br>    <br><span class="hljs-comment"># the result will be &quot;xiao zhang&quot;    </span><br></code></pre></td></tr></table></figure><p><strong>reverse the string</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># using for loop but it is not suggested!!!</span><br>s = <span class="hljs-string">&quot;xiaozhang&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>    result = s[i]<br><span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># we can just using the slicing</span><br><span class="hljs-built_in">print</span>(s[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="LinkedList-CRUD"><a href="#LinkedList-CRUD" class="headerlink" title="LinkedList CRUD"></a>LinkedList CRUD</h2><p>Linked list is not in the Python default data type, so we have to self define it.  The first node and its reference can represent the whole linked list, because you can find from one to infinity one by one. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        self.val = val<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        val in here is the node value, it can be integer or anything, &quot;next&quot; is to connect this node to next node.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        none in python is an global object, if we cannot define that value specifically, we just denote it as none. Since we do not want to pass no value to that variable. </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_linkedlist</span>():<br>    node_1 = ListNode(<span class="hljs-number">1</span>)<br>    node_2 = ListNode(<span class="hljs-number">3</span>)<br>    node_3 = ListNode(<span class="hljs-number">5</span>)    <br>    node_4 = ListNode(<span class="hljs-number">7</span>)   <br>    <br>    <br>    <br>    node_1.<span class="hljs-built_in">next</span> = node_2<br>    node_2.<span class="hljs-built_in">next</span> = node_3<br>    node_3.<span class="hljs-built_in">next</span> = node_4<br>    <br>    <span class="hljs-keyword">return</span> node_1<br><br><span class="hljs-string">&#x27;&#x27;&#x27;            </span><br><span class="hljs-string">                Val</span><br><span class="hljs-string"> * *           * *  next     * *            * *                                    </span><br><span class="hljs-string">* 1 * -&gt; None * 3 * -&gt; None * 5 *  -&gt; None * 7 * -&gt; None                          </span><br><span class="hljs-string"> * *           * *           * *            * *                     </span><br><span class="hljs-string">  ^             ^             ^              ^</span><br><span class="hljs-string">node_1        node_2         node_3        node_4</span><br><span class="hljs-string">  </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br></code></pre></td></tr></table></figure><p><strong>while loop to read through the linked list</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(cur.val, end=<span class="hljs-string">&quot; &quot;</span>)<br>    cur = cur.<span class="hljs-built_in">next</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>The core idea is that if we can know the head of the linkedlist, then we can know the all linkedlist. So in most cases, we will only store the head of the linkedlist. We will make use of the head of the linkedlist, to do the CRUD for all the linkedList. And these are the core idea for the Linkedlist. We believe if we can know the head of the LinkedList, then we can know all the LinkedList. </p><p>So here, we will do the all the operations based on the manipulation of the head of the linkedlist.</p><h3 id="Create-2"><a href="#Create-2" class="headerlink" title="Create"></a>Create</h3><p><strong>add(location, val)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># here we want to do the operation like: add(2, 2)</span><br><span class="hljs-comment"># which means we want to add a value into the location[2], and assign that value into 2</span><br><br>Like here: <span class="hljs-number">1</span> &gt; <span class="hljs-number">3</span> &gt; <span class="hljs-number">5</span> &gt; <span class="hljs-number">7</span><br>The result should be: <span class="hljs-number">1</span> &gt; <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span> &gt; <span class="hljs-number">5</span> &gt; <span class="hljs-number">7</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">The logic is we have to know the:</span><br><span class="hljs-string">1) the node we add (new_node) before that node, here is &quot;3&quot;, we call it &quot;prev&quot;, we then cut that node&#x27;s connection with the next one.</span><br><span class="hljs-string">2) link the new_node with the position after it (new_node.next).</span><br><span class="hljs-string">3)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># we cut the connection between the original node and the node after it.</span><br>new_node.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span><br><span class="hljs-comment"># we reconnect with the original node with current node we want to add.</span><br>pre.<span class="hljs-built_in">next</span> = new_node<br></code></pre></td></tr></table></figure><p>Here are the actual code:</p><p><img src="/../images/image-20220804004720164.png" alt="image-20220804004720164"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Case 1. Add the value in within the linkedlist, which means the location is &gt; 0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, location, val</span>):<br>        <span class="hljs-keyword">if</span> location &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># if we want to insert the location in 2, then the position before it should be &quot;1&quot;. If from head to the position of &quot;1&quot;, we need to let the head to go 1 step only, if 3 then 2 steps.</span><br>            <span class="hljs-comment"># initiate the head node</span><br>            pre = self.head<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location - <span class="hljs-number">1</span>):<br>                <span class="hljs-comment"># here it means to go forward 1 step</span><br>                pre = pre.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment"># find out the value of the new node</span><br>new_node = ListNode(val)<br>            <span class="hljs-comment"># disconnect and reconnect</span><br>            new_node.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span><br>            pre.<span class="hljs-built_in">next</span> = new_node <br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220804004555432.png" alt="image-20220804004555432"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Case 2. Add the value in the head, where the location is 0</span><br><span class="hljs-keyword">elif</span> location == <span class="hljs-number">0</span>:<br>        new_node = ListNode(val)<br>            new_node.<span class="hljs-built_in">next</span> = self.head<br>            self.head = new_node<br></code></pre></td></tr></table></figure><h3 id="Read-2"><a href="#Read-2" class="headerlink" title="Read"></a>Read</h3><p><strong>get(location)</strong></p><p>Here, we need to do <strong>get(2)</strong></p><p><img src="/../images/image-20220804004928059.png" alt="image-20220804004928059"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, location</span>):<br>    <span class="hljs-comment"># initiate the header value as cur</span><br>    cur = self.head<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location):<br>        cur = cur.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> cur.val<br></code></pre></td></tr></table></figure><p><strong>traverse()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self</span>):<br>    cur = self.head<br>    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(cur.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>       cur = cur.<span class="hljs-built_in">next</span><br>   <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p><strong>is_empty()</strong></p><p>Check whether it is an empty linkedlist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> self.head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h3 id="Update-2"><a href="#Update-2" class="headerlink" title="Update"></a>Update</h3><p><strong>set(location, val)</strong></p><p>The set() function is very similar to the get function, but the get() is only return the value instead of get change the value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">self, location, val</span>):<br>    cur = self.head<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location):<br>        cur = cur.<span class="hljs-built_in">next</span><br>    cur.val = val<br></code></pre></td></tr></table></figure><h3 id="Delete-2"><a href="#Delete-2" class="headerlink" title="Delete"></a>Delete</h3><p><strong>remove(location, val)</strong></p><p>Remove() is very similar to the add() operations.</p><p><img src="/../images/image-20220806002041405.png" alt="image-20220806002041405"></p><p>If we want to remove the node we want to remove, we should remove the node before that node. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Case 1. Remove the value in within the linkedlist, which means the location is &gt; 0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, location</span>):<br>    <span class="hljs-keyword">if</span> location &gt; <span class="hljs-number">0</span>:<br>        pre = self.head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(location - <span class="hljs-number">1</span>):<br>            pre = pre.<span class="hljs-built_in">next</span><br>       <br>        pre.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>    <span class="hljs-comment"># Case 2. Remove the value in the head, where the location is 0</span><br><span class="hljs-keyword">elif</span> location == <span class="hljs-number">0</span>:<br>        self.head = self.head.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h2 id="Stack-CRUD"><a href="#Stack-CRUD" class="headerlink" title="Stack CRUD"></a>Stack CRUD</h2><p>Stack is LIFO(last in first out). </p><p>In python, we can use list as a stack. The last element of the list can be the top stack.</p><p>List can be a kind of stack but in a higher level, since we can do the CRUD in the place we want but stack cannot. We can use the stack to realize the stack functions.</p><h3 id="Create-3"><a href="#Create-3" class="headerlink" title="Create"></a>Create</h3><p>push(val)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.items = []<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, item</span>):<br>        self.items.append(item)<br><br><span class="hljs-comment"># we can just push a element there.</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    my_stack = MyStack()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        my_stack.push(i)<br></code></pre></td></tr></table></figure><h3 id="Read-3"><a href="#Read-3" class="headerlink" title="Read"></a>Read</h3><p>peek(): return the top stack value which is the last value in the list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.items = []<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># if empty, it will just return TRUE, if not empty then it is FALSE, this is from the python initial feature.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> self.items<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">peek</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.is_empty():<br>            <span class="hljs-keyword">return</span> self.items[-<span class="hljs-number">1</span>]<br>        <br><br><span class="hljs-comment"># we can just push a element there.</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    my_stack = MyStack()<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> my_stack.is_empty():<br>my_stack.peek<br></code></pre></td></tr></table></figure><h3 id="Delete-3"><a href="#Delete-3" class="headerlink" title="Delete"></a>Delete</h3><p><strong>pop()</strong></p><p>It will only delete the element at the top of the stack.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.items = []<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> self.items.pop()<br><br><span class="hljs-comment"># we can just delete the last element of the list and return it.</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    my_stack = MyStack()<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> my_stack.is_empty():<br>         my_stack.pop()<br></code></pre></td></tr></table></figure><h2 id="Queue-CURD"><a href="#Queue-CURD" class="headerlink" title="Queue CURD"></a>Queue CURD</h2><p>Queue is first in first out (FIFO).  We can use the LinkedList to make this work. The reason that we are using the linked list instead of list is that: if we are using the list, for the head of that list, if we want to delete that node, the time complexity is o(n). </p><h3 id="Create-4"><a href="#Create-4" class="headerlink" title="Create"></a>Create</h3><p><strong>enqueue(val)</strong></p><p>Get the value into the quene.</p><h3 id="Delete-4"><a href="#Delete-4" class="headerlink" title="Delete"></a>Delete</h3><p><strong>dequeue()</strong></p><p>remove from the queue.</p><p><strong>size()</strong></p><p>check the elements number within the quene.</p><p><strong>is_empty:</strong></p><p>Check whether the quene is empty.</p><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>The binary tree only accepts the two child node for each parent node. If there is no specification, we will think that the tree is the binary tree. Binary tree is just like linked list, it is very important data structures. And there is also some therorums, that each tree  can be converted into the many binary trees.</p><h3 id="Create-5"><a href="#Create-5" class="headerlink" title="Create"></a>Create</h3><p>We can create a binary tree in this way:</p><p>We need to define the class of the tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        self.val = val<br>        self.left = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># there are only two child nodes under each node. But for linked list, we only gonna have one child node.</span><br>        self.right = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>Now, its time to build a binary tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_tree</span>():<br>    node_1 = TreeNode(<span class="hljs-number">8</span>)<br>    node_2 = TreeNode(<span class="hljs-number">2</span>)<br>    node_3 = TreeNode(<span class="hljs-number">10</span>)<br>    node_4 = TreeNode(<span class="hljs-number">1</span>)<br>    node_5 = TreeNode(<span class="hljs-number">7</span>)<br>    <br>    node_1.left = node_2<br>    node_1.right = node_3<br>    <br>    node_2.left = node_4<br>    node_4.right = node_5<br>    node_6 = TreeNode(<span class="hljs-number">14</span>)<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220815234947765.png" alt="image-20220815234947765"></p><p>This pic shows we already defined those nodes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">node_1.left = node_2<br>node_1.right = node_3<br><br>node_2.left = node_4<br>node_2.right = node_5<br><br>node_3.right = node_6<br><span class="hljs-comment"># we finally return the root node.</span><br><span class="hljs-keyword">return</span> node_1<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220816000014300.png" alt="image-20220816000014300"></p><h3 id="Read-4"><a href="#Read-4" class="headerlink" title="Read"></a>Read</h3><p>We can read that data structure by traverse all the binary tree data. </p><h4 id="DFS-Deep"><a href="#DFS-Deep" class="headerlink" title="DFS (Deep)"></a>DFS (Deep)</h4><p><strong>Pre-order ( root - left - right)</strong></p><p>The logic in here is that: for each node, we firstly find the root node, then the left-sub tree, finally the right-sub tree. We call this pre-order traverse. </p><p>Now we only knew the root node, we can print the whole tree by the root node. We can print the left-sub tree, and then the right-sub tree. In this way, we can print all the trees at the same time. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse_tree</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <br><span class="hljs-comment"># if we do not specify the &quot; &quot;, then it can be just &quot;/n&quot;</span><br>    <span class="hljs-built_in">print</span>(root.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-comment"># traverse all the left-sub tree nodes</span><br>    traverse_tree(root.left)<br>    <span class="hljs-comment"># traverse all the right-sub tree nodes</span><br>    traverse_tree(root.right) <span class="hljs-comment"># traversal</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220816014232178.png" alt="image-20220816014232178"></p><p><img src="/../images/image-20220816000014300.png" alt="image-20220816000014300"></p><p>The inorder way is: <strong>left-root-right</strong>, the postorder is <strong>left-right-root</strong>. </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inorder_traverse</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment"># traverse all the left-sub tree nodes</span><br>    inorder_traverse(root.left)<br>    <span class="hljs-comment"># if we do not specify the &quot; &quot;, then it can be just &quot;/n&quot;</span><br>    <span class="hljs-built_in">print</span>(root.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-comment"># traverse all the right-sub tree nodes</span><br>    traverse_tree(root.right) <span class="hljs-comment"># traversal</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">postorder_traverse</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment"># traverse all the left-sub tree nodes</span><br>    inorder_traverse(root.left)<br>    <span class="hljs-comment"># traverse all the right-sub tree nodes</span><br>    traverse_tree(root.right) <span class="hljs-comment"># traversal</span><br>    <span class="hljs-comment"># if we do not specify the &quot; &quot;, then it can be just &quot;/n&quot;</span><br>    <span class="hljs-built_in">print</span>(root.val, end = <span class="hljs-string">&quot; &quot;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="BFS-Breadth-First-Search"><a href="#BFS-Breadth-First-Search" class="headerlink" title="BFS (Breadth First Search)"></a>BFS (Breadth First Search)</h4><p>It will traverse all the tree level by level. For BFS, we will use the queue as basic data structures.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">breadth_first_traverse</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-keyword">return</span> <br><br>    que = Queue(maxsize = <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># put the root node into the queue</span><br>    que.put(root)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> que.empty():<br>        cur = que.get()<br>        <span class="hljs-built_in">print</span>(cur.val, end = <span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">if</span> cur.left:<br>            que.put(cur.left)<br>        <span class="hljs-keyword">if</span> cur.right:<br>            que.put(cur.right)<br>        <span class="hljs-built_in">print</span>()<br>        <br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h1 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h1><p>Recursion is just a way that how we write the algorithm. Recursive is a very smart way to do the algorithm, but recursive is not compulsory. Recursive is just a way that we do the programming, any recursive problem can be divided into the non-recursive problem. </p><p>There are three important factors that we need the recursive:</p><ol><li><strong>the definition of the recursive</strong></li></ol><p>We need to know if this problem can be elegantly used the recursive way to solve.</p><ol start="2"><li><strong>the end case of the recursive</strong></li></ol><p>We should know when the recursion will be stopped.</p><ol start="3"><li><strong>the division of the recursive</strong></li></ol><p>If the recursion is not stopped, how we divide the problems?</p><p>Eg: Fibonacci， </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">34</span>, ...<br><br><span class="hljs-attribute">0</span>+<span class="hljs-number">1</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>+<span class="hljs-number">1</span> = <span class="hljs-number">2</span><br><span class="hljs-attribute">2</span>+<span class="hljs-number">3</span> = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>The question is that if I gave you a number that in the Fibonacci, you should return the order value of that nth value. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># The definition of the recursion: F(n) = F(n-1) + F(n-2)</span><br><span class="hljs-comment"># The exit of the recursion: when n=1, n=2 (1th, 2th...)</span><br><span class="hljs-comment"># The division of the recursion: self.fibonacci(n-1) + self.fibonacci(n-1)</span><br><br><br><span class="hljs-comment"># this is not a good solution but good to express the recursion!!!</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># because this is defined within the class, if we did not add the self, the class will not find it.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> self.fibonacci(n-<span class="hljs-number">1</span>) + self.fibonacci(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="Algorithms-and-Data-Structures"><a href="#Algorithms-and-Data-Structures" class="headerlink" title="Algorithms and Data Structures:"></a>Algorithms and Data Structures:</h1><p>Algorithm is the way how we do things, the data structure is is the structure of how we storage the data.</p><p><strong>二分法</strong></p><p><strong>二叉树&#x2F;链表</strong></p><p><strong>递归&#x2F;DFS</strong></p><p><strong>BFS&#x2F;拓扑排序</strong></p><p><strong>哈希表</strong></p><p><strong>双指针</strong></p><p><strong>动态规划</strong></p><p><strong>堆</strong></p><h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h2><h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><h2 id="Dynamic-Search"><a href="#Dynamic-Search" class="headerlink" title="Dynamic Search"></a>Dynamic Search</h2><h2 id="Topological-Sorting"><a href="#Topological-Sorting" class="headerlink" title="Topological Sorting"></a>Topological Sorting</h2><h2 id="Others-2"><a href="#Others-2" class="headerlink" title="Others"></a>Others</h2><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><h3 id="Divide-amp-Conquer"><a href="#Divide-amp-Conquer" class="headerlink" title="Divide &amp; Conquer"></a>Divide &amp; Conquer</h3><h3 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h3><h3 id="Minimum-Spanning-Tree"><a href="#Minimum-Spanning-Tree" class="headerlink" title="Minimum Spanning Tree"></a>Minimum Spanning Tree</h3><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><h3 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h3><p>Time complexity expresses the efficiency of that algorithm’s efficiency. </p><p><strong>Dynamic Programming</strong></p><p><strong>Linked List</strong></p><p><strong>Recursion</strong></p><p><strong>Binary Tree</strong></p><p><strong>Binary Search</strong></p><p><strong>Depth First Search (DFS)</strong></p><h1 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h1><p>There are three kinds of two pointers:</p><h2 id="Two-pointers-with-the-opposite-direction-judge-whether-a-string-list-is-a-palindrome"><a href="#Two-pointers-with-the-opposite-direction-judge-whether-a-string-list-is-a-palindrome" class="headerlink" title="Two pointers with the opposite direction (judge whether a string list is a palindrome)"></a>Two pointers with the opposite direction (judge whether a string list is a palindrome)</h2><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><h4 id="Reverse-the-string-list"><a href="#Reverse-the-string-list" class="headerlink" title="Reverse the string list"></a>Reverse the string list</h4><h4 id="Judge-whether-the-valid-palindrome"><a href="#Judge-whether-the-valid-palindrome" class="headerlink" title="Judge whether the valid palindrome"></a>Judge whether the valid palindrome</h4><p>From the two sides to compare.</p><h3 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h3><h4 id="Sum-of-two-numbers"><a href="#Sum-of-two-numbers" class="headerlink" title="Sum of two numbers"></a>Sum of two numbers</h4><h4 id="Sum-of-three-numbers"><a href="#Sum-of-three-numbers" class="headerlink" title="Sum of three numbers"></a>Sum of three numbers</h4><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><h4 id="Fast-sorting"><a href="#Fast-sorting" class="headerlink" title="Fast sorting"></a>Fast sorting</h4><h4 id="Color-sorting"><a href="#Color-sorting" class="headerlink" title="Color sorting"></a>Color sorting</h4><h2 id="Two-pointers-with-the-back-direction-the-longest-reverse-list"><a href="#Two-pointers-with-the-back-direction-the-longest-reverse-list" class="headerlink" title="Two pointers with the back direction (the longest reverse list)"></a>Two pointers with the back direction (the longest reverse list)</h2><h2 id="Two-pointers-with-the-same-direction"><a href="#Two-pointers-with-the-same-direction" class="headerlink" title="Two pointers with the same direction"></a>Two pointers with the same direction</h2><h1 id="No-56-Two-Sums"><a href="#No-56-Two-Sums" class="headerlink" title="No. 56 Two Sums"></a>No. 56 Two Sums</h1><h3 id="Return-the-value"><a href="#Return-the-value" class="headerlink" title="Return the value"></a>Return the value</h3><h4 id="1-Two-Pointers"><a href="#1-Two-Pointers" class="headerlink" title="1. Two Pointers"></a>1. Two Pointers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers, target</span>):<br>        [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>] target = <span class="hljs-number">10</span><br>        <br>        <br>        <span class="hljs-comment"># first step is to sort</span><br>        [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]<br>         ^      ^<br>        L  R<br>        <span class="hljs-comment"># next step is to find the relationship between:</span><br>        numbers[L] + nums[R] ? target<br>        <span class="hljs-number">2</span> + <span class="hljs-number">9</span> = <span class="hljs-number">11</span> &gt; <span class="hljs-number">10</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        So we can know the maximum sum is like 11, and it is useless, so remove it.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># we then move to the next step</span><br>        [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br>         ^   ^<br>        L   R<br>        <br>        <span class="hljs-number">2</span> + <span class="hljs-number">6</span> =<span class="hljs-number">8</span> &lt; <span class="hljs-number">10</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        So now we know that 2 is to small, even we add the largest number but still not meet the requirement, so we need to move it and let the L pointer into 4.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        [<span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br>         ^  ^<br>        L  R<br>        <span class="hljs-comment"># And [4, 6] is the exact answer</span><br>        <br>        <br>        <br>        <br>  <br>        <br></code></pre></td></tr></table></figure><p>Here is the general answer, add the max value and the min value, </p><p>if &gt; target, we just remove the max value, </p><p>if &lt; target, we just remove the min value,</p><p>if &#x3D;  target, we just return true.</p><p>if we cannot even find any answer, return [-1, -1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers, target</span>):<br>        <span class="hljs-comment"># nlog(n)</span><br>        numbers.sort()<br>        <span class="hljs-comment"># o(n)</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> numbers[left] + numbers[right] &gt; target:<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> numbers[left] + numbers[right] &lt; target:<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> numbers[left], numbers[right]<br>        <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><h3 id="Return-the-index"><a href="#Return-the-index" class="headerlink" title="Return the index"></a>Return the index</h3><h4 id="Way-1-Hashmap"><a href="#Way-1-Hashmap" class="headerlink" title="Way 1 Hashmap"></a>Way 1 Hashmap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers, target</span>):<br>        <span class="hljs-comment"># now we initiate a hashtable</span><br>        hashset = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-comment"># O(n)</span><br>        <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers:<br>            <span class="hljs-comment"># [2,4,5], target = 8</span><br>            <span class="hljs-keyword">if</span> target - number <span class="hljs-keyword">in</span> hashset:<br>                <span class="hljs-keyword">return</span> number, target-number<br>            hashset.add(number)<br>        <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="Way-2-Two-Pointers"><a href="#Way-2-Two-Pointers" class="headerlink" title="Way 2 Two Pointers"></a>Way 2 Two Pointers</h4><p>If we want to return the index of the values, so we have better to use the hash map.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        <span class="hljs-comment"># here is like if there is no numbers, then should return the default values.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>        <br>        nums = [(nums, index)<br>               <span class="hljs-keyword">for</span> index, nums <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums)]<br>        <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        the codes there equals to:</span><br><span class="hljs-string">        nums = [] </span><br><span class="hljs-string">        for index, numbers in enumerate(numbers):</span><br><span class="hljs-string">        nums.append((numbers, index))</span><br><span class="hljs-string">        numbers[0], 0</span><br><span class="hljs-string">        numbers[1], 1</span><br><span class="hljs-string">        numbers[2], 2</span><br><span class="hljs-string">        ...</span><br><span class="hljs-string">        numbers[n], n</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># now we still sort the values of the tuples</span><br>        nums.sort()<br>        <span class="hljs-comment"># we only need to add the index values there</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) -<span class="hljs-number">1</span> <br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> nums[left][<span class="hljs-number">0</span>] + nums[right][<span class="hljs-number">0</span>] &gt; target:<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[left][<span class="hljs-number">0</span>] + nums[right][<span class="hljs-number">0</span>] &lt; target:<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>([nums[left][<span class="hljs-number">1</span>], nums[right][<span class="hljs-number">1</span>]])<br>        <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><h1 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h1><h2 id="Quicksort"><a href="#Quicksort" class="headerlink" title="Quicksort"></a>Quicksort</h2><p>There has a sequence like</p><h3 id="Easy-Understand-Version"><a href="#Easy-Understand-Version" class="headerlink" title="Easy Understand Version"></a>Easy Understand Version</h3><p>Pivot:</p><p>L &gt; Pivot &amp;&amp; R &lt; Pivot  &#x3D;&gt; swap L and R</p><p>L &lt;&#x3D; Pivot                          &#x3D;&gt; L &#x3D; L + 1</p><p>R &gt;&#x3D; Pivot                          &#x3D;&gt; R &#x3D; R - 1</p><p>L &gt; R                         &#x3D;&gt; swap L and R</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">    R             Pivot             L<br>               <br><span class="hljs-keyword">swap </span>L <span class="hljs-keyword">and </span>R<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <span class="hljs-attribute">L</span>             Pivot <br>               <br><span class="hljs-attribute">L</span> = L + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">                 Pivot              <span class="hljs-built_in">R</span>     <br>               <br><span class="hljs-built_in">R</span> = <span class="hljs-built_in">R</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">    R                                L                  Pivot   <br>               <br><span class="hljs-keyword">swap </span>L <span class="hljs-keyword">and </span>Pivot<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">sequence</span>):<br>    length = <span class="hljs-built_in">len</span>(sequence)<br>    <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> sequence<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># here we choosed the finial element as the pivot</span><br>        pivot = sequence.pop()<br>    <br>    <br>    items_greater = []<br>    items_lower = []<br>    <br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> sequence:<br>        <span class="hljs-keyword">if</span> item &gt; pivot:<br>            items_greater.append(item)<br>        <span class="hljs-keyword">else</span>:<br>            items_lower.append(item)<br>    <span class="hljs-keyword">return</span> quick_sort(items_greater) + [pivot] + quick_sort(items_lower)<br>    <br>sequence = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(quick_sort(sequence))<br>[<span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">xs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Given indexable and slicable iterable, return a sorted list&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> xs: <span class="hljs-comment"># if given list (or tuple) with one ordered item or more: </span><br>        pivot = xs[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># below will be less than:</span><br>        below = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xs[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &lt; pivot] <br>        <span class="hljs-comment"># above will be greater than or equal to:</span><br>        above = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xs[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt;= pivot]<br>        <span class="hljs-keyword">return</span> quicksort(below) + [pivot] + quicksort(above)<br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">return</span> xs <span class="hljs-comment"># empty lists</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">array</span>):<br>    quickSortHelper(array, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(array) - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> array<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quickSortHelper</span>(<span class="hljs-params">array, startIdx, endIdx</span>):<br>    <span class="hljs-keyword">if</span> startIdx &gt;= endIdx:<br>        <span class="hljs-keyword">return</span><br>    pivotIdx = startIdx<br>    leftIdx = startIdx + <span class="hljs-number">1</span><br>    rightIdx = endIdx<br>    <br>    <br>    <span class="hljs-keyword">while</span> leftIdx &lt;= rightIdx:<br>        <span class="hljs-keyword">if</span> array[leftIdx] &gt; array[pivotIdx] <span class="hljs-keyword">and</span> array[rightIdx] &lt; array[pivotIdx]:<br>            (array[leftIdx], array[rightIdx]) = (array[rightIdx], array[leftIdx])<br>        <span class="hljs-keyword">if</span> array[leftIdx] &lt;= array[pivotIdx]:<br>            leftIdx += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> array[leftIdx] &gt;= array[pivotIdx]:<br>            rightIdx -= <span class="hljs-number">1</span><br>    (array[pivotIdx], array[rightIdx]) = (array[rightIdx], array[pivotIdx])<br></code></pre></td></tr></table></figure><h3 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">Given <span class="hljs-string">[3, 2, 1, 4, 5]</span>, return <span class="hljs-string">[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="Binary-Search-mostly-already-sorted"><a href="#Binary-Search-mostly-already-sorted" class="headerlink" title="Binary Search (mostly already sorted)"></a>Binary Search (mostly already sorted)</h3><p>Binary search is mostly used for search one target value from a sorted array. Binary search used some “decrease and conquer” algorithmic paradigm, which is not include “divide and conquer” algorithm.</p><p><strong>The difference between the “permutation” and “combination” is that, for the processed data the combination is</strong> <strong>without any order</strong>!!!</p><p>Eg. from 5 numbers we just choose 3, unordered, then we call it combination:</p><p>Like  (1, 2, 3) and (2, 1, 3) and (3, 1, 2) they are just the same.</p><p>The idea of the binary search is to keep the half of the “useful” data, and throw the “useless” part.</p><p><strong>Template:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">start</span> <span class="hljs-operator">+</span> (<span class="hljs-keyword">end</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">start</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span><br>A[mid] <span class="hljs-operator">=</span><span class="hljs-operator">=</span>, <span class="hljs-operator">&lt;</span>, <span class="hljs-operator">&gt;</span><br>A[<span class="hljs-keyword">start</span>] A[<span class="hljs-keyword">end</span>] ? target<br></code></pre></td></tr></table></figure><h4 id="Classic-Binary-Search-Problem-https-www-lintcode-com-problem-457"><a href="#Classic-Binary-Search-Problem-https-www-lintcode-com-problem-457" class="headerlink" title="Classic Binary Search Problem: https://www.lintcode.com/problem/457/"></a>Classic Binary Search Problem: <a href="https://www.lintcode.com/problem/457/">https://www.lintcode.com/problem/457/</a></h4><p>Find any position of a target number in a sorted array. Return <code>-1</code> if target does not exist.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>], target = <span class="hljs-number">2</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">binarySearch</span>(<span class="hljs-params">nums, target</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <br>    start, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>    <br><span class="hljs-comment"># this is the recommendation type, we can write start &lt; end, we strongly suggest this type, because it is suitable for all!!!</span><br>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:<br><span class="hljs-comment"># caculate the mid point, the single &quot;/&quot; means just divide which has the float part, but &quot;//&quot; means we can only keep the integer part.</span><br>        mid = (start + end)//<span class="hljs-number">2</span><br>        <span class="hljs-comment"># We need to choose these situation case by case.</span><br>        <span class="hljs-keyword">if</span> nums[mid] &lt; target:<br>            start = mid<br>        <span class="hljs-keyword">elif</span> nums[mid] == target:<br>            end = mid<br>        <span class="hljs-keyword">else</span>:<br>            end = mid<br>    <span class="hljs-keyword">if</span> nums[start] == target:<br>        <span class="hljs-keyword">return</span> start<br>    <span class="hljs-keyword">if</span> nums[end] == target:<br>        <span class="hljs-keyword">return</span> end<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h1><p>Find the sum of from the 1~100</p><p>BFS (Broad First Search) focuses on the width of the search.<br>DFS (Deep First Search) focuses on the depth of the search.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br><span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>After we use the recursion, f(1) &#x3D; 1, f(n) &#x3D; f(n-1) + n</p><p>1: f(1) &#x3D; 1<br>2: f(2) &#x3D; f(1) + 1</p><p>If we want to prove f(n), we need firstly prove f(1) is valid, and the next step is just to make a hypothesis that the f(n-1) is also valid. So from f(n-1) we can prove the f(n) is valid.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recursive_sum</span>(<span class="hljs-params">n</span>):<br><br><span class="hljs-comment"># S1. this is to prove that f(1) = 1</span><br><span class="hljs-keyword">if</span> n== <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># S2. this is to prove that the f(n-1) is also valid, write the code like f(n) = f(n-1) + n</span><br><span class="hljs-keyword">return</span> recursive_sum(n-<span class="hljs-number">1</span>) + n<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span> n = <span class="hljs-number">5</span>:<br><span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">4</span>) + <span class="hljs-number">5</span><br> <span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">3</span>) + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br> <span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">2</span>) + <span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br> <span class="hljs-attribute">recursive_sum</span>(<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> + <span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br> <span class="hljs-attribute">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Letter Combinations of a Phone Number:<a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">https://leetcode.com/problems/letter-combinations-of-a-phone-number/</a></p><h4 id="Easy-way-to-understand"><a href="#Easy-way-to-understand" class="headerlink" title="Easy way to understand:"></a>Easy way to understand:</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">Example <span class="hljs-number">1</span>:<br><br><span class="hljs-symbol">Input:</span> digits = <span class="hljs-string">&quot;23&quot;</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;ad&quot;</span>,<span class="hljs-string">&quot;ae&quot;</span>,<span class="hljs-string">&quot;af&quot;</span>,<span class="hljs-string">&quot;bd&quot;</span>,<span class="hljs-string">&quot;be&quot;</span>,<span class="hljs-string">&quot;bf&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;ce&quot;</span>,<span class="hljs-string">&quot;cf&quot;</span>]<br>Example <span class="hljs-number">2</span>:<br><br><span class="hljs-symbol">Input:</span> digits = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">Output:</span> []<br>Example <span class="hljs-number">3</span>:<br><br><span class="hljs-symbol">Input:</span> digits = <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">KEYBOARD = &#123;<br>        <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>        <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;def&quot;</span>,<br>        <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-string">&quot;ghi&quot;</span>,<br>        <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-string">&quot;jkl&quot;</span>,<br>        <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-string">&quot;mno&quot;</span>,<br>        <span class="hljs-string">&quot;7&quot;</span>: <span class="hljs-string">&quot;pqrs&quot;</span>,<br>        <span class="hljs-string">&quot;8&quot;</span>: <span class="hljs-string">&quot;tuv&quot;</span>,<br>        <span class="hljs-string">&quot;9&quot;</span>: <span class="hljs-string">&quot;wxyz&quot;</span>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(digits) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> []<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(digits) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(KEYBOARD[digits[<span class="hljs-number">0</span>]])<br>        <span class="hljs-keyword">else</span>:<br>            previous_list = self.letterCombinations(digits[:-<span class="hljs-number">1</span>])<br>            last_list = <span class="hljs-built_in">list</span>(KEYBOARD[digits[-<span class="hljs-number">1</span>]])<br>            res = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> last_list:<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> previous_list:<br>                    res.append(j+i)<br>            <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># when we do the recursion, the first step is to build a variable, here we defined a dict, which shows the mapping structure. We do not use the &quot;0&quot; and &quot;1&quot;. Actually in python, the dict can be thought as the hashmap.</span><br>KEYBOARD = &#123; <br>        <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>        <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;def&quot;</span>,<br>        <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-string">&quot;ghi&quot;</span>,<br>        <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-string">&quot;jkl&quot;</span>,<br>        <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-string">&quot;mno&quot;</span>,<br>        <span class="hljs-string">&quot;7&quot;</span>: <span class="hljs-string">&quot;pqrs&quot;</span>,<br>        <span class="hljs-string">&quot;8&quot;</span>: <span class="hljs-string">&quot;tuv&quot;</span>,<br>        <span class="hljs-string">&quot;9&quot;</span>: <span class="hljs-string">&quot;wxyz&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(digits) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> []<br>    combinations = []<br>    <span class="hljs-comment"># digits just the input string</span><br>    <span class="hljs-comment"># 0 is the the index which is the starting point:0, </span><br>    <span class="hljs-comment"># [] is the path that if nothing in there so it is an empty list. Since here we did not read through, so it is empty.</span><br>    <span class="hljs-comment"># combinations are the answer, if there is an anwer, we just put it in there.</span><br>    self.dfs(digits, <span class="hljs-number">0</span>, [], combinations)<br>    <span class="hljs-keyword">return</span> combinations<br><br><br><span class="hljs-comment"># dfs is the core of this program.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self, digits, index, combination, combinations</span>):<br>    <span class="hljs-comment"># the index here means which element we will do the process</span><br>    <span class="hljs-comment"># combination means the characters it contains in the current path</span><br>    <span class="hljs-comment"># combinations is the final result</span><br>    <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(digits):<br>        combination.append(<span class="hljs-string">&#x27;&#x27;</span>.join(combination))<br>        <span class="hljs-keyword">return</span> <br>    <br>    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> KEYBOARD[digits[index]]:<br>        combination.append(letter)<br>        self.dfs(digits, index + <span class="hljs-number">1</span>, combination, combinations)<br>        combination.pop()<br>               <br>        <br>            <br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">combinationsHere are just <span class="hljs-selector-tag">a</span> example of how the dfs works:<br><br>def <span class="hljs-built_in">dfs</span>(self, <span class="hljs-string">&quot;23&quot;</span>, <span class="hljs-number">0</span>, combination, combinations):<br>for letter in <span class="hljs-built_in">KEYBOARD</span>([<span class="hljs-string">&quot;23&quot;</span>][<span class="hljs-number">0</span>]):<br>=: <br>for letter in <span class="hljs-built_in">KEYBOARD</span>([<span class="hljs-string">&quot;2&quot;</span>]):<br>=:<br>for letter in <span class="hljs-string">&quot;abc&quot;</span>:<br>combination.<span class="hljs-built_in">append</span>(letter)<br>NOW we got: combination = [a, b, c]<br>self.<span class="hljs-built_in">dfs</span>(<span class="hljs-string">&quot;23&quot;</span>, <span class="hljs-number">1</span>, [a, b, c], combinations)<br><br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/1212983/python-dfs-easy-to-understand-solution">https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/1212983/python-dfs-easy-to-understand-solution</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type digits: str</span><br><span class="hljs-string">        :rtype: List[str]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>       <br>        combinations = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> digits:<br>            <span class="hljs-keyword">return</span> combinations <br>        <br>        self.dfs(digits, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>,combinations)<br>        <span class="hljs-keyword">return</span> combinations <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self, digits, index, combination, combinations</span>):<br>        keyboard = [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;ghi&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>,<span class="hljs-string">&quot;mno&quot;</span>,<span class="hljs-string">&quot;pqrs&quot;</span>,<span class="hljs-string">&quot;tuv&quot;</span>,<span class="hljs-string">&quot;wxyz&quot;</span>]<br>        <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(digits):<br>            combinations.append(combination)<br>            <span class="hljs-keyword">return</span>;<br>            <br>        digit = <span class="hljs-built_in">int</span>(digits[index])<br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(keyboard[digit])):<br>            self.dfs(digits, index+<span class="hljs-number">1</span>, combination+ keyboard[digit][i],combinations)<br></code></pre></td></tr></table></figure><h1 id="strStr"><a href="#strStr" class="headerlink" title="strStr:"></a>strStr:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">source = <span class="hljs-string">&quot;abcdefg&quot;</span><br>target = <span class="hljs-string">&quot;abc&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">source, target</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(source)):<br><span class="hljs-keyword">if</span> source[i: i + <span class="hljs-built_in">len</span>(target)] == target:<br><span class="hljs-keyword">return</span> i<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(strStr(source, target))<br></code></pre></td></tr></table></figure><p>Much better solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">source = <span class="hljs-string">&quot;abcdefg&quot;</span><br>target = <span class="hljs-string">&quot;abc&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">source, target</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(source)):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(target)):<br><span class="hljs-keyword">if</span> source[i+j] != target[j]:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> i<br></code></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h1><ol><li><p>No many loops, no more than 3 levels:</p></li><li><p>Always ask if there is the code review part</p></li><li><p>Improvements:</p></li></ol><p>**A good readable code is the most important part of the coding part, since nobody want to maintain an unreadable code there! **</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">if (grid[i][j]) == <span class="hljs-number">1</span>) &#123;<br>...<br>&#125; else if (grid[i][j] == <span class="hljs-number">2</span>)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>Needs to explain what is Magic number: 1 &amp; 2! There is a good way to write it shows the industrial experience:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs prolog">class <span class="hljs-symbol">GridType</span>:<br><span class="hljs-symbol">WALL</span> = <span class="hljs-number">1</span><br><span class="hljs-symbol">PEOPLE</span> = <span class="hljs-number">2</span><br><br><br>if (grid[i][j]) == <span class="hljs-symbol">GridType</span>.<span class="hljs-symbol">WALL</span>) &#123;<br>...<br>&#125; else if (grid[i][j] == <span class="hljs-symbol">GridType</span>.<span class="hljs-symbol">PEOPLE</span>)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>The problem of the Index</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">list</span>[i]<br>Since there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> limitation of the i:<br>We alreadys need <span class="hljs-keyword">to</span> care about the <span class="hljs-built_in">range</span> of i<br></code></pre></td></tr></table></figure><ol start="5"><li><p>Always decouple the codes and decrease the readability difficulty, system is much important than details. So if we use smaller modules rather than big chunks of code, that is very important. If there is an error, so it will only affect that single module instead of others.</p></li><li><p>Good naming functions:</p></li></ol><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">find_name_by_</span></span>...<br></code></pre></td></tr></table></figure><ol start="7"><li><p>Good codes do not need comments, but you can read easily from the name of the function, logic of the functions… Trash codes need comments…</p></li><li><p>Judge ways:</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">Logicality<br><br><span class="hljs-selector-tag">Code</span> Quality<br></code></pre></td></tr></table></figure><ol start="9"><li><p>Always code before ask the requirements, when totally understood, just stop chatting and write codes. Do not need to ask a lot when do the codings there. In order to save time.</p></li><li><p>If the question you already met, then you should tell the people, so he can change the question.</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kaldi for Dummies</title>
    <link href="/2022/07/11/Kaldi-for-Dummies/"/>
    <url>/2022/07/11/Kaldi-for-Dummies/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="1-Acoustic-Model-Introduction"><a href="#1-Acoustic-Model-Introduction" class="headerlink" title="1. Acoustic Model: Introduction"></a>1. Acoustic Model: Introduction</h1><p>Any ASR system can be just divided into three parts: </p><ol><li>Acoustic Model</li><li>Language Model</li><li>Decoder</li></ol><p>Kaldi has a lot of examples in its projects.There are two necessary raw materials for us to train the model:</p><ol><li><strong>.wav file</strong></li><li><strong>labelled .txt</strong></li></ol><p>We need four necessary elements in Kaldi! We call it <strong>“HCLG.fst”</strong>, we can make speech recognition from these core file. Acutally, just like we are building a map, and we just decode all the paths from there in order to get the prediction results. The underneath idea just like from the typology from the mathematics.<br>We are using <code>Viterbi</code> algorithm to decoding our <code>HCLG.fst</code>. The exact name should be token passing method, which is a kind of variant algorithm of <code>Viterbi</code>.</p><p><img src="/../images/directorystructure2.png" alt="This Pic is from: https://www.eleanorchodroff.com/tutorial/kaldi/training-acoustic-models.html#prepare-directories"></p><p>Here are some tutorials for installing the Kaldi in your local machine:</p><p><a href="https://www.eleanorchodroff.com/tutorial/kaldi/installation.html">https://www.eleanorchodroff.com/tutorial/kaldi/installation.html</a></p><p><a href="https://www.assemblyai.com/blog/kaldi-speech-recognition-for-beginners-a-simple-tutorial/">https://www.assemblyai.com/blog/kaldi-speech-recognition-for-beginners-a-simple-tutorial/</a></p><h2 id="1-1-Audio-Corpus"><a href="#1-1-Audio-Corpus" class="headerlink" title="1.1 Audio Corpus"></a>1.1 Audio Corpus</h2><p>In kaldi, 1 frame is 10ms. For some front work, it always like 24ms for one frame. For a workable dataset, we at least need 2000 hrs data. </p><h3 id="1-2-1-About-UTF-8"><a href="#1-2-1-About-UTF-8" class="headerlink" title="1.2.1 About UTF-8"></a>1.2.1 About UTF-8</h3><p>Before we really get into the world of Kaldi, we need to know the character decoding and encoding standard. So we need to know the basics of the UTF-8 &amp; Ascii. </p><p>As we knew there can be various languages in this world other than English, we need to make it more accesible to encode and then transmit. Different countries can have different kinds of encoding and decoding standards, this can be a big burden of the communication.Thus, people created the UTF-8 to unify the standards in all of the world, so different countries do need to worry about the discontinuity of the language communication.</p><p>We can just run this before head into the shell, so we can manipulate the Chinese or any other languages’ characters in Python in linux system.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> PYTHONIOENCODING=utf-8<br></code></pre></td></tr></table></figure><p>In UNIX, we can firstly check the file’s encoding format by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">file ../..txt<br></code></pre></td></tr></table></figure><p>If it is UTF-16 Little Endian or other formats, we can just convert it into UTF-8 by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">iconv -l UTF-16LE -t UTF-8 ../.../...<br></code></pre></td></tr></table></figure><p>Eg. there has a <strong>dir</strong> with many .txt files in UTF16 which in <em>local&#x2F;data</em>:</p><p>Here are the standard manipulation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># firstly, we make a new dir and make sure put in all the manipulated data in this dir</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">local</span>/audio_data_utf8<br><br><span class="hljs-comment"># then we do a loop to put all the data in local/data to local/audio_data_utf8</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span>/data/*;<br><span class="hljs-keyword">do</span> <br>&gt; y=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$x</span> | sed <span class="hljs-string">&#x27;s|data|audio_data_utf8|&#x27;</span>`;<br><span class="hljs-comment"># &gt; echo $y      just preview the output</span><br><span class="hljs-comment"># &gt; done </span><br><span class="hljs-comment"># transform all &quot;x&quot; utf16 files into utf8</span><br>iconv -f UTF-16LE -t UTF-8 <span class="hljs-variable">$x</span> &gt; <span class="hljs-variable">$y</span>;<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>other notes</strong></p><p>The liux and windows files are not totally exchangeable, especially when we operate the .txt files on those two different kinds of machines.</p><p>especially we can see some codes shows the dissimilarities like: <feff>.</p><p>we can use dos2unix tool to do the convertion:<br>After we did wget install dos2unix, then we can just do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">dos2unix the_file_I_want_do_conversion.txt<br></code></pre></td></tr></table></figure><h3 id="1-2-2-Text-washing-prepare-the-data"><a href="#1-2-2-Text-washing-prepare-the-data" class="headerlink" title="1.2.2 Text washing(prepare the data)"></a>1.2.2 Text washing(prepare the data)</h3><p>But before we launch the test, we need to firstly do the text washing.</p><p>We need to prpare the data and do the data cleaning from the data_path directory<br>def pre_data(data_path):</p><h4 id="1-2-2-1-Regular-Expression-this-is-always-the-first-step"><a href="#1-2-2-1-Regular-Expression-this-is-always-the-first-step" class="headerlink" title="1.2.2.1 Regular Expression, this is always the first step"></a>1.2.2.1 Regular Expression, this is always the first step</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">This is core processing function, we mostly use Regular Expression here.</span><br><span class="hljs-string">Here is just a sample code, that we need to deal with: abrabic numbers, if its number, then there is no need to do segment, just replace it with space one by one. </span><br><span class="hljs-string"></span><br><span class="hljs-string">input：&quot;一二三五六&quot;</span><br><span class="hljs-string">output：&quot;一 二 三 五 六&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_data</span>():<br><span class="hljs-comment"># Delete &quot;()&quot;</span><br><span class="hljs-comment"># detect Chinese characters(\u4e00-\u9fa5) from a-z, A-Z, 0-9, &quot;.&quot;. It will catch the sentences with those elements.</span><br>a = re.findall(<span class="hljs-string">&#x27;[\u4e00-\u9fa5a-zA-Z0-9 .]+&#x27;</span>, data, re.S)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(a)<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># save the results into a new &quot;solve_data&quot; path</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_data</span>(<span class="hljs-params">data_path+<span class="hljs-string">&quot;solve_data&quot;</span></span>):<br>data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=utf-<span class="hljs-number">8</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:<br>file.writelines(<span class="hljs-built_in">str</span>(line)+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>After we get our target, we need to set the processing functions.</p><h4 id="1-1-1-2-Replace-numbers-into-words"><a href="#1-1-1-2-Replace-numbers-into-words" class="headerlink" title="1.1.1.2 Replace numbers into words"></a>1.1.1.2 Replace numbers into words</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_num</span>(<span class="hljs-params">data</span>)<br>data.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;zero&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>)<br><span class="hljs-comment"># .......</span><br></code></pre></td></tr></table></figure><h4 id="1-1-1-3-Segment"><a href="#1-1-1-3-Segment" class="headerlink" title="1.1.1.3 Segment"></a>1.1.1.3 Segment</h4><p>We need to enterpret the text file to phones, the tools we need is lexicon, which is just like the dictionary. So in this way, we need to segement the words, and according to our prior knowledge from our dictionary, so we can invert the segmented words into the phones. This step is typically used for the language like Chinese, since for Chinese, the word’s stop is not just like we put a space there, but we need to segment it manually. For Chinese, we mostly use Jieba to segement the sentences into words. </p><p>Here are the preview of the results should be:<br>input：”今天是一个好日子”<br>output：”今天 是 一个 好 日子”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> jieba<br><br><span class="hljs-comment"># Claim the function for segmenting</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">segment_item</span>(<span class="hljs-params">data</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># After we set this function we can combine into the previous saving files.</span><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br><span class="hljs-comment"># we firstly do the segment and then save it one by one</span><br>segmet_list = segement_item(item[<span class="hljs-number">1</span>])<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + segmet_list + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br></code></pre></td></tr></table></figure><h4 id="1-1-1-4-Combine-into-a-whole-processing-structure"><a href="#1-1-1-4-Combine-into-a-whole-processing-structure" class="headerlink" title="1.1.1.4 Combine into a whole processing structure"></a>1.1.1.4 Combine into a whole processing structure</h4><p>Now after we did the regular expression and jieba. We just combine them together. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jieba_cut_data</span>(<span class="hljs-params">data</span>):<br><br>data = replace_num(data)<br><span class="hljs-comment"># this is just for the normal case, we just need to cut the sentences</span><br><span class="hljs-comment"># cut the words with &quot; &quot; one space, and replace the &quot;  &quot;(two spaces) into only one space.</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>)<br><br><br><span class="hljs-comment"># these are the needs for unusual cases, which we dealt before in the RE section, we already found out the words with those elements we want to handle with. Now, it is time for us to deal with them. If there is all numbers, so we just do not split the words, like &quot;一二三四五&quot;.</span><br>is_cut =  <span class="hljs-literal">True</span><br><br><br><br><span class="hljs-comment"># here if the scenario is TRUE, which means there is a element in there, if all are numbers it will become [True, True, True, True, True, ... True, True], in that case, it will be &quot;is_cut&quot; ture. Not in, is not return anymore.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  这是 学习 笔记</span><br><span class="hljs-string">output: [], which is an empty list</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  这是一本学习笔记本卖两块</span><br><span class="hljs-string">output: [  Ture,         True], sum this list we got 2, but not equals to the previous list length, so we do not process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [Ture, Ture, Ture, Ture, True], sum this list we got 5, equals to the previous list length, so we process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>（[<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data <span class="hljs-keyword">if</span> item <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;零&quot;</span>], [<span class="hljs-string">&quot;壹&quot;</span>], [<span class="hljs-string">&quot;二&quot;</span>], [<span class="hljs-string">&quot;三&quot;</span>], [<span class="hljs-string">&quot;四&quot;</span>]， [<span class="hljs-string">&quot;五&quot;</span>]]）== !<span class="hljs-built_in">len</span>(data):<br>is_cut = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># here if the scenario is TRUE, not all the context are numbers. we just follow the normal way, cut it with jieba, and replace the two spaces into one space.</span><br><span class="hljs-keyword">if</span> is_cut:<br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br><span class="hljs-keyword">else</span>：<br><span class="hljs-comment"># we process those context with full numbers.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [一 二 三 四 五]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(data)<br><span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;).strip()), preview the results to delete the &#x27;\n&#x27; together with the space.</span><br><span class="hljs-comment"># just append the data that once processed.</span><br><span class="hljs-comment"># bef_data here is the before data</span><br>bef_data = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># cut the sentences into words</span><br>bef_data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(bef_data))<br><span class="hljs-comment"># here we input the bef_data, after processed in solve_data() function to get the processed data</span><br>data.append(solve_data(bef_data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># this is a magic function</span><br><span class="hljs-keyword">if</span> _name_== <span class="hljs-string">&#x27;_main_&#x27;</span>:<br>data_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>pre_data(data_path)<br><br></code></pre></td></tr></table></figure><h2 id="1-2-Basic-preparation"><a href="#1-2-Basic-preparation" class="headerlink" title="1.2 Basic preparation"></a>1.2 Basic preparation</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">├── data<br>│   ├── train<br>│   │   ├── wav<span class="hljs-number">.</span>scp<br>│   │   ├── text<br>│   │   ├── utt2spk<br>│   │   ├── spk2utt<br>│   ├── <span class="hljs-keyword">test</span><br>|── dict<br>│   ├── lexicon<span class="hljs-number">.</span>txt<br>│   ├── extra_questions<span class="hljs-number">.</span>txt<br>│   ├── nosilence_phones<span class="hljs-number">.</span>txt<br>│   ├── silence_phones<span class="hljs-number">.</span>txt<br>|── lang<br>│   ├── L<span class="hljs-number">.</span><span class="hljs-keyword">fst</span>/L_disambig<span class="hljs-number">.</span><span class="hljs-keyword">fst</span><br>│   ├── oov<span class="hljs-number">.</span><span class="hljs-keyword">int</span>/oov<span class="hljs-number">.</span>txt<br>│   ├── phones<span class="hljs-number">.</span>txt<br>│   ├── topo<br>│   ├── words<span class="hljs-number">.</span>txt<br>│   ├── phone<br><br></code></pre></td></tr></table></figure><p>This can be how we prepare those files.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 1 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">local</span>/thchs-30_data_prep.sh <span class="hljs-variable">$thchs</span>/data_thchs30<br>  <span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$thchs</span>/data_thchs30 data_thchs30<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: language preparation ######&#x27;</span><br>  <span class="hljs-comment"># prepare lexicon.txt, extra_questions.txt, nonsilence_phones.txt, optional_silence.txt, silence_phones.txt</span><br>  <span class="hljs-comment"># build a large lexicon that invovles words in both the training and decoding, all in data/dict</span><br>  <span class="hljs-built_in">mkdir</span> -p data/dict;<br>  <span class="hljs-built_in">cp</span> <span class="hljs-variable">$thchs</span>/resource/dict/&#123;extra_questions.txt,nonsilence_phones.txt,optional_silence.txt,silence_phones.txt&#125; data/dict &amp;&amp; \<br>  <span class="hljs-built_in">cat</span> <span class="hljs-variable">$thchs</span>/resource/dict/lexicon.txt <span class="hljs-variable">$thchs</span>/data_thchs30/lm_word/lexicon.txt | \<br>  grep -v <span class="hljs-string">&#x27;&lt;s&gt;&#x27;</span> | grep -v <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span> | <span class="hljs-built_in">sort</span> -u &gt; data/dict/lexicon.txt<br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: language processing ######&#x27;</span><br>  <span class="hljs-comment"># generate language stuff used for training</span><br>  <span class="hljs-comment"># also lexicon to L_disambig.fst for graph making in local/thchs-30_decode.sh</span><br>  <span class="hljs-built_in">mkdir</span> -p data/lang;<br>  utils/prepare_lang.sh --position_dependent_phones <span class="hljs-literal">false</span> data/dict <span class="hljs-string">&quot;&lt;SPOKEN_NOISE&gt;&quot;</span> data/local/lang data/lang<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="1-2-1-Step-1-Prepare-Train-Files"><a href="#1-2-1-Step-1-Prepare-Train-Files" class="headerlink" title="1.2.1 Step 1. Prepare $Train Files"></a>1.2.1 Step 1. Prepare $Train Files</h3><p>For building those four elements, we need 4 files: <strong>1. wav.scp, 2. text, 3. utt2spk, 4. spk2utt.</strong></p><p><img src="/../images/image-20220817041457234.png" alt="image-20220817041457234"></p><h4 id="wav-scp"><a href="#wav-scp" class="headerlink" title="wav.scp"></a>wav.scp</h4><p>Here is the format of those 4 files:</p><ol><li><strong>wav.scp: [audio id] –&gt; [file directory path name]</strong></li></ol><p>Here are the <code>python</code> way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#The location of the audio directory</span><br>target_dir = <span class="hljs-string">&#x27;./../../&#x27;</span><br>save_path = <span class="hljs-string">&#x27;./../../&#x27;</span><br><br><span class="hljs-comment"># Loop all the audio resources</span><br>wav_scp = []<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># Append all the .wav file into the list</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><span class="hljs-comment"># Here we use &quot;.&quot; to split the file_name and use join to combine our directory address. We also can use &quot;os.path.join(target_dir + filename)&quot;. </span><br>wav_scp.append([file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], os.path.join(target_dir, filename)])<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># we can check the output by print(wav_scp)</span><br><span class="hljs-comment"># Save wav_scp</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(save_path, wav.scp), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># Loop all the items in wav.scp and save them one by one</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> wav.scp: <br>file.writelines(item[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot; &quot;</span>+item[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\n&quot;</span>)   <br><span class="hljs-comment">#Our output format should be:  filename target_dir filename</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>The last step can be sorting the file name by vim:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Unix">:sort<br></code></pre></td></tr></table></figure><p>The <em>UNIX</em> way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># find all the wav_files name and their dir</span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> <br><span class="hljs-comment"># use find we can list all the .wav files&#x27; name, the &quot;i&quot; in &quot;-iname&quot; means not caring the upper or lower case of the characters.</span><br><br><span class="hljs-comment">#we can check it by printing the first line </span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> | <span class="hljs-built_in">head</span> -n 1<br><br><span class="hljs-comment"># then we can save the .wav file list into a temp place</span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> &gt; wav.scp.temp<br><br><span class="hljs-comment"># now we already got all the uttpath, but we still need the uttid</span><br><br><span class="hljs-built_in">cat</span> wav.scp.temp | awk - F <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;printf(&quot;%s_%s\n&quot;, $(NF-1), $NF)&#125; &#x27;</span>|sed <span class="hljs-string">&#x27;s|.wav||&#x27;</span> &gt; wav_id<br><span class="hljs-comment"># here we are using sed to remove all the &quot;.wav&quot; strings into &quot; &quot; || means &quot;&quot;, which is empty space</span><br><br><span class="hljs-comment"># we only need to combine the wav.scp.temp and wav_id, since there are all in great orders, so we can just do:</span><br><span class="hljs-comment"># preview the data: paste -d&#x27; &#x27; wav_id wav.scp.temp | head -n 1</span><br><span class="hljs-built_in">paste</span> -d<span class="hljs-string">&#x27; &#x27;</span> wav_id wav.scp.temp &gt; wav.scp<br><span class="hljs-comment"># now we can get all the wav.scp</span><br><br><br><br><br></code></pre></td></tr></table></figure><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a><strong>Text</strong></h4><ol start="2"><li><strong>text:    audio id –&gt; labelled file</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">From AUDIOSPK1001.txt get ID and &quot;I Love Kaldi&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 I Love Kaldi</span><br><span class="hljs-string">AUDIOSPK1002 Me too</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>target_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><span class="hljs-comment"># This is the stored text file</span><br><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>text = []<br><br><br><span class="hljs-comment"># loop all the text file name in directory</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># only operate the file that ends with &quot;.txt&quot;</span><br><span class="hljs-keyword">if</span> filename[-<span class="hljs-number">4</span>:] != <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><br><span class="hljs-comment"># read the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_dir, filename), <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># read line by line </span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># Delete all &quot;\n&quot; and the the space</span><br>line = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;)), we can print the text files all in one screen without the \n symbols.</span><br><br><span class="hljs-comment"># Get the filename with its contents</span><br>text.append([filename.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], line])<br><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + item[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p>At the same time, here are the <em><strong>UNIX</strong></em> way:</p><p>we need to get the format like <code>SPK_ID WAV_PATH</code></p><p><strong>#AUDIOSPK1001 I Love Kaldi</strong><br><strong>#AUDIOSPK1002 Me too</strong></p><p>Here we just create a .sh file called <em>generate_text_id.sh</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-meta">#! /bin/bash</span><br>spk_id = <span class="hljs-variable">$1</span>  <span class="hljs-comment">#$1 is your first variable</span><br><br><span class="hljs-built_in">exit</span> 0;<br><br></code></pre></td></tr></table></figure><p>Then we need to make it into a runable file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">chmod</span> +x generate_text_id.sh <br></code></pre></td></tr></table></figure><p>And then we can run it again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">./generate_text_id.sh SPK.txt<br><span class="hljs-comment"># it will just print itself</span><br>SPK.txt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br>spk_id = <span class="hljs-variable">$1</span>  <span class="hljs-comment">#$1 is your first variable</span><br><br><span class="hljs-comment"># echo spk_id, this will just print the first column</span><br>awk &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>, <span class="hljs-variable">$spk_id</span>, <span class="hljs-variable">$1</span>)&#125;<span class="hljs-string">&#x27; $spk_id</span><br><span class="hljs-string"></span><br><span class="hljs-string">exit 0;</span><br></code></pre></td></tr></table></figure><h4 id="utt2spk-audio-id-–-gt-SPK-id"><a href="#utt2spk-audio-id-–-gt-SPK-id" class="headerlink" title="utt2spk: audio id –&gt; SPK id"></a><strong>utt2spk: audio id –&gt; SPK id</strong></h4><h4 id="spk2utt-SPK-–-gt-audio-id"><a href="#spk2utt-SPK-–-gt-audio-id" class="headerlink" title="spk2utt: SPK      –&gt; audio id"></a><strong>spk2utt: SPK      –&gt; audio id</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># The path of the audio resources</span><br>path_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><span class="hljs-comment"># The final output path</span><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><br><span class="hljs-comment"># Save the final results</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data, file_name</span>):<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_file, file_name), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br><span class="hljs-comment"># save the item line in line</span><br>file.writelines(item)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 SPK1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_utt2spk</span>():<br><span class="hljs-comment"># For saving the final results</span><br>utt2spk = [] <br><span class="hljs-comment"># loop all the directories</span><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># if the file itself is .wav file, we operate, others dismiss</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><br><br><span class="hljs-comment"># Audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><span class="hljs-comment"># Print(utt+ &quot; &quot; + spk + &quot;\n&quot;)</span><br><span class="hljs-comment"># Add into utt2spk</span><br>utt2spk.append(utt + <span class="hljs-string">&quot; &quot;</span> + spk + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the data</span><br>save_data(utt2spk, <span class="hljs-string">&quot;utt2spk&quot;</span>)<br><br><br><br><span class="hljs-comment"># set the function to get spk2utt</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">SPK1 AUDIOSPK1001 AUDIOSPK1002</span><br><span class="hljs-string">SPK2 AUDIOSPK2001 AUDIOSPK2001</span><br><span class="hljs-string">......</span><br><span class="hljs-string">dict&#123;</span><br><span class="hljs-string">&quot;SPK1&quot; : [AUDIOSPK1001, AUDIOSPK1002],</span><br><span class="hljs-string">&quot;SPK2&quot; : [AUDIOSPK2001, AUDIOSPK2002],</span><br><span class="hljs-string">......</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_spk2utt</span>():<br>spk2utt = &#123;&#125;<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># Delete a file</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-comment"># audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><br><span class="hljs-comment"># If there has a SPK here, we just append</span><br><span class="hljs-keyword">if</span> spk <span class="hljs-keyword">in</span> spk2utt:<br>spk2utt[spk].append(utt)<br><span class="hljs-comment"># If there not have a SPK here, we just preset it as a list. </span><br><span class="hljs-keyword">else</span>:<br>spk2utt[spk] = []<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># using print(spk2utt) to check</span><br><br><span class="hljs-comment"># final output list from the dict</span><br>write_spk2utt = []<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> spk2utt.keys():<br>write_spk2utt.append(<span class="hljs-built_in">str</span>(key)+<span class="hljs-string">&quot; &quot;</span>.join(spk2utt(key))+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">list = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br><span class="hljs-string">print(&quot; &quot;.join(list))</span><br><span class="hljs-string">------------------------------------------------------</span><br><span class="hljs-string">A B C D</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the output</span><br>save_data(write_spk2utt, <span class="hljs-string">&quot;spk2utt&quot;</span>)<br><span class="hljs-keyword">pass</span><br><br><br><br>get_spk2utt()<br>get_utt2spk()<br></code></pre></td></tr></table></figure><p>The difference between the utt2spk and the spk2utt is that, for utt2spk, there is only one-to-one relations instead of like spk2utt, there are one-to-multiple relation. So, in most cases, we only need either 3 or 4, because if we already got one, another one is also can be derived.</p><h3 id="1-2-2-Step-2-Prepare-Dict-x2F-Dictionary"><a href="#1-2-2-Step-2-Prepare-Dict-x2F-Dictionary" class="headerlink" title="1.2.2 Step 2. Prepare $Dict&#x2F;Dictionary"></a>1.2.2 Step 2. Prepare $Dict&#x2F;Dictionary</h3><p>Dictionary this is the<code> dict</code> file we need to manipulate, in <code>dict</code> directory. The <code> dict</code>  folder can contain these files that we needed:</p><p><img src="/../images/image-20220817042227053.png" alt="image-20220817042227053"></p><figure class="highlight plaintext"><figcaption><span>includes:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs dict```"><br>#### lexicon.txt : word --&gt; phones<br><br>We need to get the ```lexicon.txt``` by running  ```get_lexicon.py```. <br><br>We need two kinds of dictionaries.<br>1st. the ```lexicon.txt``` from the corpus to better train a ```n-gram``` model, in some words, the language model.<br>2st. the word-to-phones, we also need a reference lists from there, we need acoustic model. In this case, so we need a &quot;BIG&quot; dictionary.<br><br><br>In this step, we need to transform the words into phones, so we can align the words and train them.<br><br>```python<br>&#x27;&#x27;&#x27;<br>This is the dictionary mostly for the acoustic training needs.<br>去年  q v4 n ian2<br>上去  sh ang4 q v4<br>上去  sh ang4 q v5<br><br>&#x27;&#x27;&#x27;<br>def get_lexicon(data_path):<br><br># set can reduce the duplications. The dictionary must be just a set. <br>lexicon = set()<br>with open(&quot;data_path&quot;, &quot;w&quot;, encoding = &quot;utf-8&quot;) as file:<br>for line in file.readlines():<br>#print(line.strip(&quot;\n&quot;).strip().split(&quot; &quot;)), remove the \n and cut with the identifier from the SPACE &quot; &quot;<br>[lexicon.add(item) for item in line.strip(&quot;\n&quot;).strip().split(&quot; &quot;)]<br>&#x27;&#x27;&#x27;<br>input:  这是一本学习笔记本卖两块<br>output: [这是，一本， 学习， 笔记本， 卖， 两块],<br>&#x27;&#x27;&#x27;<br><br><br>pass<br>pass<br>#print(lexicon)<br># save the lexicon<br>with open(&quot;../.../lexicon.txt&quot;, &quot;w&quot;, encoding = &quot;utf-8&quot;) as file:<br>for item in lexicon:<br>file.writelines(item + &quot;\n&quot;)<br># here are the estimated results.<br>&#x27;&#x27;&#x27;<br>去年 <br>上去  <br>上去  <br>一<br>笔记本<br>卖<br>&#x27;&#x27;&#x27;<br>pass<br>pass<br>pass<br><br>get_lexicon(&quot;./.../temp&quot;)<br><br></code></pre></td></tr></table></figure><h4 id="phone-txt-x2F-nonsilence-phones-txt-all-the-phones"><a href="#phone-txt-x2F-nonsilence-phones-txt-all-the-phones" class="headerlink" title="phone.txt&#x2F;nonsilence_phones.txt : all the phones"></a><strong>phone.txt&#x2F;nonsilence_phones.txt : all the phones</strong></h4><h4 id="silence-phones-txt-SIL"><a href="#silence-phones-txt-SIL" class="headerlink" title="silence_phones.txt : SIL"></a>silence_phones.txt : SIL</h4><h4 id="extra-questions-txt"><a href="#extra-questions-txt" class="headerlink" title="extra_questions.txt"></a>extra_questions.txt</h4><p><img src="/../images/image-20220817042905667.png" alt="image-20220817042905667"></p><p>The meaning of the <code>extra_questions.txt</code> is to distinguistise the same pronunication with difference tones. This is very important for some tonal languages like Mandarin or Thai…</p><p>Finally we can get the ID to words.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">ID    [word1, word2, word3, ..., wordn]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN01&#x27;, &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN02&#x27;, &#x27;Me, too&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">id2words</span>(<span class="hljs-params">data_path</span>):<br><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(data_path):<br><span class="hljs-keyword">if</span> fiel_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">...........</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-2-3-Step-3-Prepare-lang"><a href="#1-2-3-Step-3-Prepare-lang" class="headerlink" title="1.2.3 Step 3. Prepare $lang"></a>1.2.3 Step 3. Prepare $lang</h3><p>The <code>lang</code> file is generated from the <code>dict</code>. </p><h4 id="L-fst-x2F-L-disambig-fst"><a href="#L-fst-x2F-L-disambig-fst" class="headerlink" title="L.fst&#x2F;L_disambig.fst"></a>L.fst&#x2F;L_disambig.fst</h4><p>Here is the preview of the <code>L.fst</code>. </p><p><img src="/../images/image-20220817233820245.png" alt="image-20220817233820245"></p><p><img src="/../images/image-20220817233930142.png" alt="image-20220817233930142"></p><h4 id="oov-int-x2F-oov-txt"><a href="#oov-int-x2F-oov-txt" class="headerlink" title="oov.int&#x2F;oov.txt"></a>oov.int&#x2F;oov.txt</h4><p>OOv means out of vocabulary, it deals with the words that not in the recognition dictionary. </p><h4 id="phones-txt"><a href="#phones-txt" class="headerlink" title="phones.txt"></a>phones.txt</h4><p>Phone.txt gives every phone a number.</p><p><img src="/../images/image-20220817233550549.png" alt="image-20220817233550549"></p><h4 id="topo"><a href="#topo" class="headerlink" title="topo"></a>topo</h4><p>topo means a hidden markov network.</p><p><img src="/../images/image-20220817235807016.png" alt="image-20220817235807016"></p><p><img src="/../images/image-20220817235906320.png" alt="image-20220817235906320"></p><h4 id="words-txt"><a href="#words-txt" class="headerlink" title="words.txt"></a>words.txt</h4><figure class="highlight plaintext"><figcaption><span>will give each word a number.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs words.txt```"><br>![image-20220817233522660](../images/image-20220817233522660.png)<br><br><br><br>#### phone<br><br>```phone``` is a directory, it will help the decision tree to get the clusters. <br><br><br><br>## 1.4 Acoustic Feature Extractions<br><br>We can have the MFCC feature as well as the ```Fbank``` feature. MFCC is in ```13D```, and ```Fbank``` is ```40D```. <br><br>```sh<br>if [ $stage -le 2 ];then<br>  echo &#x27;###### Bookmark: feature extraction ######&#x27;<br>  # produce MFCC and Fbank features in data/&#123;mfcc,fbank&#125;/&#123;train,test&#125;<br>  rm -rf data/mfcc &amp;&amp; mkdir -p data/mfcc &amp;&amp; cp -r data/&#123;train,test&#125; data/mfcc<br>  rm -rf data/fbank &amp;&amp; mkdir -p data/fbank &amp;&amp; cp -r data/&#123;train,test&#125; data/fbank<br>  for x in train test; do<br>    # make mfcc and fbank<br>    steps/make_mfcc.sh --nj $n --cmd &quot;$train_cmd&quot; data/mfcc/$x<br>    steps/make_fbank.sh --nj $n --cmd &quot;$train_cmd&quot; data/fbank/$x<br>    # compute cmvn for mfcc and fbank<br>    steps/compute_cmvn_stats.sh data/mfcc/$x<br>    steps/compute_cmvn_stats.sh data/fbank/$x<br>  done<br>fi<br><br></code></pre></td></tr></table></figure><p>The output files in &#96;&#96;&#96;data&#x2F;mfcc&#x2F;train&#96;&#96; can be:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">utt2dur: <span class="hljs-keyword">the</span> duration <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> audio <span class="hljs-built_in">file</span><br>frame_shift: <span class="hljs-keyword">the</span> frame shit <br>utt2num_frames: <span class="hljs-keyword">the</span> frame <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> speech<br>feats.scp: <span class="hljs-keyword">the</span> feature id<br>cmvn.scp: <span class="hljs-keyword">the</span> cmvn id<br>data: <span class="hljs-keyword">the</span> feature storage path<br><span class="hljs-built_in">log</span>: <span class="hljs-keyword">the</span> <span class="hljs-built_in">log</span> <span class="hljs-built_in">file</span><br></code></pre></td></tr></table></figure><img src="../images/image-20220818000139263.png" alt="image-20220818000139263" style="zoom:80%;" /><img src="../images/image-20220818000210497.png" alt="image-20220818000210497" style="zoom:80%;" /><p>MFCC in mostly is used in GMM training, and Fbank used in DNN training, but also there has some experiments to use the high level MFCC features to train the DNN. </p><p>Here is the MFCC computing scripts. We can use like <code>allow-downsample</code> or <code>allow-up-sample</code> to help us to do some over or down sampling operations. </p><p><img src="/../images/image-20220918005831669.png" alt="image-20220918005831669"></p><p>We can view the log files:</p><p><img src="/../images/image-20220918010635699.png" alt="image-20220918010635699"></p><h2 id="1-5-GMM-Trainning"><a href="#1-5-GMM-Trainning" class="headerlink" title="1.5 GMM Trainning"></a>1.5 GMM Trainning</h2><p>Here we will do the GMM traninings.</p><p><img src="/../images/image-20220918005142692.png" alt="image-20220918005142692"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 3 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: GMM-HMM training ######&#x27;</span><br>  <span class="hljs-comment"># monophone</span><br>  <span class="hljs-comment"># we will train the monophone here.</span><br>  steps/train_mono.sh --boost-silence 1.25 --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/mono<br>  <span class="hljs-comment"># monophone ali</span><br>  <span class="hljs-comment"># we will align the monophone to train a GMM-HMM model once again</span><br>  steps/align_si.sh --boost-silence 1.25 --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/mono exp/mono_ali<br>  <br>  <span class="hljs-comment"># the 1.25 here is the default param for setting the silent phone.</span><br><br>  <span class="hljs-comment"># triphone</span><br>  <span class="hljs-comment"># we will train the monophone here</span><br>  steps/train_deltas.sh --boost-silence 1.25 --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 2000 10000 data/mfcc/train data/lang exp/mono_ali exp/tri1<br>  <span class="hljs-comment"># triphone_ali</span><br>  <span class="hljs-comment"># we will align the triphone to train a GMM-HMM model once again</span><br>  steps/align_si.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri1 exp/tri1_ali<br><br>  <span class="hljs-comment"># lda_mllt</span><br>  <span class="hljs-comment"># we will use the lda_mllt model to do the trainning</span><br>  steps/train_lda_mllt.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> --splice-opts <span class="hljs-string">&quot;--left-context=3 --right-context=3&quot;</span> 2500 15000 data/mfcc/train data/lang exp/tri1_ali exp/tri2b<br>  <span class="hljs-comment"># lda_mllt_ali</span><br>  <span class="hljs-comment"># realign and retrain</span><br>  steps/align_si.sh  --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> --use-graphs <span class="hljs-literal">true</span> data/mfcc/train data/lang exp/tri2b exp/tri2b_ali<br><br>  <span class="hljs-comment"># sat</span><br>  steps/train_sat.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 2500 15000 data/mfcc/train data/lang exp/tri2b_ali exp/tri3b<br>  <span class="hljs-comment"># sat_ali</span><br>  steps/align_fmllr.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri3b exp/tri3b_ali<br><br>  <span class="hljs-comment"># quick</span><br>  steps/train_quick.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 4200 40000 data/mfcc/train data/lang exp/tri3b_ali exp/tri4b<br>  <span class="hljs-comment"># quick_ali</span><br>  steps/align_fmllr.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri4b exp/tri4b_ali<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="1-6-DNN-training"><a href="#1-6-DNN-training" class="headerlink" title="1.6 DNN training"></a>1.6 DNN training</h2><p>Here we will use the <code>TDNN-F (Time Delay Neural Networks Factor)</code> as an example. There are three steps for us to handle this procedure:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 4 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: TDNN-F Chain Training ######&#x27;</span><br>  <span class="hljs-built_in">local</span>/chain/run_tdnn-f_common_skip.sh \<br>    --mfcc-dir data/mfcc/train --fbank-dir data/fbank/train \<br>    --gmm-dir exp/tri4b --ali-dir exp/tri4b_ali <br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>Here are the preview of the <code>run_tdnn-f_common_skip.sh</code> . </p><h4 id="1-6-1-Declare-the-Parameters"><a href="#1-6-1-Declare-the-Parameters" class="headerlink" title="1.6.1 Declare the Parameters"></a>1.6.1 Declare the Parameters</h4><p>The first step if to declare the parameters.</p><p><img src="/../images/image-20220918153003117.png" alt="image-20220918153003117"></p><p>There are some key parameters:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">lat_dir: <span class="hljs-keyword">the</span> dir <span class="hljs-built_in">to</span> store <span class="hljs-keyword">the</span> lattice<br>tree_dir: <span class="hljs-keyword">the</span> dir <span class="hljs-built_in">to</span> store <span class="hljs-keyword">the</span> chain-tree<br>frames_per_eg: how many frames <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> egs, <span class="hljs-keyword">in</span> here <span class="hljs-keyword">it</span> can be <span class="hljs-number">150</span>, <span class="hljs-number">120</span> <span class="hljs-keyword">or</span> <span class="hljs-number">90</span><br>xent_regularize: cross entropy regularization <span class="hljs-built_in">params</span> <br></code></pre></td></tr></table></figure><h4 id="1-6-2-Chain-Modeling"><a href="#1-6-2-Chain-Modeling" class="headerlink" title="1.6.2 Chain Modeling"></a>1.6.2 Chain Modeling</h4><p><img src="/../images/image-20220918222909419.png" alt="image-20220918222909419"></p><p>This equation shows how we optimize the sequence objects:</p><p>$$<br>X : Speech \ Data \<br>W_{r}: The \ real \ transcriptions \<br>\hat{W}: All \ the \ possible \ sequences<br>$$<br>If we look this into anther way, this equation could be:<br>$$<br>F_{MMI} &#x3D; log \frac{lattice}{alignment}<br>$$</p><figure class="highlight plaintext"><figcaption><span>in Kaldi, the concept of it is to get the ```one best sequeces``` from different phones at each frame, we dont focus on **each frame's phone** is what, we only care about whether it is more reasonable. So that is the main difference that compared with the pure DNN. **Phones -> Word**</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs chain```"><br>![image-20220918161023179](../images/image-20220918161023179.png)<br><br>Here we will send those params into the ```run_chain_common.sh```.<br><br>![image-20220918153441474](../images/image-20220918153441474.png)<br><br><br><br>There are three core scripts from the ```run_chain_common.sh```:<br><br>```1. steps/nnet3/chain/gen_topo.py```: It will generate the ```topo``` form files, it has relations with the ```lang``` files. Here are the preview of it. <br><br>![image-20220918155153674](../images/image-20220918155153674.png)<br><br>The upper one is the preview of the common/traditional DNN topo files, the lower one is the ```train``` model generated the new topo files. So as we can see, the second topo files is more **neat**, its in the ```src/hmm-topology.cc``` which is called ```chain TOPO```.  The essence in here is to speed up the tranning and decoding efficiency, since this is why we need a more neat ```TOPO``` structure.  In the ```chain TOPO``` structure, we only need 1 frame, but in the traditional structure, we need 3 frames, this enables us to do the ```frame subsampling```! <br><br>![The left is the traditional DNN topo and right is the Chain Topo](../images/image-20220918222517750.png)<br><br>But also, the ```chain TOPO``` also got a problem like ```over-fitting```. There are three ways to solve the overfitting problem:<br><br>1. xent_regularize: cross entropy regularization<br><br>2. Chain loss &amp; L2 norms<br><br>3. Use leaky HMM factor<br><br><br><br>```2. steps/align_fmllr_lats.sh```: This will generate the lattice ```lat_dir/lat.*.gz``` and alignment ```lat_dir/ali.*.gz```. <br><br>  ![image-20220918155552890](../images/image-20220918155552890.png)<br><br>Here is the previews of ```lat_dir/ali.*.gz```, it will show **each frames corresponds to each phone**, so it is the **frame -&gt; pdf/ phones**. This will be a core part of the **lattice!!!**. <br><br>![image-20220918160141339](../images/image-20220918160141339.png)<br><br>Here are the preview of the ```lattice```: Here, the ```0``` node can be the ```Node id1```, the ```1``` node can be ```Node id2```, the output will be the ```word id```, the cost can be the sum of ```AM score``` + ```LM score```, the ```transid 1-A``` means the word frame length is from 1~A. It can be a very informative ```alignment files```. The input is the ```transid 1-A```, output will be the ```word id```. <br><br>```3. steps/nnet3/chain/build_tree.sh```: The output will be a new ```tree_dir/tree```. Here is the preview of the decision tree:<br><br>![image-20220918160819553](../images/image-20220918160819553.png) <br><br><br><br><br><br>![image-20220918224419611](../images/image-20220918224419611.png)<br><br>Here is what ```TDNN-F``` looks like:<br><br>![image-20220918225055235](../images/image-20220918225055235.png)<br><br>The ```linear_opts``` is the core param of the ```TDNN-F```, if without this param it will only be the ``TDNN`` model without ```f```.  As shown from the code,. it will apply in the whole ```layer trainning```.<br><br>#### 1.6.3 Trainning<br><br>Here we got to the chain model trainning part. <br><br>![image-20220918230042243](../images/image-20220918230042243.png)<br><br>The train step is very similar to the most of the DNN trainnings, the difference is that it will generate the ```phone_lm``` and ```den(denominator).fst```.<br><br><br><br># 2. Language Model and Decoding: WFST &quot;The Big Four&quot; <br><br>![image-20220817214614445](../images/image-20220817214614445.png)<br><br>![image-20220918230913656](../images/image-20220918230913656.png)<br><br>From the last chapter we already knew ```HCLG.fst``` includes ```H.fst```, ```C.fst```, ```L.fst```, ```G.fs```.  Here is a tutorial doc from: https://nadirapovey.blogspot.com/2021/12/what-is-hclgfst.html to explain what is HCLG.<br><br>![image-20220918230610030](../images/image-20220918230610030.png)<br><br>Here are the flowchart: from ```acoustic characteristics ---&gt; phones ---&gt; words ---&gt; sentences```.<br><br>```H.fst``` enables us to input the acoustics characteritics and return the phone.<br><br><br><br>**L.fst enables us to input phones to word.**<br><br>How to get those four files can be the core idea of the kaldi ASR system. The ASR detection logic can be: ```acoustic features --&gt; H.fst --&gt; phones C.fst --&gt; L.fst + G.fst (linguistics) --&gt; words```.<br><br><br><br>## 2.1 H.fst (HMM States)<br><br>For H.fst, what we want is input the acoustic characteristics, output pdf/phones.<br><br>### 2.1.1 Make MFCC<br><br>After we run this script below, the Kaldi will automatically generate 7 files:<br><br>```Bash<br>steps/make_mfcc.sh --nj 1 --mfcc-config=/root/data/kaldi_file/<br></code></pre></td></tr></table></figure><ol><li>conf: default param</li><li>data: the MFCC output, just like feats.scp</li><li>feats.scp  </li><li>frame_shift</li><li>log：some log files generated</li><li>utt2dur</li><li>utt2num_frames</li></ol><h4 id="2-1-1-1-feats-scp"><a href="#2-1-1-1-feats-scp" class="headerlink" title="2.1.1.1 feats.scp"></a>2.1.1.1 feats.scp</h4><p>The format of it can be like:</p><p><em>AUDIO_FILE_ID    Location_Directory_of_the_MFCC_Generated_in_AWK</em></p><p>The significance of this file is to tell us where the MFCC will be stored. All the MFCC features will be stored at AWK formats. AWK is binary forms, because it will save the space. </p><p>This is the preview of 13th MFCC: </p><p>AUDIO_ID</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">54.32323</span> -<span class="hljs-number">12</span>.<span class="hljs-number">8887</span> -<span class="hljs-number">2.12212</span>  <span class="hljs-number">3</span>.<span class="hljs-number">2322</span> ... -<span class="hljs-number">2.323232</span>  #<span class="hljs-number">13</span>th features for each frame<br><br><span class="hljs-number">4.323323</span> -<span class="hljs-number">11</span>.<span class="hljs-number">5887</span> -<span class="hljs-number">3.12312</span>   <span class="hljs-number">8</span>.<span class="hljs-number">2422</span> ... -<span class="hljs-number">4.323239</span><br><br><span class="hljs-number">5.332324</span> -<span class="hljs-number">10</span>.<span class="hljs-number">8877</span> -<span class="hljs-number">6.442212</span>  <span class="hljs-number">3</span>.<span class="hljs-number">2322</span> ... -<span class="hljs-number">7.223132</span> ]<br></code></pre></td></tr></table></figure><h4 id="2-1-1-2-frame-shift"><a href="#2-1-1-2-frame-shift" class="headerlink" title="2.1.1.2 frame_shift"></a>2.1.1.2 frame_shift</h4><p>The frame shift is just a param told us the frame shift time, if it is 10ms, then it will print 0.01, since 10ms &#x3D; 0.01s.</p><h4 id="2-1-1-3-utt2dur"><a href="#2-1-1-3-utt2dur" class="headerlink" title="2.1.1.3 utt2dur"></a>2.1.1.3 utt2dur</h4><p>This will show us every audio files’ durations.</p><p><em>AUDIO_FILE_ID      #Durations (s)</em></p><h4 id="2-1-1-4-utt2num-frames"><a href="#2-1-1-4-utt2num-frames" class="headerlink" title="2.1.1.4 utt2num_frames"></a>2.1.1.4 utt2num_frames</h4><p>This will told us every audio files’ frame numbers. Since we already know frame_shift time is 0.01s. Which means for every frame it needs 0.01s.</p><p><em>AUDIO_FILE_ID      #Number of frames</em></p><h4 id="2-1-5-visualize-ark-file"><a href="#2-1-5-visualize-ark-file" class="headerlink" title="2.1.5 visualize ark file"></a>2.1.5 visualize ark file</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">copy-feats ark:cmvn_kaldi_file.ark ark, t:cmvn_feat.ark.txt<br></code></pre></td></tr></table></figure><p>Here is how we visualize the ark file into the txt. After that we can preview the cmvn_ark.txt file.</p><p><img src="/../images/image-20220818000941498.png" alt="image-20220818000941498"></p><h3 id="2-1-2-CMVN"><a href="#2-1-2-CMVN" class="headerlink" title="2.1.2 CMVN"></a>2.1.2 CMVN</h3><p>This operation is for solving one problem which is that we need to take into the different people’s diversities. Since we knew that for different people have different timbre. <code>CMVN</code> is for solving this problem.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egs/wsj/steps/compute_cmvn_stats.sh &lt;data_dir&gt;<br></code></pre></td></tr></table></figure><p>The following is where the <code>CMVN</code> tool belongs to. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steps/compute_cmvn_stats.sh ./kaldi_file<br></code></pre></td></tr></table></figure><p>Here we generated the <code>CMVN</code> in the kaldi_file directory. </p><p>After we visualized the <code>.ark</code> file from the kaidi_file directory to preview the <code>.txt</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy-feats ark:cmvn_kaldi_file.ark ark, t:cmvn_feat.ark.txt<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220918010545144.png" alt="image-20220918010545144"></p><p>We can know that for each frame, there have 13D MFCC params, so if we need to do CMVN, we need to caculate 2 params for each frame. So there will be every column has two params: average and variation. So there had 13 columns, so for each column we need 13*2 &#x3D; 26 CMVN params, which consists 13 averg and 13 var.</p><p>If we do not caring about the SPK, just focus on the audio content itslelf will be a big issue. Since as we know, we do need know the spk’s voice characteristics and this will affect our trainings,we need to take that bias into it. We will do “CMVN” here, this will be applied for prior distribution for male and female. The value between the “CMVN” is [0-1]. </p><h3 id="2-1-3-Generate-H-fst"><a href="#2-1-3-Generate-H-fst" class="headerlink" title="2.1.3 Generate H.fst"></a>2.1.3 Generate H.fst</h3><p> After we got <code>CMVN</code>, we already can generate the <code>H.fst</code> file. </p><h3 id="2-1-4-Check-Log"><a href="#2-1-4-Check-Log" class="headerlink" title="2.1.4 Check Log"></a>2.1.4 Check Log</h3><p><img src="/../images/image-20220818001112500.png" alt="image-20220818001112500"></p><h2 id="2-2-L-fst-Lexicon-x2F-Dictionary"><a href="#2-2-L-fst-Lexicon-x2F-Dictionary" class="headerlink" title="2.2 L.fst (Lexicon&#x2F;Dictionary)"></a>2.2 L.fst (Lexicon&#x2F;Dictionary)</h2><p>We input phones and output words. </p><p>Generate <code>run.sh &amp; get L.fst</code></p><p>The final step should be write a <code>run.sh</code> file to generate the <code>L.fst</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 1. generate the L.fst</span><br><br><span class="hljs-comment"># here we used prepare_lang.sh </span><br><span class="hljs-comment"># there are four params we input: </span><br><br><span class="hljs-comment">#1. the four files we prepared, fix_data_dir.sh ./local/dict</span><br><span class="hljs-comment">#   2. If there has the phones not in the dictionary, what it will be recognized as &#x27;SIL&#x27;</span><br><span class="hljs-comment">#   3. the temp files</span><br><span class="hljs-comment">#   4. F.fst</span><br><br><br>utils/prepare_lang.sh ./local/dict <span class="hljs-string">&#x27;SIL&#x27;</span> ./temp/01/ L/lang<br></code></pre></td></tr></table></figure><h3 id="Visualize-the-L-fst-file"><a href="#Visualize-the-L-fst-file" class="headerlink" title="Visualize the L.fst file"></a>Visualize the L.fst file</h3><p>we can print the .fst here to see the whole results.</p><img src="../images/image-20220817233710490.png" alt="image-20220817233710490" style="zoom:80%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst<br></code></pre></td></tr></table></figure><p>Or we can just check the first 20th results:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fstprint ../lang/L.fst | <span class="hljs-built_in">head</span> -n 20<br></code></pre></td></tr></table></figure><p>Save the log of the L.fst into L.txt.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst &gt; L.txt<br></code></pre></td></tr></table></figure><p>After we generated the L.fst, we can get the estimation from there. All the phones and words will get an ID. </p><p>  phone_ID   word_ID     input: phone    output: word    probabilities<br>    0           1        <eps>    <eps>     0.6878887788<br>    1           2        EY1_S        A           0.7987897897<br>  …..<br>Here are the .fst format: </p><p>We can use fstdraw to draw the decoding graph.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstdraw --isymbols=../lang/phones.txt --osymbols=../lang/words.txt ../lang/L.fst  &gt; L.dot<br></code></pre></td></tr></table></figure><p>We can firstly output a L.dot file then we can just draw it. So we can use .dot file to generate it into a jpg file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt wget install ghostscript<br>apt wget install graphviz<br>dot -Tjpg L.dot &gt; L.jpg<br></code></pre></td></tr></table></figure><h2 id="2-3-C-fst-（Context）"><a href="#2-3-C-fst-（Context）" class="headerlink" title="2.3. C.fst （Context）"></a>2.3. C.fst （Context）</h2><p>In here, means the phones can be affected by the phones next to it</p><p>Input phones and output phones.  Its optional in Kaldi when we make the <code>HCLG.fst</code>. </p><h2 id="2-4-G-fst-just-n-gram-get-lm-sh-Language-Model"><a href="#2-4-G-fst-just-n-gram-get-lm-sh-Language-Model" class="headerlink" title="2.4 G.fst : just n-gram  get_lm.sh (Language Model)"></a>2.4 G.fst : just n-gram  get_lm.sh (Language Model)</h2><p>we can download <code>srilm</code>. </p><p>Language model is very easy, we just need to prepare the corpus line by line and make sure cutted the sentences.</p><figure class="highlight plaintext"><figcaption><span>actually is ```G.fsa```, ```fsa``` is a very typical kind of fst, it is a kind of reciever, which inputs equals to output.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs G.fst```"><br><br>```Python<br># the name can be set as: text.lm<br><br>&#x27;&#x27;&#x27;<br><br>[word1, word2, word3, ..., wordn]<br>[&#x27;I, Love, Kaldi&#x27;]<br>[&#x27;Me, too&#x27;]<br>&#x27;&#x27;&#x27;<br><br></code></pre></td></tr></table></figure><p>Here we just introduce <code>UNIX</code> way to do it. We will use <code>awk</code>. </p><figure class="highlight plaintext"><figcaption><span>is very fast then python, if there is efficiency needs.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Awk```"><br>```Python<br># get the corpus input we need to process <br>file_name = &#x27;/root/data/.../...&#x27; <br><br># read the file<br>with open(file_name, &#x27;r&#x27;, encoding = &#x27;utf-8&#x27;) as file:<br>for item in file.readlines():<br>print(&quot; &quot;.join(item.strip(&quot;\n&quot;)strip().split(&quot; &quot;)[1:]))<br>pass<br>pass<br><br><br><br># we can just get [word1, word2, word3, ..., wordn]<br></code></pre></td></tr></table></figure><p>We will use the <code>AWK</code> to do the same thing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># here are the original idea</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;Me, too&#x27;]</span><br><span class="hljs-comment"># we can just firstly test it with print in awk</span><br>awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> text <span class="hljs-comment"># here &quot;text&quot; means the txt file you want to manipulate, her is $1 means we print the first colum. It will look like:</span><br><span class="hljs-comment"># AUDIOSPK1001</span><br><span class="hljs-comment"># AUDIOSPK1002</span><br><br><span class="hljs-comment"># If is $0, which means the whole. $2 means the second column. $4 is the fourth column.</span><br></code></pre></td></tr></table></figure><p>Here we need to get the column that except the first column.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash">awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text <span class="hljs-comment"># here the \t is just like \n,  we can delete it as well. the default diving symbol is &#x27; &#x27;, in here actually awk -F &#x27; &#x27;&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;\n&#x27;&#125;&#x27; text. NF is the last column, awk is based on column manipulations. </span><br><br>awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text<br><span class="hljs-comment"># we will get exactly the same output just like python, but much faster:</span><br><span class="hljs-comment"># word1, word2, word3, ..., wordn</span><br><span class="hljs-comment"># I, Love, Kaldi</span><br><span class="hljs-comment"># Me, too</span><br></code></pre></td></tr></table></figure><h3 id="2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model"><a href="#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model" class="headerlink" title="2.4.1 write get_lm.sh (we need to write aw shell script to run and get th lm(language model))"></a>2.4.1 write get_lm.sh (we need to write aw shell script to run and get th lm(language model))</h3><figure class="highlight plaintext"><figcaption><span>language model is statistical language model, more tranning data can be more "better" in some ways.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs n-gram```"><br>```Bash<br># You need firstly specify your corpus sources.<br>text = &quot;./text.lm&quot;<br># 1. get all the corpus<br># awk &#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;\n&#x27;&#125;&#x27; text &gt; xxx.lm<br># loop all the columns:<br>#NF here means the last column<br>#   printf just like C language, they are the same in some ways<br># 2. Deploy Trigram n-gram model<br>ngram-count -text text.lm -order 3 write train.part.txt.count  <br># OR we can use<br>ngram-count -text $text -order 3 write train.part.txt.count  <br># $text means the file itself, we already defined it at first.<br># -text: the corpus<br># wirte: write the file<br># here 3 means tri, which indicates triphone, and write into train.part.txt.count file.<br># here are the preview<br><br>#   word  pairs         times<br>#      I                  10<br>#    I  Love              5<br>#  I  Love Kaldi          1<br>#  Hello World &lt;/s&gt;       2<br>#  &lt;/s&gt; is great          1<br># &lt;/s&gt; means the starting or ending point, usually means something will begin or end from there.  <br><br># 3. From the 2nd step,  generateing the lm<br>ngram-count -read train.part.txt.count -order 3 -lm LM -interpole -kndiscount<br>#  -lm which means the generated Language Model, right now we call it LM<br># -interpole is the smoothing function, and kndiscount is the callback function.There are two possibilities, one is the original and other which is callback function.<br>#  \data\<br># ngram 1 = 2821      , here means there are 2821 1grams&#x27; pairs<br># ngram 2 = 6344<br># ngram 3 = 444<br># \1-grams:<br># -3.4234324     1       -0.034523532 this is also probabities but with log(), we call backoff method<br># -3.4234224     2       -0.032323532<br># -2.3234224     A       -0.023233532<br># \2-grams:<br># -3.2424432     I  Love          -0.232312332<br># \3-grams:<br># -4.3244343     I  Love Kaldi    -0.454554545<br><br></code></pre></td></tr></table></figure><h3 id="2-4-2-Generate-G-fst"><a href="#2-4-2-Generate-G-fst" class="headerlink" title="2.4.2 Generate G.fst"></a>2.4.2 Generate G.fst</h3><p>There has two ways to generate <code>G.fst</code>.</p><p>Way1: Just Call from the Kaldi shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">utils/format_lm_sri.sh data/lang /lm/LM /data/local/dict/lexicon.txt/data/lang_test<br></code></pre></td></tr></table></figure><p>Way2: using <code>arpa2fst</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=/data/lang/words.txt /lm/LM/G.fst</span><br></code></pre></td></tr></table></figure><h1 id="5-Decoder"><a href="#5-Decoder" class="headerlink" title="5. Decoder"></a>5. Decoder</h1><p>In Kaldi, we decode the <code>HCLG.fst</code>, <code>HCLG</code> is just a kind of fst graph, it will use the <code>Viterbi</code> to decode. That is the easiest way to decode the fst model. </p><h2 id="5-1-GMM-latgen-faster-Decoder"><a href="#5-1-GMM-latgen-faster-Decoder" class="headerlink" title="5.1 GMM-latgen-faster Decoder"></a>5.1 GMM-latgen-faster Decoder</h2><p>We can use the default decoder to decode the files. <code>GMM-latgen-faster</code> decoder can be thought as one type of <code>LatticeSimpleDecoder</code>.</p><p><img src="/../images/image-20220918230959696.png" alt="image-20220918230959696"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">decode decode.sh --nj 1 ./exp/mono/graph ./data/ ./exp/mono/decode<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># this is the basic params it need</span><br>steps/decode.sh [option] &lt;graph-dir&gt; &lt;data-dir&gt; &lt;decode-dir&gt;<br><span class="hljs-comment"># &lt;graph-dir&gt; is the HCLG.fst</span><br><span class="hljs-comment"># &lt;data-dir&gt; is the data files needed to be decode</span><br><span class="hljs-comment"># &lt;decode-dir&gt; is the results Kaldi ASR should output</span><br></code></pre></td></tr></table></figure><p>After the Kaldi did the decoding, it will calculate <code>WER</code> (1-ER) for us. </p><h2 id="5-2-Simple-Decoder"><a href="#5-2-Simple-Decoder" class="headerlink" title="5.2 Simple Decoder"></a>5.2 Simple Decoder</h2><figure class="highlight plaintext"><figcaption><span>Decoder```: If we would like to use the ```gmm-decode-simple```, we need to follow the following scripts:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs GMM-decode-simple"><br><br><br>```sh<br>model=&quot;.../final.mdl&quot;   # we need to specify the <br>hclg= &quot;.../HCLG.fst&quot;<br>feats= &quot;cmvn.scp&quot; # the acoustics fatures<br>out= &quot;.&quot; # the output file<br><br># we need to apply the cmvn into the acoustic features: feats.scp<br>apply-cmvn --utt2spk=ark:$&#123;feats&#125;/utt2spk scp:$&#123;feats&#125;/cmvn.scp scp:$&#123;feats&#125;/feats.scp ark, t:- |add-deltas ark:- ark:feats_cmvn_delta.ark<br><br>gmm-decode-simple $&#123;model&#125; $&#123;hclg&#125; ark:feats_cmvn_delta.ark ark,t:$&#123;out&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-Faster-Decoder"><a href="#5-3-Faster-Decoder" class="headerlink" title="5.3 Faster Decoder"></a>5.3 Faster Decoder</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">model=<span class="hljs-string">&quot;.../final.mdl&quot;</span>   <span class="hljs-comment"># we need to specify the </span><br>hclg= <span class="hljs-string">&quot;.../HCLG.fst&quot;</span><br>feats= <span class="hljs-string">&quot;cmvn.scp&quot;</span> <span class="hljs-comment"># the acoustics fatures</span><br>out= <span class="hljs-string">&quot;./result_faster&quot;</span> <span class="hljs-comment"># the output file</span><br><br><br><br>gmm-decode-faster <span class="hljs-variable">$&#123;model&#125;</span> <span class="hljs-variable">$&#123;hclg&#125;</span> ark:feats_cmvn_delta.ark ark,t:<span class="hljs-variable">$&#123;out&#125;</span><br></code></pre></td></tr></table></figure><p>We can make the fast decoder just this way.</p><h3 id="5-4-NN-Decoding"><a href="#5-4-NN-Decoding" class="headerlink" title="5.4 NN Decoding"></a>5.4 NN Decoding</h3><p><img src="/../images/image-20220918231119689.png" alt="image-20220918231119689"></p><h1 id="6-A-Very-Short-Demo"><a href="#6-A-Very-Short-Demo" class="headerlink" title="6. A Very Short Demo"></a>6. A Very Short Demo</h1><p>In this part we will download and train a complete kaldi ASR demo from installation to decoding. Since the installation of kaldi is too big and also there has a lot of submodules we do not really need. So in this case, we just do some file modifications, we just make a mini-version in order to better understand the kaldi workflow and study.</p><p>Here is a tutorial from Nadira Povey: <a href="https://nadirapovey.blogspot.com/2022/05/librispeech-training.html">https://nadirapovey.blogspot.com/2022/05/librispeech-training.html</a></p><p>Firstly, we need to download the kaldi demo from the git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/xiao11lam/kaldi_tutorials.git<br>cd kaldi_tutorials<br># change the write and read privilege<br>chmod -R 755  ./*<br></code></pre></td></tr></table></figure><p>Here is a <code>repo</code> only for the tutorial purposes, since we have manipulated some files from the original Kaldi in order to make the installation and training process more friendly.</p><p><strong>And remember before you start to make this demo, please make sure you already have the cuda installed!!!.</strong></p><p>We highly suggesting you use the kaldi installation shell scripts written from the <code>AssemblyAI</code> <a href="https://www.assemblyai.com/blog/kaldi-install-for-dummies/">https://www.assemblyai.com/blog/kaldi-install-for-dummies/</a></p><p>Please follow the instructions step by steps.</p><p><img src="/../images/image-20220817231038503.png" alt="image-20220817231038503"></p><h2 id="1-Set-the-Tools-Environment"><a href="#1-Set-the-Tools-Environment" class="headerlink" title="1. Set the Tools Environment"></a>1. Set the Tools Environment</h2><p>Check the CPU info, to find out how many processors your PC have.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grep <span class="hljs-string">&#x27;processor&#x27;</span> /proc/cpuinfo | <span class="hljs-built_in">sort</span> -u | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220731104820116.png" alt="image-20220731104820116"></p><p>Now I got <code>8</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /mnt/c/Users/ABC/Desktop/kaldi-cslt/tools<br>vim run.sh  <span class="hljs-comment"># check the env installation scripts</span><br>sh run.sh <span class="hljs-comment"># we can just run the scripts and let it automatically install</span><br></code></pre></td></tr></table></figure><p>Here are the preview of the <code>run.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># here you can spefify your CPU info</span><br>make -j 8<br><span class="hljs-comment"># install the IRSTLM</span><br>./extras/install_irstlm.sh<br><span class="hljs-comment"># The env.sh is not under tools/extras/. It is under tools/.So you need to change the environmental variable.</span><br><span class="hljs-built_in">source</span> env.sh<br><span class="hljs-comment"># install the openblas</span><br>./extras/install_openblas.sh<br></code></pre></td></tr></table></figure><h2 id="2-Set-the-Src-Environment"><a href="#2-Set-the-Src-Environment" class="headerlink" title="2. Set the Src Environment"></a>2. Set the Src Environment</h2><p>Here, we follow the same way to install these <code>src</code> environments.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /mnt/c/Users/ABC/Desktop/kaldi-cslt/src<br>vim run.sh  <span class="hljs-comment"># modify the run.sh file if you want (optional)</span><br>sh run.sh<br></code></pre></td></tr></table></figure><p>Here are the preview of the <code>run.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --static \<br>      --use-cuda=<span class="hljs-built_in">yes</span> --cudatk-dir=/usr/local/cuda \<br>      --mathlib=OPENBLAS --openblas-root=../tools/OpenBLAS/install \<br>      --static-math=<span class="hljs-built_in">yes</span> \<br>      --static-fst=<span class="hljs-built_in">yes</span> --fst-root=../tools/openfst<br><br>make depend -j 40<br><br>make -j 40<br></code></pre></td></tr></table></figure><h2 id="3-Prepare-for-the-Acoustic-Model-AM"><a href="#3-Prepare-for-the-Acoustic-Model-AM" class="headerlink" title="3. Prepare for the Acoustic Model (AM)"></a>3. Prepare for the Acoustic Model (AM)</h2><p>Finally, we will get into the <code>egs</code> dir to firstly train an acoustic model.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /kaldi_tutorials/egs/thchs30<br>vim run_am.sh<br>sh run_am.sh  <span class="hljs-comment"># start to train the AM</span><br></code></pre></td></tr></table></figure><p>Here we need to change the path into the our local database directory:</p><p><img src="/../images/image-20220731194754537.png" alt="image-20220731194754537"></p><p><img src="/../images/image-20220731211958212.png" alt="image-20220731211958212"></p><p>Here are the step to step code for <code>run_am.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Copyright 2016  Tsinghua University (Author: Dong Wang, Xuewei Zhang)</span><br><span class="hljs-comment">#           2018  Tsinghua University (Author: Zhiyuan Tang)</span><br><span class="hljs-comment">#           2019  Tsinghua University (Author: Wenqiang Du)</span><br><span class="hljs-comment">#           2022  Sirui Li Zixi Yan </span><br><span class="hljs-comment"># Apache 2.0.</span><br><br>. ./cmd.sh <span class="hljs-comment">## You&#x27;ll want to change cmd.sh to something that will work on your system.</span><br>           <span class="hljs-comment">## This relates to the queue.</span><br>. ./path.sh<br><br>n=10 <span class="hljs-comment"># parallel jobs</span><br>stage=-4<br><span class="hljs-built_in">set</span> -euo pipefail <span class="hljs-comment"># This command sets any pipeline command to stop if there is an error or an undefined method variable.</span><br><span class="hljs-comment"># at present, kaldi supports python 2</span><br>py_ver=`python -c <span class="hljs-string">&#x27;import sys; v, _, _, _, _= sys.version_info;  print(&quot;%d&quot; % v)&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$py_ver</span> -gt 2 ]; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Python version should be 2 (now <span class="hljs-variable">$py_ver</span>)&quot;</span>; <span class="hljs-built_in">exit</span> 1; <span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: basic preparation ######&#x27;</span><br><br><span class="hljs-comment"># corpus and trans directory</span><br>thchs=/work105/duwenqiang/data/ <span class="hljs-comment"># Data path, the path where the downloaded thchs data archive will be stored after decompression</span><br><br><br><span class="hljs-comment">#you can obtain the database by uncommting the following lines</span><br><span class="hljs-comment">#[ -d $thchs ] || mkdir -p $thchs  || exit 1</span><br><span class="hljs-comment">#echo &quot;downloading THCHS30 at $thchs ...&quot;</span><br><span class="hljs-comment">#local/download_and_untar.sh $thchs  http://www.openslr.org/resources/18 data_thchs30  || exit 1</span><br><span class="hljs-comment">#local/download_and_untar.sh $thchs  http://www.openslr.org/resources/18 resource      || exit 1</span><br><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 1 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">local</span>/thchs-30_data_prep.sh <span class="hljs-variable">$thchs</span>/data_thchs30 <span class="hljs-comment">#This is the code written for thchs30 data, can not be directly applied to other data, the scripts in the local folder are prepared for the current data, not applicable to other data</span><br><br>  <span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$thchs</span>/data_thchs30 data_thchs30 <span class="hljs-comment">#This is a soft link to call the language model in the folder later</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: language preparation ######&#x27;</span><br>  <span class="hljs-comment"># prepare lexicon.txt, extra_questions.txt, nonsilence_phones.txt, optional_silence.txt, silence_phones.txt</span><br>  <span class="hljs-comment"># build a large lexicon that invovles words in both the training and decoding, all in data/dict</span><br>  <span class="hljs-built_in">mkdir</span> -p data/dict; <br>  <span class="hljs-built_in">cp</span> <span class="hljs-variable">$thchs</span>/resource/dict/&#123;extra_questions.txt,nonsilence_phones.txt,optional_silence.txt,silence_phones.txt&#125; data/dict &amp;&amp; \<br>  <span class="hljs-built_in">cat</span> <span class="hljs-variable">$thchs</span>/resource/dict/lexicon.txt <span class="hljs-variable">$thchs</span>/data_thchs30/lm_word/lexicon.txt | \<br>  grep -v <span class="hljs-string">&#x27;&lt;s&gt;&#x27;</span> | grep -v <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span> | <span class="hljs-built_in">sort</span> -u &gt; data/dict/lexicon.txt<br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: language processing ######&#x27;</span><br>  <span class="hljs-comment"># generate language stuff used for training</span><br>  <span class="hljs-comment"># also lexicon to L_disambig.fst for graph making in local/thchs-30_decode.sh</span><br>  <span class="hljs-built_in">mkdir</span> -p data/lang;<br>  utils/prepare_lang.sh --position_dependent_phones <span class="hljs-literal">false</span> data/dict <span class="hljs-string">&quot;&lt;SPOKEN_NOISE&gt;&quot;</span> data/local/lang data/lang<br><br><span class="hljs-keyword">fi</span> <br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 2 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: feature extraction ######&#x27;</span><br>  <span class="hljs-comment"># produce MFCC and Fbank features in data/&#123;mfcc,fbank&#125;/&#123;train,test&#125;</span><br>  <span class="hljs-built_in">rm</span> -rf data/mfcc &amp;&amp; <span class="hljs-built_in">mkdir</span> -p data/mfcc &amp;&amp; <span class="hljs-built_in">cp</span> -r data/&#123;train,<span class="hljs-built_in">test</span>&#125; data/mfcc<br>  <span class="hljs-built_in">rm</span> -rf data/fbank &amp;&amp; <span class="hljs-built_in">mkdir</span> -p data/fbank &amp;&amp; <span class="hljs-built_in">cp</span> -r data/&#123;train,<span class="hljs-built_in">test</span>&#125; data/fbank<br>  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> train <span class="hljs-built_in">test</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># make mfcc and fbank</span><br>    steps/make_mfcc.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/<span class="hljs-variable">$x</span><br>    <span class="hljs-comment"># extract mfcc features --nj is how many threads to use to extract features, the number of threads should be less than the number of lines in spk2utt</span><br>    steps/make_fbank.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/fbank/<span class="hljs-variable">$x</span><br>    <span class="hljs-comment">#Extraction of fbank features</span><br>    <span class="hljs-comment"># compute cmvn</span><br>    steps/compute_cmvn_stats.sh data/mfcc/<span class="hljs-variable">$x</span> <span class="hljs-comment">#The mean and variance of mfcc features are done, and the mean-variance can improve the performance of the model to some extent.</span><br>    steps/compute_cmvn_stats.sh data/fbank/<span class="hljs-variable">$x</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 3 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: GMM-HMM training ######&#x27;</span><br>  <span class="hljs-comment"># monophone</span><br>  <span class="hljs-comment"># Train the monophonic model, this step will generate a model file of num.mdl under exp/mono/ when completed and link the final generated num.mdl to final.mdl.</span><br>  steps/train_mono.sh --boost-silence 1.25 --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/mono<br>  <span class="hljs-comment"># monophone ali</span><br>  steps/align_si.sh --boost-silence 1.25 --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/mono exp/mono_ali<br>  <br>  <span class="hljs-comment"># triphone</span><br>  <span class="hljs-comment">#Training the three-phoneme model.</span><br>  <span class="hljs-comment">#2000 10000 specify the number of states and Gaussians respectively</span><br>  <span class="hljs-comment">#input is data/mfcc/train data/lang exp/mono_ali, training data, lang files, alignment files</span><br>  <span class="hljs-comment">#output is stored in tri1, mainly mdl model files and some alignment files</span><br>  steps/train_deltas.sh --boost-silence 1.25 --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 2000 10000 data/mfcc/train data/lang exp/mono_ali exp/tri1<br>  <span class="hljs-comment"># triphone_ali</span><br>  <span class="hljs-comment">#Caculate the alignment info</span><br>  steps/align_si.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri1 exp/tri1_ali<br>  <br>  <span class="hljs-comment"># lda_mllt</span><br>  <span class="hljs-comment"># Input features are transformed with LDA+MLLT features and then trained with a three-phoneme model</span><br>  steps/train_lda_mllt.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> --splice-opts <span class="hljs-string">&quot;--left-context=3 --right-context=3&quot;</span> 2500 15000 data/mfcc/train data/lang exp/tri1_ali exp/tri2b<br>  <span class="hljs-comment"># lda_mllt_ali</span><br>  steps/align_si.sh  --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> --use-graphs <span class="hljs-literal">true</span> data/mfcc/train data/lang exp/tri2b exp/tri2b_ali<br>  <br>  <span class="hljs-comment"># sat</span><br>  <span class="hljs-comment"># Training speaker adaptation models using FMLLR (for speaker-specific feature transformation)</span><br>  steps/train_sat.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 2500 15000 data/mfcc/train data/lang exp/tri2b_ali exp/tri3b<br>  <span class="hljs-comment"># sat_ali</span><br>  steps/align_fmllr.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri3b exp/tri3b_ali<br>  <br>  <span class="hljs-comment"># quick</span><br>  steps/train_quick.sh --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> 4200 40000 data/mfcc/train data/lang exp/tri3b_ali exp/tri4b<br>  <span class="hljs-comment"># quick_ali</span><br>  steps/align_fmllr.sh --nj <span class="hljs-variable">$n</span> --cmd <span class="hljs-string">&quot;<span class="hljs-variable">$train_cmd</span>&quot;</span> data/mfcc/train data/lang exp/tri4b exp/tri4b_ali<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$stage</span> -le 4 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;###### Bookmark: TDNN-F Chain Training ######&#x27;</span><br>  <span class="hljs-built_in">local</span>/chain/run_tdnn-f_common_skip.sh \<br>    --mfcc-dir data/mfcc/train --fbank-dir data/fbank/train \<br>    --gmm-dir exp/tri4b --ali-dir exp/tri4b_ali <br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h2 id="4-Prepare-for-the-Language-Model-LM"><a href="#4-Prepare-for-the-Language-Model-LM" class="headerlink" title="4. Prepare for the Language Model (LM)"></a>4. Prepare for the Language Model (LM)</h2><p>This is the <code>run_lm.sh</code> file. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">dir</span>=exp/lm <br>lm_dir=  <span class="hljs-comment"># the dir to store the LM</span><br>gmm_mdl_dir=exp/tri4b <span class="hljs-comment"># the place to store the gmm</span><br>nn_mdl_dir=exp/chain-skip/tdnn-f-cn <span class="hljs-comment"># the chain model dir</span><br><br><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$dir</span><br><span class="hljs-comment"># compress the language model from the open resource data_thchs30</span><br>tar czvf <span class="hljs-variable">$dir</span>/corpus.lm_e-7.tar.gz  data_thchs30/lm_word/word.3gram.lm<br><span class="hljs-comment"># transform the language model into G.fst</span><br>./utils/format_lm.sh  data/lang <span class="hljs-variable">$dir</span>/corpus.lm_e-7.tar.gz  data/lang <span class="hljs-variable">$dir</span>/lang_test<br><span class="hljs-comment"># make the GMM acoustic model&#x27;s lang files to compose with the G.fst into HCLG.fst</span><br>./utils/mkgraph.sh   <span class="hljs-variable">$dir</span>/lang_test <span class="hljs-variable">$gmm_mdl_dir</span>  <span class="hljs-variable">$gmm_mdl_dir</span>/graph<br><span class="hljs-comment"># compose the chain model, lang files, and G.fst into the HCLG.fst</span><br>./utils/mkgraph.sh  --self-loop-scale 1.0 <span class="hljs-variable">$dir</span>/lang_test <span class="hljs-variable">$nn_mdl_dir</span>  <span class="hljs-variable">$nn_mdl_dir</span>/graph<br></code></pre></td></tr></table></figure><h2 id="5-Decode"><a href="#5-Decode" class="headerlink" title="5. Decode"></a>5. Decode</h2><p>We will use the <code>./decode_chain.sh</code>, it will print the <code>WER</code>. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>. ./path.sh<br>. ./cmd.sh<br>exp_dir=exp/chain-skip/tdnn-f-cn <span class="hljs-comment"># the AM and the storage path</span><br>beam=13 <span class="hljs-comment"># the threshold of the beam search, the bigger the beam the seach time will be longer and vice versa</span><br>stage=-3<br><span class="hljs-keyword">for</span> data_set <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>  ;<span class="hljs-keyword">do</span> <span class="hljs-comment"># test corpus</span><br>      steps/nnet3/decode.sh \<br>      --nj 8 --acwt 1.0 --post-decode-acwt 10.0 \ <span class="hljs-comment"># the decoding params</span><br>      --cmd <span class="hljs-string">&quot;run.pl&quot;</span> --iter final \ <span class="hljs-comment"># use final.mdl to decode</span><br>      --stage <span class="hljs-variable">$stage</span> \<br>      <span class="hljs-variable">$exp_dir</span>/graph  data/fbank/<span class="hljs-variable">$data_set</span> <span class="hljs-variable">$exp_dir</span>/decode_graph_final<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">cat</span> <span class="hljs-variable">$exp_dir</span>/decode_graph_final/scoring_kaldi/best_wer <span class="hljs-comment"># check the decoding results</span><br><br><span class="hljs-comment">#result: %WER 21.75 [ 17647 / 81139, 149 ins, 664 del, 16834 sub ] exp/chain-skip/tdnn-f-cn/decode_graph_final/wer_10_0.0</span><br></code></pre></td></tr></table></figure><h1 id="7-Kaldi-Vad"><a href="#7-Kaldi-Vad" class="headerlink" title="7. Kaldi Vad"></a>7. Kaldi Vad</h1><h2 id="compute-vad-decision-sh"><a href="#compute-vad-decision-sh" class="headerlink" title="compute_vad_decision.sh"></a>compute_vad_decision.sh</h2><p>We can find the <code>compute_vad_decision.sh</code> in <code>kaldi-egs/wsj/s5/steps/compute_vad_decision.sh</code>.</p><h1 id="8-Some-Useful-Tools-in-Kaldi"><a href="#8-Some-Useful-Tools-in-Kaldi" class="headerlink" title="8. Some Useful Tools in Kaldi"></a>8. Some Useful Tools in Kaldi</h1><h2 id="8-1-utils-x2F-run-pl"><a href="#8-1-utils-x2F-run-pl" class="headerlink" title="8.1 utils&#x2F;run.pl"></a>8.1 utils&#x2F;run.pl</h2><p>This will help the Kaldi run the system in multiple processing units，which makes the kaldi training more fast. We will discuss the <code>nj</code> later, since we will know <code>num_jobs</code>.</p><p>There is a very important tips here is that:</p><p>the <code>nj</code> value should smaller than the corpus speaker’s number. If there are 20 speakers in your corpus, you cannot set that number higher than that. If not follow this rule, it will send the errors.</p><h2 id="8-2-split-data-sh"><a href="#8-2-split-data-sh" class="headerlink" title="8.2 split_data.sh"></a>8.2 split_data.sh</h2><p>It will cut the data directories. </p><h1 id="9-Some-Useful-Links"><a href="#9-Some-Useful-Links" class="headerlink" title="9. Some Useful Links"></a>9. Some Useful Links</h1><p><a href="https://www.eleanorchodroff.com/tutorial/kaldi/training-acoustic-models.html">https://www.eleanorchodroff.com/tutorial/kaldi/training-acoustic-models.html</a></p><p><a href="https://faculty.sbs.arizona.edu/hammond/ling578-sp20/">https://faculty.sbs.arizona.edu/hammond/ling578-sp20/</a></p><p><a href="https://shichaog1.gitbooks.io/hand-book-of-speech-enhancement-and-recognition/content/">https://shichaog1.gitbooks.io/hand-book-of-speech-enhancement-and-recognition/content/</a></p><p><a href="https://desh2608.github.io/2020-05-18-using-librispeech/">https://desh2608.github.io/2020-05-18-using-librispeech/</a></p><p><a href="http://jrmeyer.github.io/asr/2016/01/26/Installing-Kaldi.html">http://jrmeyer.github.io/asr/2016/01/26/Installing-Kaldi.html</a></p><p>Understanding kaldi recipes with mini-librispeech example: <a href="https://medium.com/@qianhwan/understanding-kaldi-recipes-with-mini-librispeech-example-part-1-hmm-models-472a7f4a0488">https://medium.com/@qianhwan/understanding-kaldi-recipes-with-mini-librispeech-example-part-1-hmm-models-472a7f4a0488</a></p><p><a href="https://www.assemblyai.com/blog/kaldi-speech-recognition-for-beginners-a-simple-tutorial/">https://www.assemblyai.com/blog/kaldi-speech-recognition-for-beginners-a-simple-tutorial/</a></p><p><a href="http://pelhans.com/2018/01/18/kaldi-note1/">http://pelhans.com/2018/01/18/kaldi-note1/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Speech Recognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell and Vim on Speech and Language Processing</title>
    <link href="/2022/07/11/Shell-and-Vim-on-Speech-and-Language-Processing/"/>
    <url>/2022/07/11/Shell-and-Vim-on-Speech-and-Language-Processing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="UNIX-Shell-Cmds"><a href="#UNIX-Shell-Cmds" class="headerlink" title="UNIX Shell Cmds"></a>UNIX Shell Cmds</h1><table><thead><tr><th align="left"><strong>Basic operations</strong></th><th align="left"></th></tr></thead><tbody><tr><td align="left">… … , … , ~ … for parent directory . . means current directory, ~ means home</td><td align="left"></td></tr><tr><td align="left">. &#x3D; ls, ls is the list, which shows the names of the files in the directory.</td><td align="left"></td></tr><tr><td align="left">ls ~</td><td align="left">means the list of home directory</td></tr><tr><td align="left">ls -l</td><td align="left">show all the subfolders under this folder in detail</td></tr><tr><td align="left">ls -l</td><td align="left">is similar to ls -l</td></tr><tr><td align="left">ls -l Documents&#x2F;*.pdf</td><td align="left">prints out all the pdf files in the Documents directory</td></tr><tr><td align="left">ls -al</td><td align="left">show details of the files in no directory (dash: files, f: folders, you can put files</td></tr><tr><td align="left">pwd</td><td align="left">print working directory prints the address of the directory you are in at the moment</td></tr><tr><td align="left">cd , cd . &#x2F;, cd ~</td><td align="left">first directory</td></tr><tr><td align="left">cd &#x2F;… &#x2F;… &#x2F;… &#x2F;…</td><td align="left">cd is a change directory, which goes to a particular file address</td></tr><tr><td align="left">cd &#x2F;… &#x2F;… &#x2F;… &#x2F;; ls</td><td align="left">goes to a file address and then displays all file names</td></tr><tr><td align="left">ls -</td><td align="left">returns to the previous directory</td></tr><tr><td align="left">cd …</td><td align="left">go to the previous directory</td></tr><tr><td align="left">cd … &#x2F;… &#x2F;… &#x2F;… &#x2F;…</td><td align="left">exit back to the original n parent directory</td></tr><tr><td align="left">q</td><td align="left">quit</td></tr><tr><td align="left">clear</td><td align="left">clear code</td></tr><tr><td align="left">← →</td><td align="left">Toggle code back and forth, so you can easily use repetitive code multiple times.</td></tr><tr><td align="left">history</td><td align="left">View history, even after shutting down the machine.</td></tr><tr><td align="left">echo</td><td align="left">Print like other languages’ PRINT operations</td></tr><tr><td align="left">wc -l fish</td><td align="left">count the number of lines in the file that have fish in them</td></tr><tr><td align="left">wc -c fish</td><td align="left">count the number of files with fish in them</td></tr><tr><td align="left"><strong>File Operations</strong></td><td align="left"></td></tr><tr><td align="left">touch A</td><td align="left">create new file name A</td></tr><tr><td align="left">ls -l A</td><td align="left">View file A details</td></tr><tr><td align="left">mv A B</td><td align="left">change the name of A to B</td></tr><tr><td align="left">mv ‘…&#x2F;A.txt’ Documents&#x2F;Books</td><td align="left">Move the A text file from somewhere to the Books folder under Documents</td></tr><tr><td align="left">mv ‘…&#x2F;*txt’ Documents&#x2F;Books</td><td align="left">move all text files from a location to the Books folder under Documents</td></tr><tr><td align="left">rm B</td><td align="left">Delete file B directly without trash, this is permanently deleted</td></tr><tr><td align="left">rm -i B</td><td align="left">Ask before deleting B (recommended)</td></tr><tr><td align="left">cat A.txt</td><td align="left">concatenate&#x2F;catenate (concatenate, make continuous) means you can run some files at the same time, here it will run and print out the txt file</td></tr><tr><td align="left">more A.txt</td><td align="left">print out the contents of the A text file completely, and then type “&#x2F;filename” to find the file you are looking for</td></tr><tr><td align="left">less A.txt</td><td align="left">You can use the up and down arrows to navigate through the printed text or space to go up and down</td></tr><tr><td align="left">source .bash_aliases</td><td align="left">Run this bash_aliases file</td></tr><tr><td align="left">nano A.txt</td><td align="left">you can enter the edit mode of the document A, you can use Ctrl + S to save the modified file after the change</td></tr><tr><td align="left">find &#x2F; -name “A”</td><td align="left">search for the file with the name “A”</td></tr><tr><td align="left">find &#x2F; -name “A” 2&gt;&#x2F;dev&#x2F;null</td><td align="left">Search for files with the file name “A” and only view the results as valid</td></tr><tr><td align="left">grep E</td><td align="left">find document E (recommended)</td></tr><tr><td align="left">grep E &#x2F;A&#x2F;B&#x2F;C</td><td align="left">Regularize search for document E in the specified location</td></tr><tr><td align="left">grep $USER</td><td align="left">anchor the end of a line e.g. ‘grep$’ matches all lines ending with user</td></tr><tr><td align="left"><strong>folder operations</strong></td><td align="left"></td></tr><tr><td align="left">mkdir A</td><td align="left">create new folder A</td></tr><tr><td align="left">mkdir A&#x2F;C</td><td align="left">create subfolder C of folder A</td></tr><tr><td align="left">mv A B</td><td align="left">rename folder A to B</td></tr><tr><td align="left">rmdir B</td><td align="left">If folder B is empty, you can remove it directly, it will be deleted directly without trash (not recommended)</td></tr><tr><td align="left">rm -ir B</td><td align="left">Delete the files in the folder one after another (recommended)</td></tr><tr><td align="left"><strong>network operations</strong></td><td align="left"></td></tr><tr><td align="left">curl ‘<a href="(http://xiaos.site">(http://xiaos.site</a>‘</td><td align="left">c url &#x3D; see url, will download the resource code of the web page (doesn’t work often)</td></tr><tr><td align="left">curl -L ‘<a href="http://xiaos.site/">http://xiaos.site</a>‘</td><td align="left">follow redirect, will download the resource code of the web page (recommended)</td></tr><tr><td align="left">curl -o robertzhangxiao.html-L ‘<a href="(http://xiaos.site">(http://xiaos.site</a>‘</td><td align="left">will directly download the html file from this site and save it</td></tr><tr><td align="left">curl -L ‘<a href="(http://xiaos.site">(http://xiaos.site</a>‘ in the vertical line grep fish</td><td align="left">look in the downloaded file</td></tr><tr><td align="left"><strong>variables</strong></td><td align="left"></td></tr><tr><td align="left">numbers&#x3D;’XXX’</td><td align="left">define variables without spaces in the equal sign</td></tr><tr><td align="left">echo $numbers</td><td align="left">Output variables</td></tr><tr><td align="left">echo $LINES x $COLUMNS</td><td align="left">output the row variable</td></tr><tr><td align="left">echo $PATH</td><td align="left">output path environment variable, here is to output the pragram address</td></tr><tr><td align="left"><strong>Shell Scripts</strong></td><td align="left">file followed by sh</td></tr><tr><td align="left">bin</td><td align="left">is the binary</td></tr><tr><td align="left">ls bin</td><td align="left">all binary files, assuming it will output magic</td></tr><tr><td align="left">bin&#x2F;magic</td><td align="left">run this binary file called magic</td></tr><tr><td align="left">PATH&#x3D;$PATH:&#x2F;Users&#x2F;student&#x2F;bin</td><td align="left">You can do the same if you type magic</td></tr><tr><td align="left">Note: Not all sh files can be run on linux systems, but not on macs and win.</td><td align="left"></td></tr><tr><td align="left"><strong>console</strong></td><td align="left"></td></tr><tr><td align="left">type PS1&#x3D;’$’</td><td align="left">will remove the header name</td></tr><tr><td align="left">aliases ll&#x3D;’ls -la’</td><td align="left">will make the long code shorter, and then just type ll</td></tr><tr><td align="left">aliases</td><td align="left">View all aliases variables</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>  -r S0252/S0252_mic/* ./S0150/S0150_mic/<br></code></pre></td></tr></table></figure><p>Copy all the data from the “S0252&#x2F;S0252_mic&#x2F;“ directory to “&#x2F;S0150&#x2F;S0150_mic&#x2F;“ directory. “-r” means copy directly without any warnings.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">head</span> ...txt<br></code></pre></td></tr></table></figure><p>Just check the first few lines of the text.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">wc</span> -l ...txt<br></code></pre></td></tr></table></figure><p>Check how many lines of the txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh<br></code></pre></td></tr></table></figure><p>Check the size of the directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -h --max-depth=1 /.<br></code></pre></td></tr></table></figure><p>Check all the directory size under the current directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span><br></code></pre></td></tr></table></figure><p>We can translate the upper case words in that file into lower case.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | grep -o <span class="hljs-string">&quot;[a-z]&quot;</span><br></code></pre></td></tr></table></figure><p>Print the document letter by letter.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br>d<br>c<br><span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>Print the document letter by letter and sort them.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><br>c<br>d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c <br></code></pre></td></tr></table></figure><p>Print how many each letter occur.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span>a<br><span class="hljs-symbol">125 </span> b<br><span class="hljs-symbol">31 </span> c<br><span class="hljs-symbol">22 </span> d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr  <span class="hljs-comment">### here the &quot;r&quot; in &quot;nr&quot; means reverse the sorting, means from the up to the bottom and vice versa.</span><br></code></pre></td></tr></table></figure><p>Print how many each letter occur by the frequency.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">125 </span> b<br><span class="hljs-symbol">100 </span>a<br><span class="hljs-symbol">22 </span> d<br><span class="hljs-symbol">31 </span> c<br></code></pre></td></tr></table></figure><p><strong>Using Egrep to read the column:</strong></p><p>There is a .lab speech file, which is labbeled as well:</p><p>Here the first column is the timming, second is the frequency, and the third is the labelled data.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-number">0.1213</span> <span class="hljs-number">123</span> y<br><span class="hljs-number">0.1232</span> <span class="hljs-number">111</span> uw<br><span class="hljs-number">0.2113</span> <span class="hljs-number">110</span> eh<br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br></code></pre></td></tr></table></figure><p>So we now need to read all the third column information, we use egrep:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egrep -h -o <span class="hljs-string">&quot;[a-z]&#123;1,2&#125;$&quot;</span> *.lab  <span class="hljs-comment">### we are looking for the lower case letters, $ means that they are happened at the end of the line</span><br><br></code></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">y</span><br><span class="hljs-attribute">uw</span><br><span class="hljs-attribute">eh</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egrep -h -o <span class="hljs-string">&quot;[a-z]&#123;1,2&#125;$&quot;</span> *.lab | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr <br></code></pre></td></tr></table></figure><p>This will print the each phone frequency in reverse order:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">121 </span>y<br><span class="hljs-symbol">120 </span>uw<br><span class="hljs-symbol">110 </span>eh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">ls</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p><strong>Check how many files in one directory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ./<br></code></pre></td></tr></table></figure><p><strong>Delete the current directory.</strong>  No warrning will occur.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt<br></code></pre></td></tr></table></figure><p>Print all the .txt files in that directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt &gt; ./text<br></code></pre></td></tr></table></figure><p>Print all the .txt file’s content in that text file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">python3 ./.../..py &gt; ./text<br></code></pre></td></tr></table></figure><p>print the .py running results on text file.</p><p>file .wav :<br>Check the identity of the wav file size</p><p>Use mv to change the file name:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> ./../../.py ./../../.py<br></code></pre></td></tr></table></figure><p>We can use remove to change the file’s name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> ...<br></code></pre></td></tr></table></figure><p><strong>Check where … is, the location of …</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ll -lh<br></code></pre></td></tr></table></figure><p><strong>check all the files’ size</strong></p><p>If there has a space in the beginning of the file’s name, we just need to delete it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s|^ ||&#x27;</span><br></code></pre></td></tr></table></figure><p>Adding a “_” in the middle of the file name:<br>eg. SPKID 09912 into SPKID_09912, g means globally.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s| |_|g&#x27;</span><br></code></pre></td></tr></table></figure><p>Or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s|SPKID|SPKID_|&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>align two files:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">paste</span> -d <span class="hljs-string">&#x27; &#x27;</span> wav.scp wav_id &gt; tmp.txt <br></code></pre></td></tr></table></figure><p>Delete each lines’ particular words by grep:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip freeze | grep -v <span class="hljs-string">&quot;@ the things you want to remove&quot;</span> &gt; requirements.txt<br></code></pre></td></tr></table></figure><p>If we want to have a better shell scripting way like preparing those files, we can just do:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p data/voxceleb1_train<br><br><span class="hljs-comment"># get all the .wav file path, eg. /data/voxceleb1/dev/id1231/...wav</span><br>find /data/voxceleb1/dev -name *.wav &gt; data/voxceleb1_train/temp.lst<br><br><span class="hljs-comment"># generate the wav.scp, eg. id1231 data/voxceleb1/dev/id1231/...wav</span><br><span class="hljs-comment"># 1st. using split to cut &quot;a&quot; text with &quot;/&quot;</span><br><span class="hljs-comment"># 2st. cut the a[8] value with &quot;.&quot; and save into the &quot;b&quot; </span><br>awk <span class="hljs-string">&#x27;&#123;split($0, a, &quot;/&quot;); &#123;split(a[8], b,&quot;.&quot;)&#125;; print a[6]&quot;-&quot;a[7]&quot;-&quot;b[1], $1&#125;&#x27;</span> data/voxceleb1_train/temp.list &gt; data/voxceleb1_train/wav.scp<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. Delete <span class="hljs-string">&quot;.wav&quot;</span> into <span class="hljs-string">&quot; &quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.</span> <br>sed &#x27;s/\.wav//g&#x27; /data/the_text_we_need_to_handle.txt | awk &#x27;&#123;if($1 = &quot;1&quot;)&#123;print $2&#125;esle&#123;print $2, $3&#125;&#125;&#x27; &gt; processed.txt<br></code></pre></td></tr></table></figure><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim:"></a>Vim:</h1><p>To the top: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GG<br></code></pre></td></tr></table></figure><p>To the bottom:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">gg<br></code></pre></td></tr></table></figure><p>vim name+tab : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto-type the name <br></code></pre></td></tr></table></figure><p>auto sort: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>check how many lines:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> number<br></code></pre></td></tr></table></figure><p>delete one line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure><p>search the “keyword”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/<span class="hljs-string">&quot;keyword&quot;</span><br></code></pre></td></tr></table></figure><p>check the difference between two different files:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vimdiff A.txt B.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Speech and Language Processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/06/06/Git%20Tutorials/"/>
    <url>/2022/06/06/Git%20Tutorials/</url>
    
    <content type="html"><![CDATA[<h1 id="Deploy-Key-Generation"><a href="#Deploy-Key-Generation" class="headerlink" title="Deploy Key Generation"></a>Deploy Key Generation</h1><h2 id="List-all-the-ssh-file"><a href="#List-all-the-ssh-file" class="headerlink" title="List all the ssh file"></a>List all the ssh file</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure><h2 id="Regenerate-a-deploy-key"><a href="#Regenerate-a-deploy-key" class="headerlink" title="Regenerate a deploy key"></a>Regenerate a deploy key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;the_name_of_the_deploy_key&quot;</span><br></code></pre></td></tr></table></figure><p>We can just create a key which name is “the_name_of_the_deploy_key”, if there was an error from the github says there were two duplicated keys we used.ss</p><h2 id="View-the-deploy-key"><a href="#View-the-deploy-key" class="headerlink" title="View the deploy key"></a>View the deploy key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vim ~.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>So after we viewed the key, we can just copy and paste into the Github.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> http://username:password@247.58.7.177/xxx/xxx.git <br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/10054318/how-do-i-provide-a-username-and-password-when-running-git-clone-gitremote-git">https://stackoverflow.com/questions/10054318/how-do-i-provide-a-username-and-password-when-running-git-clone-gitremote-git</a></p><h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><p>Here we can only clone just one single branch </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone -b &lt;the_name_of_the_branch&gt; --single-branch https://github.com/...git<br></code></pre></td></tr></table></figure><p>Check how many branches</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git brach<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -a<br></code></pre></td></tr></table></figure><p>Create a new branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -c &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><p>Enable that branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git workout &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><h1 id="Read-the-variable-path"><a href="#Read-the-variable-path" class="headerlink" title="Read the variable path"></a>Read the variable path</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.bashrc<br></code></pre></td></tr></table></figure><h1 id="Check-the-git-x2F-config"><a href="#Check-the-git-x2F-config" class="headerlink" title="Check the .git&#x2F;config"></a>Check the .git&#x2F;config</h1><p><img src="/../images/image-20220805200842425.png" alt="image-20220805200842425"></p><p>Inside the terminal and click it to enter the git config files, so we can modify the information there.</p><p><img src="/../images/image-20220805200956551.png" alt="image-20220805200956551"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Audio and Speech Application Development</title>
    <link href="/2022/03/30/Audio-and-Speech-Application-Development/"/>
    <url>/2022/03/30/Audio-and-Speech-Application-Development/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Web-Dev"><a href="#Web-Dev" class="headerlink" title="Web Dev"></a>Web Dev</h1><p>There are serveral frameworks that are in my suggestion lists, such as: </p><h3 id="BeaqleJS"><a href="#BeaqleJS" class="headerlink" title="BeaqleJS"></a>BeaqleJS</h3><p>BeaqleJS: HTML5 and JavaScript based<br>Framework for the Subjective Evaluation of<br>Audio Quality: <a href="https://github.com/HSU-ANT/beaqlejs">https://github.com/HSU-ANT/beaqlejs</a></p><h3 id="wavesurfer-js"><a href="#wavesurfer-js" class="headerlink" title="wavesurfer.js"></a>wavesurfer.js</h3><p><a href="https://wavesurfer-js.org/">https://wavesurfer-js.org/</a></p><h1 id="Audio-Swiss-Knife-–-Sox"><a href="#Audio-Swiss-Knife-–-Sox" class="headerlink" title="Audio Swiss Knife – Sox"></a>Audio Swiss Knife – Sox</h1><h2 id="Install-SOX"><a href="#Install-SOX" class="headerlink" title="Install SOX"></a>Install SOX</h2><p>We can download the SOX by <code>wget</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://sourceforge.net/projects/sox/files/sox/14.4.2/sox-14.4.2.tar.gz/<br></code></pre></td></tr></table></figure><p>After we unizip the file,  we can just run by:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># unzip the file</span><br>tar -xzvf sox-14.4.2.tar.gz <br><br><span class="hljs-comment"># we can get a sox-14.4.2 and get into that folder </span><br><span class="hljs-built_in">cd</span> sox-14.4.2<br><span class="hljs-comment"># we need to compile the downloaded files</span><br>./config<br>make<br>make install<br></code></pre></td></tr></table></figure><p>Or we can just use this cmd in Ubuntu Linux :</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install sox<br></code></pre></td></tr></table></figure><h2 id="SOX-Commands"><a href="#SOX-Commands" class="headerlink" title="SOX Commands"></a>SOX Commands</h2><h3 id="Check-the-audio-info"><a href="#Check-the-audio-info" class="headerlink" title="Check the audio info"></a>Check the audio info</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">soxi</span></span> ...wav<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20220821052902080.png" alt="image-20220821052902080"></p><p>Cheatsheet here: <a href="https://gist.github.com/ideoforms/d64143e2bad16b18de6e97b91de494fd">https://gist.github.com/ideoforms/d64143e2bad16b18de6e97b91de494fd</a></p><h3 id="Change-the-audio-type"><a href="#Change-the-audio-type" class="headerlink" title="Change the audio type"></a>Change the audio type</h3><p>We will use the example like from <code>raw</code> file into the <code>wav</code> file.</p><p><img src="/../images/image-20220901155527822.png" alt="image-20220901155527822"></p><p>Or just convert the <code>wav</code> file into <code>FLAC</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sox input.wav output.flac<br></code></pre></td></tr></table></figure><h3 id="Remix"><a href="#Remix" class="headerlink" title="Remix"></a>Remix</h3><p>We can use <code>remix</code> to convert the audio left and right channel.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">sox input.wav output.wav remix 2 1<br><span class="hljs-comment"># 2 means the 2th channel, or right channel</span><br><span class="hljs-comment"># 1 means the 1th channel, or left channel</span><br><span class="hljs-comment"># now we exchange the left and right channel</span><br><br></code></pre></td></tr></table></figure><h3 id="Re-sample"><a href="#Re-sample" class="headerlink" title="Re-sample"></a>Re-sample</h3><p>We can just downsample an audio to 8KHz to simulate:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sox input.wav -r 8000 output.wav<br></code></pre></td></tr></table></figure><h3 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h3><p>We can recall the help function by simply type:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">man sox<br>sox -<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h1 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h1><p>If there had some audio formats that did not supported on the sox, like <code>mp4</code>.</p><p>We can just use the <code>FFmpeg</code>, we need to download it by <code> sudo apt install ffmpeg</code>  on ubuntu linux. </p><h3 id="Convert-the-mp4-file-to-wav"><a href="#Convert-the-mp4-file-to-wav" class="headerlink" title="Convert the mp4 file to wav"></a>Convert the mp4 file to wav</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -i input.mp4 output.wav<br></code></pre></td></tr></table></figure><h1 id="Flac"><a href="#Flac" class="headerlink" title="Flac"></a>Flac</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Audio and Speech Processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wenet ASR Toolkit Tutorials From Training to Deployment</title>
    <link href="/2022/03/02/Wenet-ASR-Toolkit-Tutorials-From-Training-to-Deployment/"/>
    <url>/2022/03/02/Wenet-ASR-Toolkit-Tutorials-From-Training-to-Deployment/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20220730230852670.png" alt="image-20220730230852670"></p><h1 id="1-Use-Wenet-to-train-the-ASR-E2E-Model"><a href="#1-Use-Wenet-to-train-the-ASR-E2E-Model" class="headerlink" title="1. Use Wenet to train the ASR E2E Model"></a>1. Use Wenet to train the ASR E2E Model</h1><h2 id="1-1-Pre-trained-Model"><a href="#1-1-Pre-trained-Model" class="headerlink" title="1.1 Pre-trained Model"></a>1.1 Pre-trained Model</h2><p>We can Download the pre-compiled runtime wenet mode from the wenet github, since they already shared the pre-trained runtime model <a href="https://github.com/wenet-e2e/wenet/actions/runs/2175816175">https://github.com/wenet-e2e/wenet/actions/runs/2175816175</a> their, so we can just use it instead of compile for ourselves.</p><p>Wenet supports the <code>.zip</code> model to decode the ASR outputs. If you do not need to train your model yourself, then you can try this step. </p><p><img src="/../images/image-20220730003510616-16591147216542.png" alt="image-20220730003510616"></p><h2 id="1-2-Self-trained-Model"><a href="#1-2-Self-trained-Model" class="headerlink" title="1.2 Self-trained Model"></a>1.2 Self-trained Model</h2><p>If you want to train your model, you can try to run an example project just like kaldi <code>wsj</code> examples. In Wenet, since it was created mostly for Chinese ASR tasks, so we will use a Chinese corpus to be the example. But Wenet still supports other languages like English, so if you still want to do it, it should be without any concern. </p><p>In all, this is just an example we can refer, the goal is to know how wenet train the ASR we want.</p><p>Here is the offical website for the trainning purposes, <a href="https://wenet.org.cn/wenet/tutorial_aishell.html">https://wenet.org.cn/wenet/tutorial_aishell.html</a></p><p>Also, with the LibriSpeech one: <a href="https://wenet.org.cn/wenet/tutorial_librispeech.html">https://wenet.org.cn/wenet/tutorial_librispeech.html</a></p><h1 id="2-Optionally-Integrate-with-the-Language-Model-LM"><a href="#2-Optionally-Integrate-with-the-Language-Model-LM" class="headerlink" title="2. Optionally Integrate with the Language Model (LM)"></a>2. Optionally Integrate with the Language Model (LM)</h1><p>As we know, the wenet will output a <code>TLG.fst</code> decoding model, and then we can just use this model to integrate into the n-gram language model.</p><p>Since before we had the dictionary in tokens, but here we are dealing with the word level.</p><p>If we use the LM, in most cases the decoding time will be much longer, but also there will be a higher accurancy, but this is not compulsory!</p><h2 id="2-1-N-gram-LM-in-Wenet"><a href="#2-1-N-gram-LM-in-Wenet" class="headerlink" title="2.1 N-gram LM in Wenet"></a>2.1 N-gram LM in Wenet</h2><p>Wenet use the N-gram LM to help us to improve our CTC DNN model, since if we can add one more LM so we can have a more promissing WER during the decoding.</p><p>Compared with the DNN LM, the n-gram model is very easily to implement and light-weighted, which is much faster than the DNN decoding. And at the same time, the traditional n-gram model is not limited to the corpus size, we can even use a very small corpus to build this. Also compared with DNN, we can make our model more controllable, since DNN is very randomize. </p><p>In Wenet, we will import the WFST to do the decoding for the LM. </p><h3 id="TLG-fst"><a href="#TLG-fst" class="headerlink" title="TLG.fst"></a>TLG.fst</h3><p>Just like in Kaldi, we have the <code>HCLG.fst</code>, also in Wenet, we have the same strategy. </p><p><strong>T.fst</strong></p><p>For <code>T</code>,  it means the <code>token</code>, in wenet, it is used for CTC decoding. It is used for: </p><ol><li>remove and manage the blanks, from <blank> -&gt; <eps> </li><li>decode the multiple tokens output into one sentence, how we manage it? (this is very typically used in Mandarin Chinese, which can be a kind of characteristics of that language.)</li></ol><p><strong>L.fst</strong></p><p>L is lexicon, since the logic here is to make the input characters into the words, in english can be phones to words.</p><p><strong>G.fst</strong></p><p>G is grammar, it guides us from the words level into the sentence level. For words, it can be n-gram model. </p><p><strong>LG.fst</strong>  </p><p>LG.fst &#x3D; compose(L.fst, G.fst), we can compose those two fst models into one. </p><p><strong>TLG.fst</strong></p><p>Finally, we can just compose the LG.fst with the T.fst into a big decoding map. </p><h2 id="2-2-Language-Model-Deployment"><a href="#2-2-Language-Model-Deployment" class="headerlink" title="2.2 Language Model Deployment"></a>2.2 Language Model Deployment</h2><h3 id="Install-SRILM"><a href="#Install-SRILM" class="headerlink" title="Install SRILM"></a>Install SRILM</h3><p>If you want to review more ideas about the SRILM, you can also refer this page: <a href="https://www.xiaos.site/2022/07/11/Kaldi-for-Dummies/#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model">https://www.xiaos.site/2022/07/11/Kaldi-for-Dummies/#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> wenet/tools<br><span class="hljs-comment"># download, install the srilm, compile it.</span><br>bash install_srilm.sh<br><span class="hljs-built_in">source</span> env.sh<br><span class="hljs-comment"># check the dependencies whether in our dev env</span><br><span class="hljs-built_in">which</span> ngram-count<br><br><span class="hljs-comment"># we just train a 2-gram LM, the input text file is train.txt and the output is the lm.arpa</span><br>ngram-count -order 2 -text train.txt -lm lm.arpa<br><br><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># the train.txt is the original lexicon file, which includes some words like</span><br><br><br><span class="hljs-comment"># train.txt</span><br>I Love You<br>Wenet<br>ASR<br><span class="hljs-keyword">From</span> Training <span class="hljs-keyword">to</span> Deployment<br></code></pre></td></tr></table></figure><p>In that case, it will generate a <code>lm.arpa</code> file, and we can <code>vim lm.arpa</code></p><h3 id="Get-the-fst-with-LM-language-model"><a href="#Get-the-fst-with-LM-language-model" class="headerlink" title="Get the .fst with LM ( language model)"></a>Get the .fst with LM ( language model)</h3><p><img src="/../images/image-20220804141633132.png" alt="image-20220804141633132"></p><p>Her we need to get into the <code>cd /wenet/examples/aishell/s0</code> folder and <code>vim</code> the <code>run.sh</code> file.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 7.1 Prepare dict</span><br>unit_file=<span class="hljs-variable">$dict</span><br><span class="hljs-built_in">mkdir</span> -p data/local/dict<br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$unit_file</span> data/local/dict/units.txt<br>tools/fst/prepare_dict.py <span class="hljs-variable">$unit_file</span> <span class="hljs-variable">$&#123;data&#125;</span>/resource_aishell/lexicon.txt \<br>    data/local/dict/lexicon.txt<br><span class="hljs-comment"># 7.2 Train lm</span><br>lm=data/local/lm<br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$lm</span><br>tools/filter_scp.pl data/train/text \<br>     <span class="hljs-variable">$data</span>/data_aishell/transcript/aishell_transcript_v0.8.txt &gt; <span class="hljs-variable">$lm</span>/text<br><span class="hljs-built_in">local</span>/aishell_train_lms.sh<br><span class="hljs-comment"># 7.3 Build decoding TLG</span><br>tools/fst/compile_lexicon_token_fst.sh \<br>    data/local/dict data/local/tmp data/local/lang<br>tools/fst/make_tlg.sh data/local/lm data/local/lang data/lang_test || <span class="hljs-built_in">exit</span> 1;<br><span class="hljs-comment"># 7.4 Decoding with runtime</span><br>./tools/decode.sh --nj 16 \<br>    --beam 15.0 --lattice_beam 7.5 --max_active 7000 \<br>    --blank_skip_thresh 0.98 --ctc_weight 0.5 --rescoring_weight 1.0 \<br>    --fst_path data/lang_test/TLG.fst \<br>    --dict_path data/lang_test/words.txt \<br>    data/test/wav.scp data/test/text <span class="hljs-variable">$dir</span>/final.zip \<br>    data/lang_test/units.txt <span class="hljs-variable">$dir</span>/lm_with_runtime<br></code></pre></td></tr></table></figure><p>In wenet, this is the 7th step in the  <code>run.sh</code>,  if runs well, we would get :</p><p><code>composing decoding graph TLG.fst succeded</code></p><p>We will compile a <code>.fst</code> file into the <code>data/lang_test/</code> folder.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="3-Runtime-Compiling"><a href="#3-Runtime-Compiling" class="headerlink" title="3. Runtime Compiling"></a>3. Runtime Compiling</h1><h2 id="3-1-Get-the-pre-compiled-runtime-from-Wenet"><a href="#3-1-Get-the-pre-compiled-runtime-from-Wenet" class="headerlink" title="3.1 Get the pre-compiled runtime from Wenet"></a>3.1 Get the pre-compiled runtime from Wenet</h2><p>Wenet already gave us a pre-compiled runtime software for us to decode, so we do not need to compile the runtime ourselves, we can firstly use the wenet official released version to help us to do the decoding in the next stage, we can download here:</p><p><img src="/../images/image-20220804222301456.png" alt="image-20220804222301456"></p><p>After we downloaded, we can see those documents there:</p><p><img src="/../images/image-20220804222653725.png" alt="image-20220804222653725"></p><p>We will use mostly those three <code>.exe</code>  programs with red marks for us to do the decoding. </p><h2 id="3-2-Compile-at-your-local-machine"><a href="#3-2-Compile-at-your-local-machine" class="headerlink" title="3.2 Compile at your local machine"></a>3.2 Compile at your local machine</h2><p>If you want to compile your own runtime files on your local machine <strong>instead of downloading from the pre-compiled version from the Wenet official release</strong>, please check here!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> runtime/server/x86<br><span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> build &amp;&amp; cmake .. &amp;&amp; cmake --build .<br></code></pre></td></tr></table></figure><p>There is a notice here, we must ensure the <strong>cmake is upper than the 3.14 version, and the gcc should be higher than 5.4.</strong> </p><h1 id="4-Decode-the-Model"><a href="#4-Decode-the-Model" class="headerlink" title="4. Decode the Model"></a>4. Decode the Model</h1><p>Here is an example, we will use the pre-trained wenet model to do a sample decoding. After we downloaded that pre-trained model, we can just get into that downloaded directory.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> Downloads/release-wenet-binary<br></code></pre></td></tr></table></figure><h2 id="4-1-Runtime-Local-Decoding"><a href="#4-1-Runtime-Local-Decoding" class="headerlink" title="4.1 Runtime Local Decoding"></a>4.1 Runtime Local Decoding</h2><p>Here we can do a basic decoding test from our downloaded pre-trained runtime model. The decoding tool is just like <code>decoder_main.exe</code>, but we have to pass in some params there. </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--chunk_size    the wave chunck streamming param</span><br><span class="hljs-comment">--wav_paththe wave file we want to do the decoding</span><br><span class="hljs-comment">--model_paththe neural model from the trained model</span><br><span class="hljs-comment">--dict_path     the dictionary file from the trained model.</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./decoder_main.exe     --chunk_size -1     --wav_path ../test.wav     --model_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/final.zip     --dict_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/units.txt<br></code></pre></td></tr></table></figure><p>Here is the demo code that wenet gave:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /home/wenet/runtime/server/x86<br><span class="hljs-built_in">export</span> GLOG_logtostderr=1<br><span class="hljs-built_in">export</span> GLOG_v=2<br>wav_path=../test.wav<br>model_dir=../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch<br>./build/bin/decoder_main \<br>    --chunk_size 16 \<br>    --wav_path <span class="hljs-variable">$wav_path</span> \<br>    --model_path <span class="hljs-variable">$model_dir</span>/final.zip \<br>    --unit_path <span class="hljs-variable">$model_dir</span>/units.txt 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> log.txt \<br>    <span class="hljs-comment"># here are the path need to specify if we need the LM, it without these two lines of code, it will decode without the LM</span><br>    --fst_path <span class="hljs-variable">$model_dir</span>/TLG.fst \<br>    --dict_path <span class="hljs-variable">$model_dir</span>/words.txt<br></code></pre></td></tr></table></figure><h2 id="4-2-Online-Decoding-with-Host"><a href="#4-2-Online-Decoding-with-Host" class="headerlink" title="4.2 Online Decoding with Host"></a>4.2 Online Decoding with Host</h2><h3 id="4-2-1-Runtime-Host-Decoding-with-a-CMD-interface"><a href="#4-2-1-Runtime-Host-Decoding-with-a-CMD-interface" class="headerlink" title="4.2.1 Runtime Host Decoding with a CMD interface"></a>4.2.1 Runtime Host Decoding with a CMD interface</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./websocket_client_main.exe   --hostname 127.0.0.1   --port 10086    --wav_path ../test.wav<br></code></pre></td></tr></table></figure><h3 id="4-2-2-Runtime-Host-Decoding-with-a-Web-interface"><a href="#4-2-2-Runtime-Host-Decoding-with-a-Web-interface" class="headerlink" title="4.2.2 Runtime Host Decoding with a Web interface"></a>4.2.2 Runtime Host Decoding with a Web interface</h3><p>Wenet just gave us a great demo for us to do the demo illustration, and it used the <code>Flask</code>.  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># here are the code to run the runtime server, right now it is hosted, and we can get the request from that url: ws://127.0.0.1:10086</span><br>./websocket_server_main.exe --port 10086    --chunk_size -1    --model_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/final.zip     --dict_path ../20210601_u2++_conformer_libtorch/20210601_u2++_conformer_libtorch/units.txt<br></code></pre></td></tr></table></figure><p>For the server side, it will open a server from the local machine at the 10086, we can then get into the <code>index.html</code> from the flask demo to get the response there. </p><p><img src="/../images/image-20220730004721190.png" alt="image-20220730004721190"></p><p>We need to open the <code>index.html</code> after we already made sure that our <code>ws://127.0.0.1:10086</code> host is launching. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> wenet/runtime/server/x86/web/templates<br><span class="hljs-comment"># we can just open that index.html to open a flask web demo app to retreive the data there.</span><br></code></pre></td></tr></table></figure><p>The blue button here is a Chinese means “start to do the speech recognition”, and after we click the allow to recording, so we can just do the asr tasks here with the streaming and unstreamming modes only if we changed the <code>chunk_size</code> from our decoding cmds.</p><p><img src="/../images/image-20220730004448344.png" alt="image-20220730004448344"></p><h2 id="4-3-Use-Python"><a href="#4-3-Use-Python" class="headerlink" title="4.3 Use Python"></a>4.3 Use Python</h2><p>We can refer this website,  it supports the streaming and non-streaming methods: <a href="https://github.com/wenet-e2e/wenet/tree/main/runtime/binding/python">https://github.com/wenet-e2e/wenet/tree/main/runtime/binding/python</a></p><p>Here we just choose a <strong>Non-streaming</strong> Usage. </p><p>we just firstly install the python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install wenet<br></code></pre></td></tr></table></figure><p>We need to write a <code>demo.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># demo.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> wenet<br><br>wav_file = sys.argv[<span class="hljs-number">1</span>] <span class="hljs-comment"># we specify the file we want to decode </span><br>decoder = wenet.Decoder(model_dir, lang=<span class="hljs-string">&#x27;chs&#x27;</span>)<br><span class="hljs-comment"># in the model directory we need to add 4 files into it: 1) the runtime model like final.zip 2) units.txt from the datasets, 3) words.txt, from the LM we trained (optional), 4) TLG.fst, from previous operations (optional)</span><br>ans = decoder.decode_wav(wav_file)<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment"># call decoder.reset() if you want to do the next decoding</span><br></code></pre></td></tr></table></figure><h1 id="5-Hot-Word-Enhancement"><a href="#5-Hot-Word-Enhancement" class="headerlink" title="5. Hot Word Enhancement"></a>5. Hot Word Enhancement</h1><p>Hot word is contextual (context) biasing, which means we can argumented the specific word we want and make it easily be recognized. This is often occurred within the speech technology. </p><p>The common senarios can be recognize: locations, contacter’s name, date or telephone numbers… This senario is always used into the real commercial cases.</p><p>In all, the how word enhancement is to give some particular words some kind of more weighting score. In this way, it will make the word we want (hot word) more easily to be decoded.</p><h1 id="6-Long-time-audio-ASR"><a href="#6-Long-time-audio-ASR" class="headerlink" title="6. Long-time audio ASR"></a>6. Long-time audio ASR</h1><p><img src="/../images/image-20220819211753969.png" alt="image-20220819211753969"></p><p>The basic philosophy here for long-time audio asr tasks are very direct, we just divide the big problems into small problems. We have to detect the endpoint for each sentences, just make it in trucks. And after the end-point,  we can re-recognize the sentences. </p><h2 id="6-1-EndPoint-Detection"><a href="#6-1-EndPoint-Detection" class="headerlink" title="6.1 EndPoint Detection"></a>6.1 EndPoint Detection</h2><p>What is endpoint, endpoint is somewhere that the user will stop at some point, or just the end of the sentences. We can just set the silence threshold of the sentences. </p><p>There are three senarios(rules) in wenet:</p><ol><li>Before the speech, the silence in there. Default value is 5000ms (5s).</li><li>Within the speech, the silence there. Default value is 1000ms (1s).</li><li>If the user’s speech trunks are too large, we have to cut it forcelly. Default value is 20000ms (20s).</li></ol><p>We can set the params here in wenet.</p><p>Here are the core codes here from wenet for Endpoint detection task:<a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.h">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.h</a></p><p><img src="/../images/image-20220819212902233.png" alt="image-20220819212902233"></p><p><img src="/../images/image-20220819213119821.png" alt="image-20220819213119821"></p><p>We can define the values we want, the units will be 5000 ms. </p><p>The real code for <strong>continous blank detection</strong> is in here: <a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.cc">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/ctc_endpoint.cc</a></p><p>These are the codes that how it really works:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CtcEndpoint::IsEndpoint</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> std::vector&lt;std::vector&lt;<span class="hljs-type">float</span>&gt;&gt;&amp; ctc_log_probs,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-comment">// it will get the ctc log probabilities, it will get the ctc prob and compare with the blank prob.</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">bool</span> decoded_something)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; ctc_log_probs.<span class="hljs-built_in">size</span>(); ++t) &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; <span class="hljs-type">logp_t</span> = ctc_log_probs[t];<br>    <span class="hljs-type">float</span> blank_prob = <span class="hljs-built_in">expf</span>(<span class="hljs-type">logp_t</span>[config_.blank]);<br>    num_frames_decoded_++;<br>    <span class="hljs-comment">// in here if the blank prob bigger than the preset blank value we set, it will detect as silence signal.</span><br>    <span class="hljs-keyword">if</span> (blank_prob &gt; config_.blank_threshold) &#123;<br>      num_frames_trailing_blank_++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// if not will be cleared into 0, some it follows a culmuative way.</span><br>      num_frames_trailing_blank_ = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// we will check the length of the speech.</span><br>  <span class="hljs-built_in">CHECK_GE</span>(num_frames_decoded_, num_frames_trailing_blank_);<br>  <span class="hljs-built_in">CHECK_GT</span>(frame_shift_in_ms_, <span class="hljs-number">0</span>);<br>  <span class="hljs-type">int</span> utterance_length = num_frames_decoded_ * frame_shift_in_ms_;<br>  <span class="hljs-type">int</span> trailing_silence = num_frames_trailing_blank_ * frame_shift_in_ms_;<br>  <span class="hljs-comment">// if there is any case that be activated, the endpoint exception case will be triggered.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RuleActivated</span>(config_.rule1, <span class="hljs-string">&quot;rule1&quot;</span>, decoded_something, trailing_silence,<br>                    utterance_length))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RuleActivated</span>(config_.rule2, <span class="hljs-string">&quot;rule2&quot;</span>, decoded_something, trailing_silence,<br>                    utterance_length))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RuleActivated</span>(config_.rule3, <span class="hljs-string">&quot;rule3&quot;</span>, decoded_something, trailing_silence,<br>                    utterance_length))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1-1-CTC-Endpoint-Process"><a href="#6-1-1-CTC-Endpoint-Process" class="headerlink" title="6.1.1 CTC Endpoint Process"></a>6.1.1 CTC Endpoint Process</h3><h4 id="Endpoint-Detection"><a href="#Endpoint-Detection" class="headerlink" title="Endpoint Detection"></a>Endpoint Detection</h4><p>We can check the code here: <a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/asr_decoder.cc#L117">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/asr_decoder.cc#L117</a></p><p><img src="/../images/image-20220821035221487.png" alt="image-20220821035221487"></p><p>Here the program can detect whether there is a endpoint there.</p><h4 id="Rescoring"><a href="#Rescoring" class="headerlink" title="Rescoring"></a>Rescoring</h4><p>For Wenet, we have the CTC decoding results to do the rescoring tatics. It will the Nbest scoring, also it will append the recognition results into the original results. <img src="/../images/image-20220821035807719.png" alt="image-20220821035807719"></p><p>We can detect from <a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/bin/decoder_main.cc#L75">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/bin/decoder_main.cc#L75</a></p><h4 id="State-Reset"><a href="#State-Reset" class="headerlink" title="State Reset"></a>State Reset</h4><p><a href="https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/asr_decoder.cc#L67">https://github.com/wenet-e2e/wenet/blob/main/runtime/core/decoder/asr_decoder.cc#L67</a></p><p><img src="/../images/image-20220821040446495.png" alt="image-20220821040446495"></p><p>It will do the status reset for the final step. It will clear the status, and ready for the next-stage recognition. It will add a comma “,” for each endpoint.</p><h3 id="6-1-2-Webrtcvad"><a href="#6-1-2-Webrtcvad" class="headerlink" title="6.1.2 Webrtcvad"></a>6.1.2 Webrtcvad</h3><p>Wenet also supports like external vad modules like from <code>webrtcvad</code>. It is a very great open-resource job here, the difference here is that it used more tactics to do the audio vad works instead of just pure stop-point detections. </p><p><a href="https://github.com/wiseman/py-webrtcvad">https://github.com/wiseman/py-webrtcvad</a></p><p><img src="/../images/image-20220821055530432.png" alt="image-20220821055530432"></p><p>The way it works are very direct, it will detect whether there is the silent audio.</p><p><img src="/../images/image-20220821055724162.png" alt="From: https://github.com/wiseman/py-webrtcvad/blob/master/example.py#L141"></p><h2 id="6-2-Python-Deployment"><a href="#6-2-Python-Deployment" class="headerlink" title="6.2 Python Deployment"></a>6.2 Python Deployment</h2><p>The easiest way is to just call the <code>continous_decoding</code> param and set it as <code>True</code>. If we set this as <code>False</code>, there can be no stops of our recognition texts, and at the same time, there will be a faster speed to decode since there is no endstop detection.</p><p><img src="/../images/image-20220821052226122.png" alt="image-20220821052226122"></p><p>We will use a streaming way that we will input the audio chunks in every 0.5 seconds. We decode the audio file in each 0.5 seconds each time, it will like the streaming way. The delay in the streaming ASR jobs will always like between <code>500ms</code> to <code>600ms</code>, so it will be limited on there speech recognition accuracy.</p><h2 id="6-3-Use-C"><a href="#6-3-Use-C" class="headerlink" title="6.3 Use C++"></a>6.3 Use C++</h2><p>We can easily use the C++ to do the long-time audio ASR by just selecting the <code>continous_decoding</code> into <code>True</code>:</p><p><img src="/../images/image-20220821053452850.png" alt="image-20220821053452850"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Speech Recognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebRtc Audio Processing Notes</title>
    <link href="/2022/02/02/WebRtc-Audio-Processing-Notes/"/>
    <url>/2022/02/02/WebRtc-Audio-Processing-Notes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>The website: <a href="https://freedesktop.org/software/pulseaudio/webrtc-audio-processing/">https://freedesktop.org/software/pulseaudio/webrtc-audio-processing/</a></p><h1 id="Noise-Suppresion"><a href="#Noise-Suppresion" class="headerlink" title="Noise Suppresion"></a>Noise Suppresion</h1><p>We will look into: <code>WebRTC-audio-processing/webrtc-audio-processing/webrtc/modules/ns_core.c</code>. </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2022/01/06/Hexo/"/>
    <url>/2022/01/06/Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-combine-the-Hexo-together-with-the-Typora"><a href="#How-to-combine-the-Hexo-together-with-the-Typora" class="headerlink" title="How to combine the Hexo together with the Typora"></a>How to combine the Hexo together with the Typora</h1><p>Here is the way I reviewed from the web, since I knew there is a very big issue if we just add the images there but have the path issues. </p><p><a href="https://www.cnblogs.com/himeka/p/16306906.html">https://www.cnblogs.com/himeka/p/16306906.html</a></p><p><img src="/../images/image-20220730012119667.png" alt="image-20220730012119667"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Video and Audio Multimedia Development</title>
    <link href="/2022/01/02/Video-and-Audio-Multimedia-Development/"/>
    <url>/2022/01/02/Video-and-Audio-Multimedia-Development/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
